// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ScillaMessage/ScillaMessage.proto

package ScillaMessage

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProtoScillaVal struct {
	// Types that are valid to be assigned to ValType:
	//	*ProtoScillaVal_Bval
	//	*ProtoScillaVal_Mval
	ValType              isProtoScillaVal_ValType `protobuf_oneof:"ValType"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ProtoScillaVal) Reset()         { *m = ProtoScillaVal{} }
func (m *ProtoScillaVal) String() string { return proto.CompactTextString(m) }
func (*ProtoScillaVal) ProtoMessage()    {}
func (*ProtoScillaVal) Descriptor() ([]byte, []int) {
	return fileDescriptor_346c52d532a424ba, []int{0}
}
func (m *ProtoScillaVal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoScillaVal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoScillaVal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoScillaVal.Merge(m, src)
}
func (m *ProtoScillaVal) XXX_Size() int {
	return m.Size()
}
func (m *ProtoScillaVal) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoScillaVal.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoScillaVal proto.InternalMessageInfo

type isProtoScillaVal_ValType interface {
	isProtoScillaVal_ValType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProtoScillaVal_Bval struct {
	Bval []byte `protobuf:"bytes,1,opt,name=bval,proto3,oneof" json:"bval,omitempty"`
}
type ProtoScillaVal_Mval struct {
	Mval *ProtoScillaVal_Map `protobuf:"bytes,2,opt,name=mval,proto3,oneof" json:"mval,omitempty"`
}

func (*ProtoScillaVal_Bval) isProtoScillaVal_ValType() {}
func (*ProtoScillaVal_Mval) isProtoScillaVal_ValType() {}

func (m *ProtoScillaVal) GetValType() isProtoScillaVal_ValType {
	if m != nil {
		return m.ValType
	}
	return nil
}

func (m *ProtoScillaVal) GetBval() []byte {
	if x, ok := m.GetValType().(*ProtoScillaVal_Bval); ok {
		return x.Bval
	}
	return nil
}

func (m *ProtoScillaVal) GetMval() *ProtoScillaVal_Map {
	if x, ok := m.GetValType().(*ProtoScillaVal_Mval); ok {
		return x.Mval
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtoScillaVal) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtoScillaVal_Bval)(nil),
		(*ProtoScillaVal_Mval)(nil),
	}
}

type ProtoScillaVal_Map struct {
	M                    map[string]*ProtoScillaVal `protobuf:"bytes,1,rep,name=m,proto3" json:"m,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ProtoScillaVal_Map) Reset()         { *m = ProtoScillaVal_Map{} }
func (m *ProtoScillaVal_Map) String() string { return proto.CompactTextString(m) }
func (*ProtoScillaVal_Map) ProtoMessage()    {}
func (*ProtoScillaVal_Map) Descriptor() ([]byte, []int) {
	return fileDescriptor_346c52d532a424ba, []int{0, 0}
}
func (m *ProtoScillaVal_Map) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoScillaVal_Map) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoScillaVal_Map) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoScillaVal_Map.Merge(m, src)
}
func (m *ProtoScillaVal_Map) XXX_Size() int {
	return m.Size()
}
func (m *ProtoScillaVal_Map) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoScillaVal_Map.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoScillaVal_Map proto.InternalMessageInfo

func (m *ProtoScillaVal_Map) GetM() map[string]*ProtoScillaVal {
	if m != nil {
		return m.M
	}
	return nil
}

type ProtoScillaQuery struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Mapdepth             uint32   `protobuf:"varint,2,opt,name=mapdepth,proto3" json:"mapdepth,omitempty"`
	Indices              [][]byte `protobuf:"bytes,3,rep,name=indices,proto3" json:"indices,omitempty"`
	Ignoreval            bool     `protobuf:"varint,4,opt,name=ignoreval,proto3" json:"ignoreval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtoScillaQuery) Reset()         { *m = ProtoScillaQuery{} }
func (m *ProtoScillaQuery) String() string { return proto.CompactTextString(m) }
func (*ProtoScillaQuery) ProtoMessage()    {}
func (*ProtoScillaQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_346c52d532a424ba, []int{1}
}
func (m *ProtoScillaQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoScillaQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoScillaQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoScillaQuery.Merge(m, src)
}
func (m *ProtoScillaQuery) XXX_Size() int {
	return m.Size()
}
func (m *ProtoScillaQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoScillaQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoScillaQuery proto.InternalMessageInfo

func (m *ProtoScillaQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProtoScillaQuery) GetMapdepth() uint32 {
	if m != nil {
		return m.Mapdepth
	}
	return 0
}

func (m *ProtoScillaQuery) GetIndices() [][]byte {
	if m != nil {
		return m.Indices
	}
	return nil
}

func (m *ProtoScillaQuery) GetIgnoreval() bool {
	if m != nil {
		return m.Ignoreval
	}
	return false
}

func init() {
	proto.RegisterType((*ProtoScillaVal)(nil), "ScillaMessage.ProtoScillaVal")
	proto.RegisterType((*ProtoScillaVal_Map)(nil), "ScillaMessage.ProtoScillaVal.Map")
	proto.RegisterMapType((map[string]*ProtoScillaVal)(nil), "ScillaMessage.ProtoScillaVal.Map.MEntry")
	proto.RegisterType((*ProtoScillaQuery)(nil), "ScillaMessage.ProtoScillaQuery")
}

func init() { proto.RegisterFile("ScillaMessage/ScillaMessage.proto", fileDescriptor_346c52d532a424ba) }

var fileDescriptor_346c52d532a424ba = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xcd, 0x4a, 0xeb, 0x50,
	0x14, 0x85, 0xef, 0x6e, 0x72, 0xfb, 0xb3, 0xdb, 0x5e, 0xca, 0xe1, 0x0e, 0x42, 0xd0, 0x43, 0x5a,
	0x1c, 0x64, 0x62, 0x0a, 0x2d, 0xa8, 0x38, 0x2c, 0x08, 0x4e, 0x02, 0x9a, 0x4a, 0xe7, 0x27, 0xed,
	0x31, 0x0d, 0xe6, 0x8f, 0x34, 0x29, 0xc4, 0xc7, 0xf0, 0x29, 0x7c, 0x04, 0x1f, 0xc1, 0xa1, 0x43,
	0x87, 0x36, 0x4f, 0xd0, 0xa1, 0x33, 0x25, 0x27, 0xf5, 0x27, 0x13, 0x9d, 0xad, 0x6f, 0xb3, 0xd7,
	0xda, 0x8b, 0x73, 0xb0, 0x3f, 0x9d, 0xbb, 0x9e, 0xc7, 0x4c, 0xbe, 0x5a, 0x31, 0x87, 0x0f, 0x2b,
	0x64, 0x44, 0x71, 0x98, 0x84, 0xa4, 0x5b, 0x19, 0xaa, 0x87, 0x8e, 0x9b, 0x2c, 0x53, 0xdb, 0x98,
	0x87, 0xfe, 0xd0, 0x09, 0x9d, 0x70, 0x28, 0xb6, 0xec, 0xf4, 0x5a, 0x90, 0x00, 0xa1, 0x4a, 0xf7,
	0xe0, 0x0d, 0xf0, 0xdf, 0x45, 0xa1, 0xca, 0x94, 0x19, 0xf3, 0xc8, 0x7f, 0x94, 0xed, 0x35, 0xf3,
	0x14, 0xd0, 0x40, 0xef, 0x9c, 0xff, 0xb1, 0x04, 0x91, 0x63, 0x94, 0xfd, 0x62, 0x5a, 0xd3, 0x40,
	0x6f, 0x8f, 0xfa, 0x46, 0xb5, 0x4a, 0x35, 0xc2, 0x30, 0x59, 0x54, 0x18, 0x0b, 0x83, 0x7a, 0x07,
	0x28, 0x99, 0x2c, 0x22, 0x47, 0x08, 0xbe, 0x02, 0x9a, 0xa4, 0xb7, 0x47, 0xfa, 0xaf, 0x6e, 0xc3,
	0x3c, 0x0b, 0x92, 0x38, 0xb3, 0xc0, 0x57, 0xa7, 0x58, 0x2f, 0x81, 0xf4, 0x50, 0xba, 0xe1, 0x99,
	0xe8, 0xd5, 0xb2, 0x0a, 0x49, 0xc6, 0xf8, 0x77, 0xcd, 0xbc, 0x94, 0xef, 0x5a, 0xed, 0xff, 0x98,
	0x6b, 0x95, 0xbb, 0xa7, 0xb5, 0x13, 0x98, 0xb4, 0xb0, 0x31, 0x63, 0xde, 0x55, 0x16, 0xf1, 0xc1,
	0x2d, 0xf6, 0xbe, 0xed, 0x5d, 0xa6, 0x3c, 0xce, 0x08, 0x41, 0x39, 0x60, 0x3e, 0xdf, 0x9d, 0x12,
	0x9a, 0xa8, 0xd8, 0xf4, 0x59, 0xb4, 0xe0, 0x51, 0xb2, 0x14, 0xe7, 0xba, 0xd6, 0x27, 0x13, 0x05,
	0x1b, 0x6e, 0xb0, 0x70, 0xe7, 0x7c, 0xa5, 0x48, 0x9a, 0xa4, 0x77, 0xac, 0x0f, 0x24, 0x7b, 0xd8,
	0x72, 0x9d, 0x20, 0x8c, 0x79, 0xf1, 0x76, 0xb2, 0x06, 0x7a, 0xd3, 0xfa, 0x1a, 0x4c, 0x0e, 0xb6,
	0x1b, 0x0a, 0xaf, 0x1b, 0x0a, 0xf7, 0x39, 0x85, 0x87, 0x9c, 0xc2, 0x63, 0x4e, 0xe1, 0x29, 0xa7,
	0xf0, 0x9c, 0x53, 0x78, 0xc9, 0x29, 0x6c, 0x73, 0x0a, 0x76, 0x5d, 0x7c, 0xd5, 0xf8, 0x3d, 0x00,
	0x00, 0xff, 0xff, 0x64, 0xac, 0x89, 0x6e, 0x0d, 0x02, 0x00, 0x00,
}

func (this *ProtoScillaVal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoScillaVal)
	if !ok {
		that2, ok := that.(ProtoScillaVal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ValType == nil {
		if this.ValType != nil {
			return false
		}
	} else if this.ValType == nil {
		return false
	} else if !this.ValType.Equal(that1.ValType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoScillaVal_Bval) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoScillaVal_Bval)
	if !ok {
		that2, ok := that.(ProtoScillaVal_Bval)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Bval, that1.Bval) {
		return false
	}
	return true
}
func (this *ProtoScillaVal_Mval) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoScillaVal_Mval)
	if !ok {
		that2, ok := that.(ProtoScillaVal_Mval)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mval.Equal(that1.Mval) {
		return false
	}
	return true
}
func (this *ProtoScillaVal_Map) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoScillaVal_Map)
	if !ok {
		that2, ok := that.(ProtoScillaVal_Map)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.M) != len(that1.M) {
		return false
	}
	for i := range this.M {
		if !this.M[i].Equal(that1.M[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoScillaQuery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoScillaQuery)
	if !ok {
		that2, ok := that.(ProtoScillaQuery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Mapdepth != that1.Mapdepth {
		return false
	}
	if len(this.Indices) != len(that1.Indices) {
		return false
	}
	for i := range this.Indices {
		if !bytes.Equal(this.Indices[i], that1.Indices[i]) {
			return false
		}
	}
	if this.Ignoreval != that1.Ignoreval {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoScillaVal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ScillaMessage.ProtoScillaVal{")
	if this.ValType != nil {
		s = append(s, "ValType: "+fmt.Sprintf("%#v", this.ValType)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoScillaVal_Bval) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScillaMessage.ProtoScillaVal_Bval{` +
		`Bval:` + fmt.Sprintf("%#v", this.Bval) + `}`}, ", ")
	return s
}
func (this *ProtoScillaVal_Mval) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScillaMessage.ProtoScillaVal_Mval{` +
		`Mval:` + fmt.Sprintf("%#v", this.Mval) + `}`}, ", ")
	return s
}
func (this *ProtoScillaVal_Map) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ScillaMessage.ProtoScillaVal_Map{")
	keysForM := make([]string, 0, len(this.M))
	for k, _ := range this.M {
		keysForM = append(keysForM, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForM)
	mapStringForM := "map[string]*ProtoScillaVal{"
	for _, k := range keysForM {
		mapStringForM += fmt.Sprintf("%#v: %#v,", k, this.M[k])
	}
	mapStringForM += "}"
	if this.M != nil {
		s = append(s, "M: "+mapStringForM+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoScillaQuery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ScillaMessage.ProtoScillaQuery{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Mapdepth: "+fmt.Sprintf("%#v", this.Mapdepth)+",\n")
	s = append(s, "Indices: "+fmt.Sprintf("%#v", this.Indices)+",\n")
	s = append(s, "Ignoreval: "+fmt.Sprintf("%#v", this.Ignoreval)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringScillaMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ProtoScillaVal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoScillaVal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoScillaVal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ValType != nil {
		{
			size := m.ValType.Size()
			i -= size
			if _, err := m.ValType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProtoScillaVal_Bval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoScillaVal_Bval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Bval != nil {
		i -= len(m.Bval)
		copy(dAtA[i:], m.Bval)
		i = encodeVarintScillaMessage(dAtA, i, uint64(len(m.Bval)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ProtoScillaVal_Mval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoScillaVal_Mval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Mval != nil {
		{
			size, err := m.Mval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScillaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ProtoScillaVal_Map) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoScillaVal_Map) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoScillaVal_Map) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.M) > 0 {
		keysForM := make([]string, 0, len(m.M))
		for k := range m.M {
			keysForM = append(keysForM, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForM)
		for iNdEx := len(keysForM) - 1; iNdEx >= 0; iNdEx-- {
			v := m.M[string(keysForM[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintScillaMessage(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForM[iNdEx])
			copy(dAtA[i:], keysForM[iNdEx])
			i = encodeVarintScillaMessage(dAtA, i, uint64(len(keysForM[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintScillaMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProtoScillaQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoScillaQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoScillaQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ignoreval {
		i--
		if m.Ignoreval {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Indices) > 0 {
		for iNdEx := len(m.Indices) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Indices[iNdEx])
			copy(dAtA[i:], m.Indices[iNdEx])
			i = encodeVarintScillaMessage(dAtA, i, uint64(len(m.Indices[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Mapdepth != 0 {
		i = encodeVarintScillaMessage(dAtA, i, uint64(m.Mapdepth))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintScillaMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintScillaMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovScillaMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedProtoScillaVal(r randyScillaMessage, easy bool) *ProtoScillaVal {
	this := &ProtoScillaVal{}
	oneofNumber_ValType := []int32{1, 2}[r.Intn(2)]
	switch oneofNumber_ValType {
	case 1:
		this.ValType = NewPopulatedProtoScillaVal_Bval(r, easy)
	case 2:
		this.ValType = NewPopulatedProtoScillaVal_Mval(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedScillaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoScillaVal_Bval(r randyScillaMessage, easy bool) *ProtoScillaVal_Bval {
	this := &ProtoScillaVal_Bval{}
	v1 := r.Intn(100)
	this.Bval = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Bval[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedProtoScillaVal_Mval(r randyScillaMessage, easy bool) *ProtoScillaVal_Mval {
	this := &ProtoScillaVal_Mval{}
	this.Mval = NewPopulatedProtoScillaVal_Map(r, easy)
	return this
}
func NewPopulatedProtoScillaVal_Map(r randyScillaMessage, easy bool) *ProtoScillaVal_Map {
	this := &ProtoScillaVal_Map{}
	if r.Intn(5) == 0 {
		v2 := r.Intn(10)
		this.M = make(map[string]*ProtoScillaVal)
		for i := 0; i < v2; i++ {
			this.M[randStringScillaMessage(r)] = NewPopulatedProtoScillaVal(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedScillaMessage(r, 2)
	}
	return this
}

func NewPopulatedProtoScillaQuery(r randyScillaMessage, easy bool) *ProtoScillaQuery {
	this := &ProtoScillaQuery{}
	this.Name = string(randStringScillaMessage(r))
	this.Mapdepth = uint32(r.Uint32())
	v3 := r.Intn(10)
	this.Indices = make([][]byte, v3)
	for i := 0; i < v3; i++ {
		v4 := r.Intn(100)
		this.Indices[i] = make([]byte, v4)
		for j := 0; j < v4; j++ {
			this.Indices[i][j] = byte(r.Intn(256))
		}
	}
	this.Ignoreval = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedScillaMessage(r, 5)
	}
	return this
}

type randyScillaMessage interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneScillaMessage(r randyScillaMessage) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringScillaMessage(r randyScillaMessage) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneScillaMessage(r)
	}
	return string(tmps)
}
func randUnrecognizedScillaMessage(r randyScillaMessage, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldScillaMessage(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldScillaMessage(dAtA []byte, r randyScillaMessage, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateScillaMessage(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulateScillaMessage(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulateScillaMessage(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateScillaMessage(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateScillaMessage(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateScillaMessage(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateScillaMessage(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ProtoScillaVal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValType != nil {
		n += m.ValType.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoScillaVal_Bval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bval != nil {
		l = len(m.Bval)
		n += 1 + l + sovScillaMessage(uint64(l))
	}
	return n
}
func (m *ProtoScillaVal_Mval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mval != nil {
		l = m.Mval.Size()
		n += 1 + l + sovScillaMessage(uint64(l))
	}
	return n
}
func (m *ProtoScillaVal_Map) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.M) > 0 {
		for k, v := range m.M {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovScillaMessage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovScillaMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovScillaMessage(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoScillaQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScillaMessage(uint64(l))
	}
	if m.Mapdepth != 0 {
		n += 1 + sovScillaMessage(uint64(m.Mapdepth))
	}
	if len(m.Indices) > 0 {
		for _, b := range m.Indices {
			l = len(b)
			n += 1 + l + sovScillaMessage(uint64(l))
		}
	}
	if m.Ignoreval {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovScillaMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozScillaMessage(x uint64) (n int) {
	return sovScillaMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProtoScillaVal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScillaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoScillaVal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoScillaVal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bval", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScillaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScillaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScillaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.ValType = &ProtoScillaVal_Bval{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScillaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScillaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScillaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProtoScillaVal_Map{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValType = &ProtoScillaVal_Mval{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScillaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScillaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScillaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoScillaVal_Map) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScillaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Map: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Map: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScillaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScillaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScillaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.M == nil {
				m.M = make(map[string]*ProtoScillaVal)
			}
			var mapkey string
			var mapvalue *ProtoScillaVal
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScillaMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScillaMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthScillaMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthScillaMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScillaMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthScillaMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthScillaMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ProtoScillaVal{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipScillaMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthScillaMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.M[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScillaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScillaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScillaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoScillaQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScillaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoScillaQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoScillaQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScillaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScillaMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScillaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mapdepth", wireType)
			}
			m.Mapdepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScillaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mapdepth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indices", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScillaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScillaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScillaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indices = append(m.Indices, make([]byte, postIndex-iNdEx))
			copy(m.Indices[len(m.Indices)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ignoreval", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScillaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ignoreval = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipScillaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScillaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScillaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScillaMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScillaMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScillaMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScillaMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthScillaMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupScillaMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthScillaMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthScillaMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScillaMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupScillaMessage = fmt.Errorf("proto: unexpected end of group")
)
