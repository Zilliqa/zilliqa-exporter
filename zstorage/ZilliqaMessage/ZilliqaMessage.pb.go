// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ZilliqaMessage.proto

package ZilliqaMessage

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ByteArray struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ByteArray) Reset()         { *m = ByteArray{} }
func (m *ByteArray) String() string { return proto.CompactTextString(m) }
func (*ByteArray) ProtoMessage()    {}
func (*ByteArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{0}
}
func (m *ByteArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ByteArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ByteArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByteArray.Merge(m, src)
}
func (m *ByteArray) XXX_Size() int {
	return m.Size()
}
func (m *ByteArray) XXX_DiscardUnknown() {
	xxx_messageInfo_ByteArray.DiscardUnknown(m)
}

var xxx_messageInfo_ByteArray proto.InternalMessageInfo

func (m *ByteArray) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Used in database "blockLinks"
type ProtoBlockLink struct {
	// Types that are valid to be assigned to Oneof1:
	//	*ProtoBlockLink_Version
	Oneof1 isProtoBlockLink_Oneof1 `protobuf_oneof:"oneof1"`
	// Types that are valid to be assigned to Oneof2:
	//	*ProtoBlockLink_Index
	Oneof2 isProtoBlockLink_Oneof2 `protobuf_oneof:"oneof2"`
	// Types that are valid to be assigned to Oneof3:
	//	*ProtoBlockLink_Dsindex
	Oneof3 isProtoBlockLink_Oneof3 `protobuf_oneof:"oneof3"`
	// Types that are valid to be assigned to Oneof4:
	//	*ProtoBlockLink_Blocktype
	Oneof4               isProtoBlockLink_Oneof4 `protobuf_oneof:"oneof4"`
	Blockhash            []byte                  `protobuf:"bytes,5,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ProtoBlockLink) Reset()         { *m = ProtoBlockLink{} }
func (m *ProtoBlockLink) String() string { return proto.CompactTextString(m) }
func (*ProtoBlockLink) ProtoMessage()    {}
func (*ProtoBlockLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{1}
}
func (m *ProtoBlockLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoBlockLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoBlockLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoBlockLink.Merge(m, src)
}
func (m *ProtoBlockLink) XXX_Size() int {
	return m.Size()
}
func (m *ProtoBlockLink) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoBlockLink.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoBlockLink proto.InternalMessageInfo

type isProtoBlockLink_Oneof1 interface {
	isProtoBlockLink_Oneof1()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProtoBlockLink_Oneof2 interface {
	isProtoBlockLink_Oneof2()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProtoBlockLink_Oneof3 interface {
	isProtoBlockLink_Oneof3()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProtoBlockLink_Oneof4 interface {
	isProtoBlockLink_Oneof4()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProtoBlockLink_Version struct {
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3,oneof" json:"version,omitempty"`
}
type ProtoBlockLink_Index struct {
	Index uint64 `protobuf:"varint,2,opt,name=index,proto3,oneof" json:"index,omitempty"`
}
type ProtoBlockLink_Dsindex struct {
	Dsindex uint64 `protobuf:"varint,3,opt,name=dsindex,proto3,oneof" json:"dsindex,omitempty"`
}
type ProtoBlockLink_Blocktype struct {
	Blocktype uint32 `protobuf:"varint,4,opt,name=blocktype,proto3,oneof" json:"blocktype,omitempty"`
}

func (*ProtoBlockLink_Version) isProtoBlockLink_Oneof1()   {}
func (*ProtoBlockLink_Index) isProtoBlockLink_Oneof2()     {}
func (*ProtoBlockLink_Dsindex) isProtoBlockLink_Oneof3()   {}
func (*ProtoBlockLink_Blocktype) isProtoBlockLink_Oneof4() {}

func (m *ProtoBlockLink) GetOneof1() isProtoBlockLink_Oneof1 {
	if m != nil {
		return m.Oneof1
	}
	return nil
}
func (m *ProtoBlockLink) GetOneof2() isProtoBlockLink_Oneof2 {
	if m != nil {
		return m.Oneof2
	}
	return nil
}
func (m *ProtoBlockLink) GetOneof3() isProtoBlockLink_Oneof3 {
	if m != nil {
		return m.Oneof3
	}
	return nil
}
func (m *ProtoBlockLink) GetOneof4() isProtoBlockLink_Oneof4 {
	if m != nil {
		return m.Oneof4
	}
	return nil
}

func (m *ProtoBlockLink) GetVersion() uint32 {
	if x, ok := m.GetOneof1().(*ProtoBlockLink_Version); ok {
		return x.Version
	}
	return 0
}

func (m *ProtoBlockLink) GetIndex() uint64 {
	if x, ok := m.GetOneof2().(*ProtoBlockLink_Index); ok {
		return x.Index
	}
	return 0
}

func (m *ProtoBlockLink) GetDsindex() uint64 {
	if x, ok := m.GetOneof3().(*ProtoBlockLink_Dsindex); ok {
		return x.Dsindex
	}
	return 0
}

func (m *ProtoBlockLink) GetBlocktype() uint32 {
	if x, ok := m.GetOneof4().(*ProtoBlockLink_Blocktype); ok {
		return x.Blocktype
	}
	return 0
}

func (m *ProtoBlockLink) GetBlockhash() []byte {
	if m != nil {
		return m.Blockhash
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtoBlockLink) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtoBlockLink_Version)(nil),
		(*ProtoBlockLink_Index)(nil),
		(*ProtoBlockLink_Dsindex)(nil),
		(*ProtoBlockLink_Blocktype)(nil),
	}
}

// Used in databases "dsBlocks", "microBlocks", "txBlocks", "VCBlocks", and "Fallbackblock"
type ProtoBlockBase struct {
	Blockhash            []byte                       `protobuf:"bytes,1,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	Cosigs               *ProtoBlockBase_CoSignatures `protobuf:"bytes,2,opt,name=cosigs,proto3" json:"cosigs,omitempty"`
	Timestamp            uint64                       `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ProtoBlockBase) Reset()         { *m = ProtoBlockBase{} }
func (m *ProtoBlockBase) String() string { return proto.CompactTextString(m) }
func (*ProtoBlockBase) ProtoMessage()    {}
func (*ProtoBlockBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{2}
}
func (m *ProtoBlockBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoBlockBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoBlockBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoBlockBase.Merge(m, src)
}
func (m *ProtoBlockBase) XXX_Size() int {
	return m.Size()
}
func (m *ProtoBlockBase) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoBlockBase.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoBlockBase proto.InternalMessageInfo

func (m *ProtoBlockBase) GetBlockhash() []byte {
	if m != nil {
		return m.Blockhash
	}
	return nil
}

func (m *ProtoBlockBase) GetCosigs() *ProtoBlockBase_CoSignatures {
	if m != nil {
		return m.Cosigs
	}
	return nil
}

func (m *ProtoBlockBase) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type ProtoBlockBase_CoSignatures struct {
	Cs1                  *ByteArray `protobuf:"bytes,1,opt,name=cs1,proto3" json:"cs1,omitempty"`
	B1                   []bool     `protobuf:"varint,2,rep,packed,name=b1,proto3" json:"b1,omitempty"`
	Cs2                  *ByteArray `protobuf:"bytes,3,opt,name=cs2,proto3" json:"cs2,omitempty"`
	B2                   []bool     `protobuf:"varint,4,rep,packed,name=b2,proto3" json:"b2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProtoBlockBase_CoSignatures) Reset()         { *m = ProtoBlockBase_CoSignatures{} }
func (m *ProtoBlockBase_CoSignatures) String() string { return proto.CompactTextString(m) }
func (*ProtoBlockBase_CoSignatures) ProtoMessage()    {}
func (*ProtoBlockBase_CoSignatures) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{2, 0}
}
func (m *ProtoBlockBase_CoSignatures) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoBlockBase_CoSignatures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoBlockBase_CoSignatures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoBlockBase_CoSignatures.Merge(m, src)
}
func (m *ProtoBlockBase_CoSignatures) XXX_Size() int {
	return m.Size()
}
func (m *ProtoBlockBase_CoSignatures) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoBlockBase_CoSignatures.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoBlockBase_CoSignatures proto.InternalMessageInfo

func (m *ProtoBlockBase_CoSignatures) GetCs1() *ByteArray {
	if m != nil {
		return m.Cs1
	}
	return nil
}

func (m *ProtoBlockBase_CoSignatures) GetB1() []bool {
	if m != nil {
		return m.B1
	}
	return nil
}

func (m *ProtoBlockBase_CoSignatures) GetCs2() *ByteArray {
	if m != nil {
		return m.Cs2
	}
	return nil
}

func (m *ProtoBlockBase_CoSignatures) GetB2() []bool {
	if m != nil {
		return m.B2
	}
	return nil
}

// Used in "dsBlockHeader", "microBlockHeader", "txBlockHeader", and "VCBlockHeader"
type ProtoBlockHeaderBase struct {
	Version              uint32   `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Committeehash        []byte   `protobuf:"bytes,2,opt,name=committeehash,proto3" json:"committeehash,omitempty"`
	Prevhash             []byte   `protobuf:"bytes,3,opt,name=prevhash,proto3" json:"prevhash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtoBlockHeaderBase) Reset()         { *m = ProtoBlockHeaderBase{} }
func (m *ProtoBlockHeaderBase) String() string { return proto.CompactTextString(m) }
func (*ProtoBlockHeaderBase) ProtoMessage()    {}
func (*ProtoBlockHeaderBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{3}
}
func (m *ProtoBlockHeaderBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoBlockHeaderBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoBlockHeaderBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoBlockHeaderBase.Merge(m, src)
}
func (m *ProtoBlockHeaderBase) XXX_Size() int {
	return m.Size()
}
func (m *ProtoBlockHeaderBase) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoBlockHeaderBase.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoBlockHeaderBase proto.InternalMessageInfo

func (m *ProtoBlockHeaderBase) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ProtoBlockHeaderBase) GetCommitteehash() []byte {
	if m != nil {
		return m.Committeehash
	}
	return nil
}

func (m *ProtoBlockHeaderBase) GetPrevhash() []byte {
	if m != nil {
		return m.Prevhash
	}
	return nil
}

// Used in database "dsBlocks"
type ProtoDSBlock struct {
	Header               *ProtoDSBlock_DSBlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Blockbase            *ProtoBlockBase             `protobuf:"bytes,2,opt,name=blockbase,proto3" json:"blockbase,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ProtoDSBlock) Reset()         { *m = ProtoDSBlock{} }
func (m *ProtoDSBlock) String() string { return proto.CompactTextString(m) }
func (*ProtoDSBlock) ProtoMessage()    {}
func (*ProtoDSBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{4}
}
func (m *ProtoDSBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoDSBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoDSBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoDSBlock.Merge(m, src)
}
func (m *ProtoDSBlock) XXX_Size() int {
	return m.Size()
}
func (m *ProtoDSBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoDSBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoDSBlock proto.InternalMessageInfo

func (m *ProtoDSBlock) GetHeader() *ProtoDSBlock_DSBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ProtoDSBlock) GetBlockbase() *ProtoBlockBase {
	if m != nil {
		return m.Blockbase
	}
	return nil
}

type ProtoDSBlock_DSBlockHashSet struct {
	Shardinghash         []byte   `protobuf:"bytes,1,opt,name=shardinghash,proto3" json:"shardinghash,omitempty"`
	Reservedfield        []byte   `protobuf:"bytes,2,opt,name=reservedfield,proto3" json:"reservedfield,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtoDSBlock_DSBlockHashSet) Reset()         { *m = ProtoDSBlock_DSBlockHashSet{} }
func (m *ProtoDSBlock_DSBlockHashSet) String() string { return proto.CompactTextString(m) }
func (*ProtoDSBlock_DSBlockHashSet) ProtoMessage()    {}
func (*ProtoDSBlock_DSBlockHashSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{4, 0}
}
func (m *ProtoDSBlock_DSBlockHashSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoDSBlock_DSBlockHashSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoDSBlock_DSBlockHashSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoDSBlock_DSBlockHashSet.Merge(m, src)
}
func (m *ProtoDSBlock_DSBlockHashSet) XXX_Size() int {
	return m.Size()
}
func (m *ProtoDSBlock_DSBlockHashSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoDSBlock_DSBlockHashSet.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoDSBlock_DSBlockHashSet proto.InternalMessageInfo

func (m *ProtoDSBlock_DSBlockHashSet) GetShardinghash() []byte {
	if m != nil {
		return m.Shardinghash
	}
	return nil
}

func (m *ProtoDSBlock_DSBlockHashSet) GetReservedfield() []byte {
	if m != nil {
		return m.Reservedfield
	}
	return nil
}

type ProtoDSBlock_DSBlockHeader struct {
	Blockheaderbase *ProtoBlockHeaderBase `protobuf:"bytes,1,opt,name=blockheaderbase,proto3" json:"blockheaderbase,omitempty"`
	Dsdifficulty    uint32                `protobuf:"varint,2,opt,name=dsdifficulty,proto3" json:"dsdifficulty,omitempty"`
	Difficulty      uint32                `protobuf:"varint,3,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Prevhash        []byte                `protobuf:"bytes,4,opt,name=prevhash,proto3" json:"prevhash,omitempty"`
	Leaderpubkey    *ByteArray            `protobuf:"bytes,5,opt,name=leaderpubkey,proto3" json:"leaderpubkey,omitempty"`
	// Types that are valid to be assigned to Oneof6:
	//	*ProtoDSBlock_DSBlockHeader_Blocknum
	Oneof6 isProtoDSBlock_DSBlockHeader_Oneof6 `protobuf_oneof:"oneof6"`
	// Types that are valid to be assigned to Oneof7:
	//	*ProtoDSBlock_DSBlockHeader_Epochnum
	Oneof7               isProtoDSBlock_DSBlockHeader_Oneof7        `protobuf_oneof:"oneof7"`
	Gasprice             *ByteArray                                 `protobuf:"bytes,8,opt,name=gasprice,proto3" json:"gasprice,omitempty"`
	Swinfo               *ByteArray                                 `protobuf:"bytes,9,opt,name=swinfo,proto3" json:"swinfo,omitempty"`
	Dswinners            []*ProtoDSBlock_DSBlockHeader_PowDSWinners `protobuf:"bytes,10,rep,name=dswinners,proto3" json:"dswinners,omitempty"`
	Hash                 *ProtoDSBlock_DSBlockHashSet               `protobuf:"bytes,11,opt,name=hash,proto3" json:"hash,omitempty"`
	Dsremoved            []*ByteArray                               `protobuf:"bytes,12,rep,name=dsremoved,proto3" json:"dsremoved,omitempty"`
	Proposals            []*ProtoDSBlock_DSBlockHeader_Proposal     `protobuf:"bytes,13,rep,name=proposals,proto3" json:"proposals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *ProtoDSBlock_DSBlockHeader) Reset()         { *m = ProtoDSBlock_DSBlockHeader{} }
func (m *ProtoDSBlock_DSBlockHeader) String() string { return proto.CompactTextString(m) }
func (*ProtoDSBlock_DSBlockHeader) ProtoMessage()    {}
func (*ProtoDSBlock_DSBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{4, 1}
}
func (m *ProtoDSBlock_DSBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoDSBlock_DSBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoDSBlock_DSBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoDSBlock_DSBlockHeader.Merge(m, src)
}
func (m *ProtoDSBlock_DSBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *ProtoDSBlock_DSBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoDSBlock_DSBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoDSBlock_DSBlockHeader proto.InternalMessageInfo

type isProtoDSBlock_DSBlockHeader_Oneof6 interface {
	isProtoDSBlock_DSBlockHeader_Oneof6()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProtoDSBlock_DSBlockHeader_Oneof7 interface {
	isProtoDSBlock_DSBlockHeader_Oneof7()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProtoDSBlock_DSBlockHeader_Blocknum struct {
	Blocknum uint64 `protobuf:"varint,6,opt,name=blocknum,proto3,oneof" json:"blocknum,omitempty"`
}
type ProtoDSBlock_DSBlockHeader_Epochnum struct {
	Epochnum uint64 `protobuf:"varint,7,opt,name=epochnum,proto3,oneof" json:"epochnum,omitempty"`
}

func (*ProtoDSBlock_DSBlockHeader_Blocknum) isProtoDSBlock_DSBlockHeader_Oneof6() {}
func (*ProtoDSBlock_DSBlockHeader_Epochnum) isProtoDSBlock_DSBlockHeader_Oneof7() {}

func (m *ProtoDSBlock_DSBlockHeader) GetOneof6() isProtoDSBlock_DSBlockHeader_Oneof6 {
	if m != nil {
		return m.Oneof6
	}
	return nil
}
func (m *ProtoDSBlock_DSBlockHeader) GetOneof7() isProtoDSBlock_DSBlockHeader_Oneof7 {
	if m != nil {
		return m.Oneof7
	}
	return nil
}

func (m *ProtoDSBlock_DSBlockHeader) GetBlockheaderbase() *ProtoBlockHeaderBase {
	if m != nil {
		return m.Blockheaderbase
	}
	return nil
}

func (m *ProtoDSBlock_DSBlockHeader) GetDsdifficulty() uint32 {
	if m != nil {
		return m.Dsdifficulty
	}
	return 0
}

func (m *ProtoDSBlock_DSBlockHeader) GetDifficulty() uint32 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

func (m *ProtoDSBlock_DSBlockHeader) GetPrevhash() []byte {
	if m != nil {
		return m.Prevhash
	}
	return nil
}

func (m *ProtoDSBlock_DSBlockHeader) GetLeaderpubkey() *ByteArray {
	if m != nil {
		return m.Leaderpubkey
	}
	return nil
}

func (m *ProtoDSBlock_DSBlockHeader) GetBlocknum() uint64 {
	if x, ok := m.GetOneof6().(*ProtoDSBlock_DSBlockHeader_Blocknum); ok {
		return x.Blocknum
	}
	return 0
}

func (m *ProtoDSBlock_DSBlockHeader) GetEpochnum() uint64 {
	if x, ok := m.GetOneof7().(*ProtoDSBlock_DSBlockHeader_Epochnum); ok {
		return x.Epochnum
	}
	return 0
}

func (m *ProtoDSBlock_DSBlockHeader) GetGasprice() *ByteArray {
	if m != nil {
		return m.Gasprice
	}
	return nil
}

func (m *ProtoDSBlock_DSBlockHeader) GetSwinfo() *ByteArray {
	if m != nil {
		return m.Swinfo
	}
	return nil
}

func (m *ProtoDSBlock_DSBlockHeader) GetDswinners() []*ProtoDSBlock_DSBlockHeader_PowDSWinners {
	if m != nil {
		return m.Dswinners
	}
	return nil
}

func (m *ProtoDSBlock_DSBlockHeader) GetHash() *ProtoDSBlock_DSBlockHashSet {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ProtoDSBlock_DSBlockHeader) GetDsremoved() []*ByteArray {
	if m != nil {
		return m.Dsremoved
	}
	return nil
}

func (m *ProtoDSBlock_DSBlockHeader) GetProposals() []*ProtoDSBlock_DSBlockHeader_Proposal {
	if m != nil {
		return m.Proposals
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtoDSBlock_DSBlockHeader) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtoDSBlock_DSBlockHeader_Blocknum)(nil),
		(*ProtoDSBlock_DSBlockHeader_Epochnum)(nil),
	}
}

type ProtoDSBlock_DSBlockHeader_PowDSWinners struct {
	Key                  *ByteArray `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Val                  *ByteArray `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProtoDSBlock_DSBlockHeader_PowDSWinners) Reset() {
	*m = ProtoDSBlock_DSBlockHeader_PowDSWinners{}
}
func (m *ProtoDSBlock_DSBlockHeader_PowDSWinners) String() string { return proto.CompactTextString(m) }
func (*ProtoDSBlock_DSBlockHeader_PowDSWinners) ProtoMessage()    {}
func (*ProtoDSBlock_DSBlockHeader_PowDSWinners) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{4, 1, 0}
}
func (m *ProtoDSBlock_DSBlockHeader_PowDSWinners) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoDSBlock_DSBlockHeader_PowDSWinners) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoDSBlock_DSBlockHeader_PowDSWinners) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoDSBlock_DSBlockHeader_PowDSWinners.Merge(m, src)
}
func (m *ProtoDSBlock_DSBlockHeader_PowDSWinners) XXX_Size() int {
	return m.Size()
}
func (m *ProtoDSBlock_DSBlockHeader_PowDSWinners) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoDSBlock_DSBlockHeader_PowDSWinners.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoDSBlock_DSBlockHeader_PowDSWinners proto.InternalMessageInfo

func (m *ProtoDSBlock_DSBlockHeader_PowDSWinners) GetKey() *ByteArray {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ProtoDSBlock_DSBlockHeader_PowDSWinners) GetVal() *ByteArray {
	if m != nil {
		return m.Val
	}
	return nil
}

// Add new members here
type ProtoDSBlock_DSBlockHeader_Vote struct {
	Value                uint32   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtoDSBlock_DSBlockHeader_Vote) Reset()         { *m = ProtoDSBlock_DSBlockHeader_Vote{} }
func (m *ProtoDSBlock_DSBlockHeader_Vote) String() string { return proto.CompactTextString(m) }
func (*ProtoDSBlock_DSBlockHeader_Vote) ProtoMessage()    {}
func (*ProtoDSBlock_DSBlockHeader_Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{4, 1, 1}
}
func (m *ProtoDSBlock_DSBlockHeader_Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoDSBlock_DSBlockHeader_Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoDSBlock_DSBlockHeader_Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoDSBlock_DSBlockHeader_Vote.Merge(m, src)
}
func (m *ProtoDSBlock_DSBlockHeader_Vote) XXX_Size() int {
	return m.Size()
}
func (m *ProtoDSBlock_DSBlockHeader_Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoDSBlock_DSBlockHeader_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoDSBlock_DSBlockHeader_Vote proto.InternalMessageInfo

func (m *ProtoDSBlock_DSBlockHeader_Vote) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *ProtoDSBlock_DSBlockHeader_Vote) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ProtoDSBlock_DSBlockHeader_Proposal struct {
	Proposalid           uint32                             `protobuf:"varint,1,opt,name=proposalid,proto3" json:"proposalid,omitempty"`
	Dsvotes              []*ProtoDSBlock_DSBlockHeader_Vote `protobuf:"bytes,2,rep,name=dsvotes,proto3" json:"dsvotes,omitempty"`
	Minervotes           []*ProtoDSBlock_DSBlockHeader_Vote `protobuf:"bytes,3,rep,name=minervotes,proto3" json:"minervotes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *ProtoDSBlock_DSBlockHeader_Proposal) Reset()         { *m = ProtoDSBlock_DSBlockHeader_Proposal{} }
func (m *ProtoDSBlock_DSBlockHeader_Proposal) String() string { return proto.CompactTextString(m) }
func (*ProtoDSBlock_DSBlockHeader_Proposal) ProtoMessage()    {}
func (*ProtoDSBlock_DSBlockHeader_Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{4, 1, 2}
}
func (m *ProtoDSBlock_DSBlockHeader_Proposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoDSBlock_DSBlockHeader_Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoDSBlock_DSBlockHeader_Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoDSBlock_DSBlockHeader_Proposal.Merge(m, src)
}
func (m *ProtoDSBlock_DSBlockHeader_Proposal) XXX_Size() int {
	return m.Size()
}
func (m *ProtoDSBlock_DSBlockHeader_Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoDSBlock_DSBlockHeader_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoDSBlock_DSBlockHeader_Proposal proto.InternalMessageInfo

func (m *ProtoDSBlock_DSBlockHeader_Proposal) GetProposalid() uint32 {
	if m != nil {
		return m.Proposalid
	}
	return 0
}

func (m *ProtoDSBlock_DSBlockHeader_Proposal) GetDsvotes() []*ProtoDSBlock_DSBlockHeader_Vote {
	if m != nil {
		return m.Dsvotes
	}
	return nil
}

func (m *ProtoDSBlock_DSBlockHeader_Proposal) GetMinervotes() []*ProtoDSBlock_DSBlockHeader_Vote {
	if m != nil {
		return m.Minervotes
	}
	return nil
}

// Used in database "dsCommittee"
type ProtoDSNode struct {
	Pubkey               *ByteArray `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Peer                 *ByteArray `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProtoDSNode) Reset()         { *m = ProtoDSNode{} }
func (m *ProtoDSNode) String() string { return proto.CompactTextString(m) }
func (*ProtoDSNode) ProtoMessage()    {}
func (*ProtoDSNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{5}
}
func (m *ProtoDSNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoDSNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoDSNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoDSNode.Merge(m, src)
}
func (m *ProtoDSNode) XXX_Size() int {
	return m.Size()
}
func (m *ProtoDSNode) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoDSNode.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoDSNode proto.InternalMessageInfo

func (m *ProtoDSNode) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *ProtoDSNode) GetPeer() *ByteArray {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Used in database "dsCommittee"
type ProtoDSCommittee struct {
	Version              uint32         `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Dsnodes              []*ProtoDSNode `protobuf:"bytes,2,rep,name=dsnodes,proto3" json:"dsnodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ProtoDSCommittee) Reset()         { *m = ProtoDSCommittee{} }
func (m *ProtoDSCommittee) String() string { return proto.CompactTextString(m) }
func (*ProtoDSCommittee) ProtoMessage()    {}
func (*ProtoDSCommittee) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{6}
}
func (m *ProtoDSCommittee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoDSCommittee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoDSCommittee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoDSCommittee.Merge(m, src)
}
func (m *ProtoDSCommittee) XXX_Size() int {
	return m.Size()
}
func (m *ProtoDSCommittee) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoDSCommittee.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoDSCommittee proto.InternalMessageInfo

func (m *ProtoDSCommittee) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ProtoDSCommittee) GetDsnodes() []*ProtoDSNode {
	if m != nil {
		return m.Dsnodes
	}
	return nil
}

// Used in database "microBlocks"
type ProtoMicroBlock struct {
	Header               *ProtoMicroBlock_MicroBlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Tranhashes           [][]byte                          `protobuf:"bytes,2,rep,name=tranhashes,proto3" json:"tranhashes,omitempty"`
	Blockbase            *ProtoBlockBase                   `protobuf:"bytes,3,opt,name=blockbase,proto3" json:"blockbase,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ProtoMicroBlock) Reset()         { *m = ProtoMicroBlock{} }
func (m *ProtoMicroBlock) String() string { return proto.CompactTextString(m) }
func (*ProtoMicroBlock) ProtoMessage()    {}
func (*ProtoMicroBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{7}
}
func (m *ProtoMicroBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoMicroBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoMicroBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoMicroBlock.Merge(m, src)
}
func (m *ProtoMicroBlock) XXX_Size() int {
	return m.Size()
}
func (m *ProtoMicroBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoMicroBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoMicroBlock proto.InternalMessageInfo

func (m *ProtoMicroBlock) GetHeader() *ProtoMicroBlock_MicroBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ProtoMicroBlock) GetTranhashes() [][]byte {
	if m != nil {
		return m.Tranhashes
	}
	return nil
}

func (m *ProtoMicroBlock) GetBlockbase() *ProtoBlockBase {
	if m != nil {
		return m.Blockbase
	}
	return nil
}

type ProtoMicroBlock_MicroBlockHeader struct {
	Blockheaderbase *ProtoBlockHeaderBase `protobuf:"bytes,1,opt,name=blockheaderbase,proto3" json:"blockheaderbase,omitempty"`
	// Types that are valid to be assigned to Oneof2:
	//	*ProtoMicroBlock_MicroBlockHeader_Shardid
	Oneof2   isProtoMicroBlock_MicroBlockHeader_Oneof2 `protobuf_oneof:"oneof2"`
	Gaslimit uint64                                    `protobuf:"varint,3,opt,name=gaslimit,proto3" json:"gaslimit,omitempty"`
	// Types that are valid to be assigned to Oneof4:
	//	*ProtoMicroBlock_MicroBlockHeader_Gasused
	Oneof4   isProtoMicroBlock_MicroBlockHeader_Oneof4 `protobuf_oneof:"oneof4"`
	Rewards  *ByteArray                                `protobuf:"bytes,5,opt,name=rewards,proto3" json:"rewards,omitempty"`
	Prevhash []byte                                    `protobuf:"bytes,6,opt,name=prevhash,proto3" json:"prevhash,omitempty"`
	// Types that are valid to be assigned to Oneof7:
	//	*ProtoMicroBlock_MicroBlockHeader_Epochnum
	Oneof7     isProtoMicroBlock_MicroBlockHeader_Oneof7 `protobuf_oneof:"oneof7"`
	Txroothash []byte                                    `protobuf:"bytes,8,opt,name=txroothash,proto3" json:"txroothash,omitempty"`
	// Types that are valid to be assigned to Oneof9:
	//	*ProtoMicroBlock_MicroBlockHeader_Numtxs
	Oneof9               isProtoMicroBlock_MicroBlockHeader_Oneof9 `protobuf_oneof:"oneof9"`
	Minerpubkey          *ByteArray                                `protobuf:"bytes,10,opt,name=minerpubkey,proto3" json:"minerpubkey,omitempty"`
	Dsblocknum           uint64                                    `protobuf:"varint,11,opt,name=dsblocknum,proto3" json:"dsblocknum,omitempty"`
	Statedeltahash       []byte                                    `protobuf:"bytes,12,opt,name=statedeltahash,proto3" json:"statedeltahash,omitempty"`
	Tranreceipthash      []byte                                    `protobuf:"bytes,13,opt,name=tranreceipthash,proto3" json:"tranreceipthash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *ProtoMicroBlock_MicroBlockHeader) Reset()         { *m = ProtoMicroBlock_MicroBlockHeader{} }
func (m *ProtoMicroBlock_MicroBlockHeader) String() string { return proto.CompactTextString(m) }
func (*ProtoMicroBlock_MicroBlockHeader) ProtoMessage()    {}
func (*ProtoMicroBlock_MicroBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{7, 0}
}
func (m *ProtoMicroBlock_MicroBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoMicroBlock_MicroBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoMicroBlock_MicroBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoMicroBlock_MicroBlockHeader.Merge(m, src)
}
func (m *ProtoMicroBlock_MicroBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *ProtoMicroBlock_MicroBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoMicroBlock_MicroBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoMicroBlock_MicroBlockHeader proto.InternalMessageInfo

type isProtoMicroBlock_MicroBlockHeader_Oneof2 interface {
	isProtoMicroBlock_MicroBlockHeader_Oneof2()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProtoMicroBlock_MicroBlockHeader_Oneof4 interface {
	isProtoMicroBlock_MicroBlockHeader_Oneof4()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProtoMicroBlock_MicroBlockHeader_Oneof7 interface {
	isProtoMicroBlock_MicroBlockHeader_Oneof7()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProtoMicroBlock_MicroBlockHeader_Oneof9 interface {
	isProtoMicroBlock_MicroBlockHeader_Oneof9()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProtoMicroBlock_MicroBlockHeader_Shardid struct {
	Shardid uint32 `protobuf:"varint,2,opt,name=shardid,proto3,oneof" json:"shardid,omitempty"`
}
type ProtoMicroBlock_MicroBlockHeader_Gasused struct {
	Gasused uint64 `protobuf:"varint,4,opt,name=gasused,proto3,oneof" json:"gasused,omitempty"`
}
type ProtoMicroBlock_MicroBlockHeader_Epochnum struct {
	Epochnum uint64 `protobuf:"varint,7,opt,name=epochnum,proto3,oneof" json:"epochnum,omitempty"`
}
type ProtoMicroBlock_MicroBlockHeader_Numtxs struct {
	Numtxs uint32 `protobuf:"varint,9,opt,name=numtxs,proto3,oneof" json:"numtxs,omitempty"`
}

func (*ProtoMicroBlock_MicroBlockHeader_Shardid) isProtoMicroBlock_MicroBlockHeader_Oneof2()  {}
func (*ProtoMicroBlock_MicroBlockHeader_Gasused) isProtoMicroBlock_MicroBlockHeader_Oneof4()  {}
func (*ProtoMicroBlock_MicroBlockHeader_Epochnum) isProtoMicroBlock_MicroBlockHeader_Oneof7() {}
func (*ProtoMicroBlock_MicroBlockHeader_Numtxs) isProtoMicroBlock_MicroBlockHeader_Oneof9()   {}

func (m *ProtoMicroBlock_MicroBlockHeader) GetOneof2() isProtoMicroBlock_MicroBlockHeader_Oneof2 {
	if m != nil {
		return m.Oneof2
	}
	return nil
}
func (m *ProtoMicroBlock_MicroBlockHeader) GetOneof4() isProtoMicroBlock_MicroBlockHeader_Oneof4 {
	if m != nil {
		return m.Oneof4
	}
	return nil
}
func (m *ProtoMicroBlock_MicroBlockHeader) GetOneof7() isProtoMicroBlock_MicroBlockHeader_Oneof7 {
	if m != nil {
		return m.Oneof7
	}
	return nil
}
func (m *ProtoMicroBlock_MicroBlockHeader) GetOneof9() isProtoMicroBlock_MicroBlockHeader_Oneof9 {
	if m != nil {
		return m.Oneof9
	}
	return nil
}

func (m *ProtoMicroBlock_MicroBlockHeader) GetBlockheaderbase() *ProtoBlockHeaderBase {
	if m != nil {
		return m.Blockheaderbase
	}
	return nil
}

func (m *ProtoMicroBlock_MicroBlockHeader) GetShardid() uint32 {
	if x, ok := m.GetOneof2().(*ProtoMicroBlock_MicroBlockHeader_Shardid); ok {
		return x.Shardid
	}
	return 0
}

func (m *ProtoMicroBlock_MicroBlockHeader) GetGaslimit() uint64 {
	if m != nil {
		return m.Gaslimit
	}
	return 0
}

func (m *ProtoMicroBlock_MicroBlockHeader) GetGasused() uint64 {
	if x, ok := m.GetOneof4().(*ProtoMicroBlock_MicroBlockHeader_Gasused); ok {
		return x.Gasused
	}
	return 0
}

func (m *ProtoMicroBlock_MicroBlockHeader) GetRewards() *ByteArray {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *ProtoMicroBlock_MicroBlockHeader) GetPrevhash() []byte {
	if m != nil {
		return m.Prevhash
	}
	return nil
}

func (m *ProtoMicroBlock_MicroBlockHeader) GetEpochnum() uint64 {
	if x, ok := m.GetOneof7().(*ProtoMicroBlock_MicroBlockHeader_Epochnum); ok {
		return x.Epochnum
	}
	return 0
}

func (m *ProtoMicroBlock_MicroBlockHeader) GetTxroothash() []byte {
	if m != nil {
		return m.Txroothash
	}
	return nil
}

func (m *ProtoMicroBlock_MicroBlockHeader) GetNumtxs() uint32 {
	if x, ok := m.GetOneof9().(*ProtoMicroBlock_MicroBlockHeader_Numtxs); ok {
		return x.Numtxs
	}
	return 0
}

func (m *ProtoMicroBlock_MicroBlockHeader) GetMinerpubkey() *ByteArray {
	if m != nil {
		return m.Minerpubkey
	}
	return nil
}

func (m *ProtoMicroBlock_MicroBlockHeader) GetDsblocknum() uint64 {
	if m != nil {
		return m.Dsblocknum
	}
	return 0
}

func (m *ProtoMicroBlock_MicroBlockHeader) GetStatedeltahash() []byte {
	if m != nil {
		return m.Statedeltahash
	}
	return nil
}

func (m *ProtoMicroBlock_MicroBlockHeader) GetTranreceipthash() []byte {
	if m != nil {
		return m.Tranreceipthash
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtoMicroBlock_MicroBlockHeader) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtoMicroBlock_MicroBlockHeader_Shardid)(nil),
		(*ProtoMicroBlock_MicroBlockHeader_Gasused)(nil),
		(*ProtoMicroBlock_MicroBlockHeader_Epochnum)(nil),
		(*ProtoMicroBlock_MicroBlockHeader_Numtxs)(nil),
	}
}

// Used in database "shardStructure"
type ProtoShardingStructure struct {
	Version              uint32                          `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Shards               []*ProtoShardingStructure_Shard `protobuf:"bytes,2,rep,name=shards,proto3" json:"shards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ProtoShardingStructure) Reset()         { *m = ProtoShardingStructure{} }
func (m *ProtoShardingStructure) String() string { return proto.CompactTextString(m) }
func (*ProtoShardingStructure) ProtoMessage()    {}
func (*ProtoShardingStructure) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{8}
}
func (m *ProtoShardingStructure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoShardingStructure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoShardingStructure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoShardingStructure.Merge(m, src)
}
func (m *ProtoShardingStructure) XXX_Size() int {
	return m.Size()
}
func (m *ProtoShardingStructure) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoShardingStructure.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoShardingStructure proto.InternalMessageInfo

func (m *ProtoShardingStructure) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ProtoShardingStructure) GetShards() []*ProtoShardingStructure_Shard {
	if m != nil {
		return m.Shards
	}
	return nil
}

type ProtoShardingStructure_Member struct {
	Pubkey   *ByteArray `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Peerinfo *ByteArray `protobuf:"bytes,2,opt,name=peerinfo,proto3" json:"peerinfo,omitempty"`
	// Types that are valid to be assigned to Oneof3:
	//	*ProtoShardingStructure_Member_Reputation
	Oneof3               isProtoShardingStructure_Member_Oneof3 `protobuf_oneof:"oneof3"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *ProtoShardingStructure_Member) Reset()         { *m = ProtoShardingStructure_Member{} }
func (m *ProtoShardingStructure_Member) String() string { return proto.CompactTextString(m) }
func (*ProtoShardingStructure_Member) ProtoMessage()    {}
func (*ProtoShardingStructure_Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{8, 0}
}
func (m *ProtoShardingStructure_Member) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoShardingStructure_Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoShardingStructure_Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoShardingStructure_Member.Merge(m, src)
}
func (m *ProtoShardingStructure_Member) XXX_Size() int {
	return m.Size()
}
func (m *ProtoShardingStructure_Member) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoShardingStructure_Member.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoShardingStructure_Member proto.InternalMessageInfo

type isProtoShardingStructure_Member_Oneof3 interface {
	isProtoShardingStructure_Member_Oneof3()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProtoShardingStructure_Member_Reputation struct {
	Reputation uint32 `protobuf:"varint,3,opt,name=reputation,proto3,oneof" json:"reputation,omitempty"`
}

func (*ProtoShardingStructure_Member_Reputation) isProtoShardingStructure_Member_Oneof3() {}

func (m *ProtoShardingStructure_Member) GetOneof3() isProtoShardingStructure_Member_Oneof3 {
	if m != nil {
		return m.Oneof3
	}
	return nil
}

func (m *ProtoShardingStructure_Member) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *ProtoShardingStructure_Member) GetPeerinfo() *ByteArray {
	if m != nil {
		return m.Peerinfo
	}
	return nil
}

func (m *ProtoShardingStructure_Member) GetReputation() uint32 {
	if x, ok := m.GetOneof3().(*ProtoShardingStructure_Member_Reputation); ok {
		return x.Reputation
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtoShardingStructure_Member) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtoShardingStructure_Member_Reputation)(nil),
	}
}

type ProtoShardingStructure_Shard struct {
	Members              []*ProtoShardingStructure_Member `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ProtoShardingStructure_Shard) Reset()         { *m = ProtoShardingStructure_Shard{} }
func (m *ProtoShardingStructure_Shard) String() string { return proto.CompactTextString(m) }
func (*ProtoShardingStructure_Shard) ProtoMessage()    {}
func (*ProtoShardingStructure_Shard) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{8, 1}
}
func (m *ProtoShardingStructure_Shard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoShardingStructure_Shard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoShardingStructure_Shard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoShardingStructure_Shard.Merge(m, src)
}
func (m *ProtoShardingStructure_Shard) XXX_Size() int {
	return m.Size()
}
func (m *ProtoShardingStructure_Shard) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoShardingStructure_Shard.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoShardingStructure_Shard proto.InternalMessageInfo

func (m *ProtoShardingStructure_Shard) GetMembers() []*ProtoShardingStructure_Member {
	if m != nil {
		return m.Members
	}
	return nil
}

// Used in database "txBlocks"
type ProtoMbInfo struct {
	Mbhash []byte `protobuf:"bytes,1,opt,name=mbhash,proto3" json:"mbhash,omitempty"`
	Txroot []byte `protobuf:"bytes,2,opt,name=txroot,proto3" json:"txroot,omitempty"`
	// Types that are valid to be assigned to Oneof3:
	//	*ProtoMbInfo_Shardid
	Oneof3               isProtoMbInfo_Oneof3 `protobuf_oneof:"oneof3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ProtoMbInfo) Reset()         { *m = ProtoMbInfo{} }
func (m *ProtoMbInfo) String() string { return proto.CompactTextString(m) }
func (*ProtoMbInfo) ProtoMessage()    {}
func (*ProtoMbInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{9}
}
func (m *ProtoMbInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoMbInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoMbInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoMbInfo.Merge(m, src)
}
func (m *ProtoMbInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProtoMbInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoMbInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoMbInfo proto.InternalMessageInfo

type isProtoMbInfo_Oneof3 interface {
	isProtoMbInfo_Oneof3()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProtoMbInfo_Shardid struct {
	Shardid uint32 `protobuf:"varint,3,opt,name=shardid,proto3,oneof" json:"shardid,omitempty"`
}

func (*ProtoMbInfo_Shardid) isProtoMbInfo_Oneof3() {}

func (m *ProtoMbInfo) GetOneof3() isProtoMbInfo_Oneof3 {
	if m != nil {
		return m.Oneof3
	}
	return nil
}

func (m *ProtoMbInfo) GetMbhash() []byte {
	if m != nil {
		return m.Mbhash
	}
	return nil
}

func (m *ProtoMbInfo) GetTxroot() []byte {
	if m != nil {
		return m.Txroot
	}
	return nil
}

func (m *ProtoMbInfo) GetShardid() uint32 {
	if x, ok := m.GetOneof3().(*ProtoMbInfo_Shardid); ok {
		return x.Shardid
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtoMbInfo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtoMbInfo_Shardid)(nil),
	}
}

// Used in database "txBlocks"
type ProtoTxBlock struct {
	Header               *ProtoTxBlock_TxBlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Mbinfos              []*ProtoMbInfo              `protobuf:"bytes,2,rep,name=mbinfos,proto3" json:"mbinfos,omitempty"`
	Blockbase            *ProtoBlockBase             `protobuf:"bytes,3,opt,name=blockbase,proto3" json:"blockbase,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ProtoTxBlock) Reset()         { *m = ProtoTxBlock{} }
func (m *ProtoTxBlock) String() string { return proto.CompactTextString(m) }
func (*ProtoTxBlock) ProtoMessage()    {}
func (*ProtoTxBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{10}
}
func (m *ProtoTxBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoTxBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoTxBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoTxBlock.Merge(m, src)
}
func (m *ProtoTxBlock) XXX_Size() int {
	return m.Size()
}
func (m *ProtoTxBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoTxBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoTxBlock proto.InternalMessageInfo

func (m *ProtoTxBlock) GetHeader() *ProtoTxBlock_TxBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ProtoTxBlock) GetMbinfos() []*ProtoMbInfo {
	if m != nil {
		return m.Mbinfos
	}
	return nil
}

func (m *ProtoTxBlock) GetBlockbase() *ProtoBlockBase {
	if m != nil {
		return m.Blockbase
	}
	return nil
}

type ProtoTxBlock_TxBlockHashSet struct {
	Stateroothash        []byte   `protobuf:"bytes,1,opt,name=stateroothash,proto3" json:"stateroothash,omitempty"`
	Statedeltahash       []byte   `protobuf:"bytes,2,opt,name=statedeltahash,proto3" json:"statedeltahash,omitempty"`
	Mbinfohash           []byte   `protobuf:"bytes,3,opt,name=mbinfohash,proto3" json:"mbinfohash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtoTxBlock_TxBlockHashSet) Reset()         { *m = ProtoTxBlock_TxBlockHashSet{} }
func (m *ProtoTxBlock_TxBlockHashSet) String() string { return proto.CompactTextString(m) }
func (*ProtoTxBlock_TxBlockHashSet) ProtoMessage()    {}
func (*ProtoTxBlock_TxBlockHashSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{10, 0}
}
func (m *ProtoTxBlock_TxBlockHashSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoTxBlock_TxBlockHashSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoTxBlock_TxBlockHashSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoTxBlock_TxBlockHashSet.Merge(m, src)
}
func (m *ProtoTxBlock_TxBlockHashSet) XXX_Size() int {
	return m.Size()
}
func (m *ProtoTxBlock_TxBlockHashSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoTxBlock_TxBlockHashSet.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoTxBlock_TxBlockHashSet proto.InternalMessageInfo

func (m *ProtoTxBlock_TxBlockHashSet) GetStateroothash() []byte {
	if m != nil {
		return m.Stateroothash
	}
	return nil
}

func (m *ProtoTxBlock_TxBlockHashSet) GetStatedeltahash() []byte {
	if m != nil {
		return m.Statedeltahash
	}
	return nil
}

func (m *ProtoTxBlock_TxBlockHashSet) GetMbinfohash() []byte {
	if m != nil {
		return m.Mbinfohash
	}
	return nil
}

type ProtoTxBlock_TxBlockHeader struct {
	Blockheaderbase *ProtoBlockHeaderBase `protobuf:"bytes,1,opt,name=blockheaderbase,proto3" json:"blockheaderbase,omitempty"`
	Gaslimit        uint64                `protobuf:"varint,2,opt,name=gaslimit,proto3" json:"gaslimit,omitempty"`
	// Types that are valid to be assigned to Oneof3:
	//	*ProtoTxBlock_TxBlockHeader_Gasused
	Oneof3   isProtoTxBlock_TxBlockHeader_Oneof3 `protobuf_oneof:"oneof3"`
	Rewards  *ByteArray                          `protobuf:"bytes,4,opt,name=rewards,proto3" json:"rewards,omitempty"`
	Prevhash []byte                              `protobuf:"bytes,5,opt,name=prevhash,proto3" json:"prevhash,omitempty"`
	// Types that are valid to be assigned to Oneof6:
	//	*ProtoTxBlock_TxBlockHeader_Blocknum
	Oneof6 isProtoTxBlock_TxBlockHeader_Oneof6 `protobuf_oneof:"oneof6"`
	Hash   *ProtoTxBlock_TxBlockHashSet        `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
	// Types that are valid to be assigned to Oneof8:
	//	*ProtoTxBlock_TxBlockHeader_Numtxs
	Oneof8      isProtoTxBlock_TxBlockHeader_Oneof8 `protobuf_oneof:"oneof8"`
	Minerpubkey *ByteArray                          `protobuf:"bytes,9,opt,name=minerpubkey,proto3" json:"minerpubkey,omitempty"`
	// Types that are valid to be assigned to Oneof10:
	//	*ProtoTxBlock_TxBlockHeader_Dsblocknum
	Oneof10              isProtoTxBlock_TxBlockHeader_Oneof10 `protobuf_oneof:"oneof10"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ProtoTxBlock_TxBlockHeader) Reset()         { *m = ProtoTxBlock_TxBlockHeader{} }
func (m *ProtoTxBlock_TxBlockHeader) String() string { return proto.CompactTextString(m) }
func (*ProtoTxBlock_TxBlockHeader) ProtoMessage()    {}
func (*ProtoTxBlock_TxBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{10, 1}
}
func (m *ProtoTxBlock_TxBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoTxBlock_TxBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoTxBlock_TxBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoTxBlock_TxBlockHeader.Merge(m, src)
}
func (m *ProtoTxBlock_TxBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *ProtoTxBlock_TxBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoTxBlock_TxBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoTxBlock_TxBlockHeader proto.InternalMessageInfo

type isProtoTxBlock_TxBlockHeader_Oneof3 interface {
	isProtoTxBlock_TxBlockHeader_Oneof3()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProtoTxBlock_TxBlockHeader_Oneof6 interface {
	isProtoTxBlock_TxBlockHeader_Oneof6()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProtoTxBlock_TxBlockHeader_Oneof8 interface {
	isProtoTxBlock_TxBlockHeader_Oneof8()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProtoTxBlock_TxBlockHeader_Oneof10 interface {
	isProtoTxBlock_TxBlockHeader_Oneof10()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProtoTxBlock_TxBlockHeader_Gasused struct {
	Gasused uint64 `protobuf:"varint,3,opt,name=gasused,proto3,oneof" json:"gasused,omitempty"`
}
type ProtoTxBlock_TxBlockHeader_Blocknum struct {
	Blocknum uint64 `protobuf:"varint,6,opt,name=blocknum,proto3,oneof" json:"blocknum,omitempty"`
}
type ProtoTxBlock_TxBlockHeader_Numtxs struct {
	Numtxs uint32 `protobuf:"varint,8,opt,name=numtxs,proto3,oneof" json:"numtxs,omitempty"`
}
type ProtoTxBlock_TxBlockHeader_Dsblocknum struct {
	Dsblocknum uint64 `protobuf:"varint,10,opt,name=dsblocknum,proto3,oneof" json:"dsblocknum,omitempty"`
}

func (*ProtoTxBlock_TxBlockHeader_Gasused) isProtoTxBlock_TxBlockHeader_Oneof3()     {}
func (*ProtoTxBlock_TxBlockHeader_Blocknum) isProtoTxBlock_TxBlockHeader_Oneof6()    {}
func (*ProtoTxBlock_TxBlockHeader_Numtxs) isProtoTxBlock_TxBlockHeader_Oneof8()      {}
func (*ProtoTxBlock_TxBlockHeader_Dsblocknum) isProtoTxBlock_TxBlockHeader_Oneof10() {}

func (m *ProtoTxBlock_TxBlockHeader) GetOneof3() isProtoTxBlock_TxBlockHeader_Oneof3 {
	if m != nil {
		return m.Oneof3
	}
	return nil
}
func (m *ProtoTxBlock_TxBlockHeader) GetOneof6() isProtoTxBlock_TxBlockHeader_Oneof6 {
	if m != nil {
		return m.Oneof6
	}
	return nil
}
func (m *ProtoTxBlock_TxBlockHeader) GetOneof8() isProtoTxBlock_TxBlockHeader_Oneof8 {
	if m != nil {
		return m.Oneof8
	}
	return nil
}
func (m *ProtoTxBlock_TxBlockHeader) GetOneof10() isProtoTxBlock_TxBlockHeader_Oneof10 {
	if m != nil {
		return m.Oneof10
	}
	return nil
}

func (m *ProtoTxBlock_TxBlockHeader) GetBlockheaderbase() *ProtoBlockHeaderBase {
	if m != nil {
		return m.Blockheaderbase
	}
	return nil
}

func (m *ProtoTxBlock_TxBlockHeader) GetGaslimit() uint64 {
	if m != nil {
		return m.Gaslimit
	}
	return 0
}

func (m *ProtoTxBlock_TxBlockHeader) GetGasused() uint64 {
	if x, ok := m.GetOneof3().(*ProtoTxBlock_TxBlockHeader_Gasused); ok {
		return x.Gasused
	}
	return 0
}

func (m *ProtoTxBlock_TxBlockHeader) GetRewards() *ByteArray {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *ProtoTxBlock_TxBlockHeader) GetPrevhash() []byte {
	if m != nil {
		return m.Prevhash
	}
	return nil
}

func (m *ProtoTxBlock_TxBlockHeader) GetBlocknum() uint64 {
	if x, ok := m.GetOneof6().(*ProtoTxBlock_TxBlockHeader_Blocknum); ok {
		return x.Blocknum
	}
	return 0
}

func (m *ProtoTxBlock_TxBlockHeader) GetHash() *ProtoTxBlock_TxBlockHashSet {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ProtoTxBlock_TxBlockHeader) GetNumtxs() uint32 {
	if x, ok := m.GetOneof8().(*ProtoTxBlock_TxBlockHeader_Numtxs); ok {
		return x.Numtxs
	}
	return 0
}

func (m *ProtoTxBlock_TxBlockHeader) GetMinerpubkey() *ByteArray {
	if m != nil {
		return m.Minerpubkey
	}
	return nil
}

func (m *ProtoTxBlock_TxBlockHeader) GetDsblocknum() uint64 {
	if x, ok := m.GetOneof10().(*ProtoTxBlock_TxBlockHeader_Dsblocknum); ok {
		return x.Dsblocknum
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtoTxBlock_TxBlockHeader) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtoTxBlock_TxBlockHeader_Gasused)(nil),
		(*ProtoTxBlock_TxBlockHeader_Blocknum)(nil),
		(*ProtoTxBlock_TxBlockHeader_Numtxs)(nil),
		(*ProtoTxBlock_TxBlockHeader_Dsblocknum)(nil),
	}
}

// Used in database "VCBlocks"
type ProtoVCBlock struct {
	Header               *ProtoVCBlock_VCBlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Blockbase            *ProtoBlockBase             `protobuf:"bytes,2,opt,name=blockbase,proto3" json:"blockbase,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ProtoVCBlock) Reset()         { *m = ProtoVCBlock{} }
func (m *ProtoVCBlock) String() string { return proto.CompactTextString(m) }
func (*ProtoVCBlock) ProtoMessage()    {}
func (*ProtoVCBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{11}
}
func (m *ProtoVCBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoVCBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoVCBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoVCBlock.Merge(m, src)
}
func (m *ProtoVCBlock) XXX_Size() int {
	return m.Size()
}
func (m *ProtoVCBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoVCBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoVCBlock proto.InternalMessageInfo

func (m *ProtoVCBlock) GetHeader() *ProtoVCBlock_VCBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ProtoVCBlock) GetBlockbase() *ProtoBlockBase {
	if m != nil {
		return m.Blockbase
	}
	return nil
}

type ProtoVCBlock_VCBlockHeader struct {
	Blockheaderbase     *ProtoBlockHeaderBase `protobuf:"bytes,1,opt,name=blockheaderbase,proto3" json:"blockheaderbase,omitempty"`
	Viewchangedsepochno uint64                `protobuf:"varint,2,opt,name=viewchangedsepochno,proto3" json:"viewchangedsepochno,omitempty"`
	Viewchangeepochno   uint64                `protobuf:"varint,3,opt,name=viewchangeepochno,proto3" json:"viewchangeepochno,omitempty"`
	// Types that are valid to be assigned to Oneof4:
	//	*ProtoVCBlock_VCBlockHeader_Viewchangestate
	Oneof4                     isProtoVCBlock_VCBlockHeader_Oneof4 `protobuf_oneof:"oneof4"`
	Candidateleadernetworkinfo *ByteArray                          `protobuf:"bytes,5,opt,name=candidateleadernetworkinfo,proto3" json:"candidateleadernetworkinfo,omitempty"`
	Candidateleaderpubkey      *ByteArray                          `protobuf:"bytes,6,opt,name=candidateleaderpubkey,proto3" json:"candidateleaderpubkey,omitempty"`
	// Types that are valid to be assigned to Oneof7:
	//	*ProtoVCBlock_VCBlockHeader_Vccounter
	Oneof7               isProtoVCBlock_VCBlockHeader_Oneof7 `protobuf_oneof:"oneof7"`
	Faultyleaders        []*ProtoDSNode                      `protobuf:"bytes,8,rep,name=faultyleaders,proto3" json:"faultyleaders,omitempty"`
	Prevhash             []byte                              `protobuf:"bytes,9,opt,name=prevhash,proto3" json:"prevhash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *ProtoVCBlock_VCBlockHeader) Reset()         { *m = ProtoVCBlock_VCBlockHeader{} }
func (m *ProtoVCBlock_VCBlockHeader) String() string { return proto.CompactTextString(m) }
func (*ProtoVCBlock_VCBlockHeader) ProtoMessage()    {}
func (*ProtoVCBlock_VCBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{11, 0}
}
func (m *ProtoVCBlock_VCBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoVCBlock_VCBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoVCBlock_VCBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoVCBlock_VCBlockHeader.Merge(m, src)
}
func (m *ProtoVCBlock_VCBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *ProtoVCBlock_VCBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoVCBlock_VCBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoVCBlock_VCBlockHeader proto.InternalMessageInfo

type isProtoVCBlock_VCBlockHeader_Oneof4 interface {
	isProtoVCBlock_VCBlockHeader_Oneof4()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProtoVCBlock_VCBlockHeader_Oneof7 interface {
	isProtoVCBlock_VCBlockHeader_Oneof7()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProtoVCBlock_VCBlockHeader_Viewchangestate struct {
	Viewchangestate uint32 `protobuf:"varint,4,opt,name=viewchangestate,proto3,oneof" json:"viewchangestate,omitempty"`
}
type ProtoVCBlock_VCBlockHeader_Vccounter struct {
	Vccounter uint32 `protobuf:"varint,7,opt,name=vccounter,proto3,oneof" json:"vccounter,omitempty"`
}

func (*ProtoVCBlock_VCBlockHeader_Viewchangestate) isProtoVCBlock_VCBlockHeader_Oneof4() {}
func (*ProtoVCBlock_VCBlockHeader_Vccounter) isProtoVCBlock_VCBlockHeader_Oneof7()       {}

func (m *ProtoVCBlock_VCBlockHeader) GetOneof4() isProtoVCBlock_VCBlockHeader_Oneof4 {
	if m != nil {
		return m.Oneof4
	}
	return nil
}
func (m *ProtoVCBlock_VCBlockHeader) GetOneof7() isProtoVCBlock_VCBlockHeader_Oneof7 {
	if m != nil {
		return m.Oneof7
	}
	return nil
}

func (m *ProtoVCBlock_VCBlockHeader) GetBlockheaderbase() *ProtoBlockHeaderBase {
	if m != nil {
		return m.Blockheaderbase
	}
	return nil
}

func (m *ProtoVCBlock_VCBlockHeader) GetViewchangedsepochno() uint64 {
	if m != nil {
		return m.Viewchangedsepochno
	}
	return 0
}

func (m *ProtoVCBlock_VCBlockHeader) GetViewchangeepochno() uint64 {
	if m != nil {
		return m.Viewchangeepochno
	}
	return 0
}

func (m *ProtoVCBlock_VCBlockHeader) GetViewchangestate() uint32 {
	if x, ok := m.GetOneof4().(*ProtoVCBlock_VCBlockHeader_Viewchangestate); ok {
		return x.Viewchangestate
	}
	return 0
}

func (m *ProtoVCBlock_VCBlockHeader) GetCandidateleadernetworkinfo() *ByteArray {
	if m != nil {
		return m.Candidateleadernetworkinfo
	}
	return nil
}

func (m *ProtoVCBlock_VCBlockHeader) GetCandidateleaderpubkey() *ByteArray {
	if m != nil {
		return m.Candidateleaderpubkey
	}
	return nil
}

func (m *ProtoVCBlock_VCBlockHeader) GetVccounter() uint32 {
	if x, ok := m.GetOneof7().(*ProtoVCBlock_VCBlockHeader_Vccounter); ok {
		return x.Vccounter
	}
	return 0
}

func (m *ProtoVCBlock_VCBlockHeader) GetFaultyleaders() []*ProtoDSNode {
	if m != nil {
		return m.Faultyleaders
	}
	return nil
}

func (m *ProtoVCBlock_VCBlockHeader) GetPrevhash() []byte {
	if m != nil {
		return m.Prevhash
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtoVCBlock_VCBlockHeader) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtoVCBlock_VCBlockHeader_Viewchangestate)(nil),
		(*ProtoVCBlock_VCBlockHeader_Vccounter)(nil),
	}
}

type ProtoFallbackBlock struct {
	Header               *ProtoFallbackBlock_FallbackBlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Blockbase            *ProtoBlockBase                         `protobuf:"bytes,2,opt,name=blockbase,proto3" json:"blockbase,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *ProtoFallbackBlock) Reset()         { *m = ProtoFallbackBlock{} }
func (m *ProtoFallbackBlock) String() string { return proto.CompactTextString(m) }
func (*ProtoFallbackBlock) ProtoMessage()    {}
func (*ProtoFallbackBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{12}
}
func (m *ProtoFallbackBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoFallbackBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoFallbackBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoFallbackBlock.Merge(m, src)
}
func (m *ProtoFallbackBlock) XXX_Size() int {
	return m.Size()
}
func (m *ProtoFallbackBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoFallbackBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoFallbackBlock proto.InternalMessageInfo

func (m *ProtoFallbackBlock) GetHeader() *ProtoFallbackBlock_FallbackBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ProtoFallbackBlock) GetBlockbase() *ProtoBlockBase {
	if m != nil {
		return m.Blockbase
	}
	return nil
}

type ProtoFallbackBlock_FallbackBlockHeader struct {
	Blockheaderbase      *ProtoBlockHeaderBase `protobuf:"bytes,1,opt,name=blockheaderbase,proto3" json:"blockheaderbase,omitempty"`
	Fallbackdsepochno    uint64                `protobuf:"varint,2,opt,name=fallbackdsepochno,proto3" json:"fallbackdsepochno,omitempty"`
	Fallbackepochno      uint64                `protobuf:"varint,3,opt,name=fallbackepochno,proto3" json:"fallbackepochno,omitempty"`
	Fallbackstate        uint32                `protobuf:"varint,4,opt,name=fallbackstate,proto3" json:"fallbackstate,omitempty"`
	Stateroothash        []byte                `protobuf:"bytes,5,opt,name=stateroothash,proto3" json:"stateroothash,omitempty"`
	Leaderconsensusid    uint32                `protobuf:"varint,6,opt,name=leaderconsensusid,proto3" json:"leaderconsensusid,omitempty"`
	Leadernetworkinfo    *ByteArray            `protobuf:"bytes,7,opt,name=leadernetworkinfo,proto3" json:"leadernetworkinfo,omitempty"`
	Leaderpubkey         *ByteArray            `protobuf:"bytes,8,opt,name=leaderpubkey,proto3" json:"leaderpubkey,omitempty"`
	Shardid              uint32                `protobuf:"varint,9,opt,name=shardid,proto3" json:"shardid,omitempty"`
	Prevhash             []byte                `protobuf:"bytes,10,opt,name=prevhash,proto3" json:"prevhash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ProtoFallbackBlock_FallbackBlockHeader) Reset() {
	*m = ProtoFallbackBlock_FallbackBlockHeader{}
}
func (m *ProtoFallbackBlock_FallbackBlockHeader) String() string { return proto.CompactTextString(m) }
func (*ProtoFallbackBlock_FallbackBlockHeader) ProtoMessage()    {}
func (*ProtoFallbackBlock_FallbackBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{12, 0}
}
func (m *ProtoFallbackBlock_FallbackBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoFallbackBlock_FallbackBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoFallbackBlock_FallbackBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoFallbackBlock_FallbackBlockHeader.Merge(m, src)
}
func (m *ProtoFallbackBlock_FallbackBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *ProtoFallbackBlock_FallbackBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoFallbackBlock_FallbackBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoFallbackBlock_FallbackBlockHeader proto.InternalMessageInfo

func (m *ProtoFallbackBlock_FallbackBlockHeader) GetBlockheaderbase() *ProtoBlockHeaderBase {
	if m != nil {
		return m.Blockheaderbase
	}
	return nil
}

func (m *ProtoFallbackBlock_FallbackBlockHeader) GetFallbackdsepochno() uint64 {
	if m != nil {
		return m.Fallbackdsepochno
	}
	return 0
}

func (m *ProtoFallbackBlock_FallbackBlockHeader) GetFallbackepochno() uint64 {
	if m != nil {
		return m.Fallbackepochno
	}
	return 0
}

func (m *ProtoFallbackBlock_FallbackBlockHeader) GetFallbackstate() uint32 {
	if m != nil {
		return m.Fallbackstate
	}
	return 0
}

func (m *ProtoFallbackBlock_FallbackBlockHeader) GetStateroothash() []byte {
	if m != nil {
		return m.Stateroothash
	}
	return nil
}

func (m *ProtoFallbackBlock_FallbackBlockHeader) GetLeaderconsensusid() uint32 {
	if m != nil {
		return m.Leaderconsensusid
	}
	return 0
}

func (m *ProtoFallbackBlock_FallbackBlockHeader) GetLeadernetworkinfo() *ByteArray {
	if m != nil {
		return m.Leadernetworkinfo
	}
	return nil
}

func (m *ProtoFallbackBlock_FallbackBlockHeader) GetLeaderpubkey() *ByteArray {
	if m != nil {
		return m.Leaderpubkey
	}
	return nil
}

func (m *ProtoFallbackBlock_FallbackBlockHeader) GetShardid() uint32 {
	if m != nil {
		return m.Shardid
	}
	return 0
}

func (m *ProtoFallbackBlock_FallbackBlockHeader) GetPrevhash() []byte {
	if m != nil {
		return m.Prevhash
	}
	return nil
}

// Used in database "diagnosticNodes"
type ProtoDiagnosticDataNodes struct {
	Shards               *ProtoShardingStructure `protobuf:"bytes,1,opt,name=shards,proto3" json:"shards,omitempty"`
	Dscommittee          *ProtoDSCommittee       `protobuf:"bytes,2,opt,name=dscommittee,proto3" json:"dscommittee,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ProtoDiagnosticDataNodes) Reset()         { *m = ProtoDiagnosticDataNodes{} }
func (m *ProtoDiagnosticDataNodes) String() string { return proto.CompactTextString(m) }
func (*ProtoDiagnosticDataNodes) ProtoMessage()    {}
func (*ProtoDiagnosticDataNodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{13}
}
func (m *ProtoDiagnosticDataNodes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoDiagnosticDataNodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoDiagnosticDataNodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoDiagnosticDataNodes.Merge(m, src)
}
func (m *ProtoDiagnosticDataNodes) XXX_Size() int {
	return m.Size()
}
func (m *ProtoDiagnosticDataNodes) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoDiagnosticDataNodes.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoDiagnosticDataNodes proto.InternalMessageInfo

func (m *ProtoDiagnosticDataNodes) GetShards() *ProtoShardingStructure {
	if m != nil {
		return m.Shards
	}
	return nil
}

func (m *ProtoDiagnosticDataNodes) GetDscommittee() *ProtoDSCommittee {
	if m != nil {
		return m.Dscommittee
	}
	return nil
}

// Used in database "diagnosticCoinb"
type ProtoDiagnosticDataCoinbase struct {
	Nodecount            *ByteArray `protobuf:"bytes,1,opt,name=nodecount,proto3" json:"nodecount,omitempty"`
	Sigcount             *ByteArray `protobuf:"bytes,2,opt,name=sigcount,proto3" json:"sigcount,omitempty"`
	Lookupcount          uint32     `protobuf:"varint,3,opt,name=lookupcount,proto3" json:"lookupcount,omitempty"`
	Totalreward          *ByteArray `protobuf:"bytes,4,opt,name=totalreward,proto3" json:"totalreward,omitempty"`
	Basereward           *ByteArray `protobuf:"bytes,5,opt,name=basereward,proto3" json:"basereward,omitempty"`
	Baserewardeach       *ByteArray `protobuf:"bytes,6,opt,name=baserewardeach,proto3" json:"baserewardeach,omitempty"`
	Lookupreward         *ByteArray `protobuf:"bytes,7,opt,name=lookupreward,proto3" json:"lookupreward,omitempty"`
	Rewardeachlookup     *ByteArray `protobuf:"bytes,8,opt,name=rewardeachlookup,proto3" json:"rewardeachlookup,omitempty"`
	Nodereward           *ByteArray `protobuf:"bytes,9,opt,name=nodereward,proto3" json:"nodereward,omitempty"`
	Rewardeach           *ByteArray `protobuf:"bytes,10,opt,name=rewardeach,proto3" json:"rewardeach,omitempty"`
	Balanceleft          *ByteArray `protobuf:"bytes,11,opt,name=balanceleft,proto3" json:"balanceleft,omitempty"`
	Luckydrawwinnerkey   *ByteArray `protobuf:"bytes,12,opt,name=luckydrawwinnerkey,proto3" json:"luckydrawwinnerkey,omitempty"`
	Luckydrawwinneraddr  []byte     `protobuf:"bytes,13,opt,name=luckydrawwinneraddr,proto3" json:"luckydrawwinneraddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProtoDiagnosticDataCoinbase) Reset()         { *m = ProtoDiagnosticDataCoinbase{} }
func (m *ProtoDiagnosticDataCoinbase) String() string { return proto.CompactTextString(m) }
func (*ProtoDiagnosticDataCoinbase) ProtoMessage()    {}
func (*ProtoDiagnosticDataCoinbase) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{14}
}
func (m *ProtoDiagnosticDataCoinbase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoDiagnosticDataCoinbase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoDiagnosticDataCoinbase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoDiagnosticDataCoinbase.Merge(m, src)
}
func (m *ProtoDiagnosticDataCoinbase) XXX_Size() int {
	return m.Size()
}
func (m *ProtoDiagnosticDataCoinbase) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoDiagnosticDataCoinbase.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoDiagnosticDataCoinbase proto.InternalMessageInfo

func (m *ProtoDiagnosticDataCoinbase) GetNodecount() *ByteArray {
	if m != nil {
		return m.Nodecount
	}
	return nil
}

func (m *ProtoDiagnosticDataCoinbase) GetSigcount() *ByteArray {
	if m != nil {
		return m.Sigcount
	}
	return nil
}

func (m *ProtoDiagnosticDataCoinbase) GetLookupcount() uint32 {
	if m != nil {
		return m.Lookupcount
	}
	return 0
}

func (m *ProtoDiagnosticDataCoinbase) GetTotalreward() *ByteArray {
	if m != nil {
		return m.Totalreward
	}
	return nil
}

func (m *ProtoDiagnosticDataCoinbase) GetBasereward() *ByteArray {
	if m != nil {
		return m.Basereward
	}
	return nil
}

func (m *ProtoDiagnosticDataCoinbase) GetBaserewardeach() *ByteArray {
	if m != nil {
		return m.Baserewardeach
	}
	return nil
}

func (m *ProtoDiagnosticDataCoinbase) GetLookupreward() *ByteArray {
	if m != nil {
		return m.Lookupreward
	}
	return nil
}

func (m *ProtoDiagnosticDataCoinbase) GetRewardeachlookup() *ByteArray {
	if m != nil {
		return m.Rewardeachlookup
	}
	return nil
}

func (m *ProtoDiagnosticDataCoinbase) GetNodereward() *ByteArray {
	if m != nil {
		return m.Nodereward
	}
	return nil
}

func (m *ProtoDiagnosticDataCoinbase) GetRewardeach() *ByteArray {
	if m != nil {
		return m.Rewardeach
	}
	return nil
}

func (m *ProtoDiagnosticDataCoinbase) GetBalanceleft() *ByteArray {
	if m != nil {
		return m.Balanceleft
	}
	return nil
}

func (m *ProtoDiagnosticDataCoinbase) GetLuckydrawwinnerkey() *ByteArray {
	if m != nil {
		return m.Luckydrawwinnerkey
	}
	return nil
}

func (m *ProtoDiagnosticDataCoinbase) GetLuckydrawwinneraddr() []byte {
	if m != nil {
		return m.Luckydrawwinneraddr
	}
	return nil
}

// Used in database "minerInfoDSComm"
type ProtoMinerInfoDSComm struct {
	Dsnodes              []*ProtoMinerInfoDSComm_Node `protobuf:"bytes,1,rep,name=dsnodes,proto3" json:"dsnodes,omitempty"`
	Dsnodesejected       []*ProtoMinerInfoDSComm_Node `protobuf:"bytes,2,rep,name=dsnodesejected,proto3" json:"dsnodesejected,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ProtoMinerInfoDSComm) Reset()         { *m = ProtoMinerInfoDSComm{} }
func (m *ProtoMinerInfoDSComm) String() string { return proto.CompactTextString(m) }
func (*ProtoMinerInfoDSComm) ProtoMessage()    {}
func (*ProtoMinerInfoDSComm) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{15}
}
func (m *ProtoMinerInfoDSComm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoMinerInfoDSComm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoMinerInfoDSComm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoMinerInfoDSComm.Merge(m, src)
}
func (m *ProtoMinerInfoDSComm) XXX_Size() int {
	return m.Size()
}
func (m *ProtoMinerInfoDSComm) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoMinerInfoDSComm.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoMinerInfoDSComm proto.InternalMessageInfo

func (m *ProtoMinerInfoDSComm) GetDsnodes() []*ProtoMinerInfoDSComm_Node {
	if m != nil {
		return m.Dsnodes
	}
	return nil
}

func (m *ProtoMinerInfoDSComm) GetDsnodesejected() []*ProtoMinerInfoDSComm_Node {
	if m != nil {
		return m.Dsnodesejected
	}
	return nil
}

type ProtoMinerInfoDSComm_Node struct {
	Pubkey               *ByteArray `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProtoMinerInfoDSComm_Node) Reset()         { *m = ProtoMinerInfoDSComm_Node{} }
func (m *ProtoMinerInfoDSComm_Node) String() string { return proto.CompactTextString(m) }
func (*ProtoMinerInfoDSComm_Node) ProtoMessage()    {}
func (*ProtoMinerInfoDSComm_Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{15, 0}
}
func (m *ProtoMinerInfoDSComm_Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoMinerInfoDSComm_Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoMinerInfoDSComm_Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoMinerInfoDSComm_Node.Merge(m, src)
}
func (m *ProtoMinerInfoDSComm_Node) XXX_Size() int {
	return m.Size()
}
func (m *ProtoMinerInfoDSComm_Node) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoMinerInfoDSComm_Node.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoMinerInfoDSComm_Node proto.InternalMessageInfo

func (m *ProtoMinerInfoDSComm_Node) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

// Used in database "minerInfoShards"
type ProtoMinerInfoShards struct {
	Shards               []*ProtoMinerInfoShards_Shard `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ProtoMinerInfoShards) Reset()         { *m = ProtoMinerInfoShards{} }
func (m *ProtoMinerInfoShards) String() string { return proto.CompactTextString(m) }
func (*ProtoMinerInfoShards) ProtoMessage()    {}
func (*ProtoMinerInfoShards) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{16}
}
func (m *ProtoMinerInfoShards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoMinerInfoShards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoMinerInfoShards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoMinerInfoShards.Merge(m, src)
}
func (m *ProtoMinerInfoShards) XXX_Size() int {
	return m.Size()
}
func (m *ProtoMinerInfoShards) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoMinerInfoShards.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoMinerInfoShards proto.InternalMessageInfo

func (m *ProtoMinerInfoShards) GetShards() []*ProtoMinerInfoShards_Shard {
	if m != nil {
		return m.Shards
	}
	return nil
}

type ProtoMinerInfoShards_Node struct {
	Pubkey               *ByteArray `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProtoMinerInfoShards_Node) Reset()         { *m = ProtoMinerInfoShards_Node{} }
func (m *ProtoMinerInfoShards_Node) String() string { return proto.CompactTextString(m) }
func (*ProtoMinerInfoShards_Node) ProtoMessage()    {}
func (*ProtoMinerInfoShards_Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{16, 0}
}
func (m *ProtoMinerInfoShards_Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoMinerInfoShards_Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoMinerInfoShards_Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoMinerInfoShards_Node.Merge(m, src)
}
func (m *ProtoMinerInfoShards_Node) XXX_Size() int {
	return m.Size()
}
func (m *ProtoMinerInfoShards_Node) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoMinerInfoShards_Node.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoMinerInfoShards_Node proto.InternalMessageInfo

func (m *ProtoMinerInfoShards_Node) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

type ProtoMinerInfoShards_Shard struct {
	Shardsize            uint32                       `protobuf:"varint,1,opt,name=shardsize,proto3" json:"shardsize,omitempty"`
	Shardnodes           []*ProtoMinerInfoShards_Node `protobuf:"bytes,2,rep,name=shardnodes,proto3" json:"shardnodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ProtoMinerInfoShards_Shard) Reset()         { *m = ProtoMinerInfoShards_Shard{} }
func (m *ProtoMinerInfoShards_Shard) String() string { return proto.CompactTextString(m) }
func (*ProtoMinerInfoShards_Shard) ProtoMessage()    {}
func (*ProtoMinerInfoShards_Shard) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{16, 1}
}
func (m *ProtoMinerInfoShards_Shard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoMinerInfoShards_Shard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoMinerInfoShards_Shard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoMinerInfoShards_Shard.Merge(m, src)
}
func (m *ProtoMinerInfoShards_Shard) XXX_Size() int {
	return m.Size()
}
func (m *ProtoMinerInfoShards_Shard) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoMinerInfoShards_Shard.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoMinerInfoShards_Shard proto.InternalMessageInfo

func (m *ProtoMinerInfoShards_Shard) GetShardsize() uint32 {
	if m != nil {
		return m.Shardsize
	}
	return 0
}

func (m *ProtoMinerInfoShards_Shard) GetShardnodes() []*ProtoMinerInfoShards_Node {
	if m != nil {
		return m.Shardnodes
	}
	return nil
}

type ProtoAccountBase struct {
	Version uint32     `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Balance *ByteArray `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	// Types that are valid to be assigned to Oneof3:
	//	*ProtoAccountBase_Nonce
	Oneof3               isProtoAccountBase_Oneof3 `protobuf_oneof:"oneof3"`
	Codehash             []byte                    `protobuf:"bytes,4,opt,name=codehash,proto3" json:"codehash,omitempty"`
	Storageroot          []byte                    `protobuf:"bytes,5,opt,name=storageroot,proto3" json:"storageroot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ProtoAccountBase) Reset()         { *m = ProtoAccountBase{} }
func (m *ProtoAccountBase) String() string { return proto.CompactTextString(m) }
func (*ProtoAccountBase) ProtoMessage()    {}
func (*ProtoAccountBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{17}
}
func (m *ProtoAccountBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoAccountBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoAccountBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoAccountBase.Merge(m, src)
}
func (m *ProtoAccountBase) XXX_Size() int {
	return m.Size()
}
func (m *ProtoAccountBase) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoAccountBase.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoAccountBase proto.InternalMessageInfo

type isProtoAccountBase_Oneof3 interface {
	isProtoAccountBase_Oneof3()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProtoAccountBase_Nonce struct {
	Nonce uint64 `protobuf:"varint,3,opt,name=nonce,proto3,oneof" json:"nonce,omitempty"`
}

func (*ProtoAccountBase_Nonce) isProtoAccountBase_Oneof3() {}

func (m *ProtoAccountBase) GetOneof3() isProtoAccountBase_Oneof3 {
	if m != nil {
		return m.Oneof3
	}
	return nil
}

func (m *ProtoAccountBase) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ProtoAccountBase) GetBalance() *ByteArray {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *ProtoAccountBase) GetNonce() uint64 {
	if x, ok := m.GetOneof3().(*ProtoAccountBase_Nonce); ok {
		return x.Nonce
	}
	return 0
}

func (m *ProtoAccountBase) GetCodehash() []byte {
	if m != nil {
		return m.Codehash
	}
	return nil
}

func (m *ProtoAccountBase) GetStorageroot() []byte {
	if m != nil {
		return m.Storageroot
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtoAccountBase) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtoAccountBase_Nonce)(nil),
	}
}

type ProtoAccount struct {
	Base                 *ProtoAccountBase            `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Code                 []byte                       `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Storage              []*ProtoAccount_StorageData  `protobuf:"bytes,3,rep,name=storage,proto3" json:"storage,omitempty"`
	Numbersign           bool                         `protobuf:"varint,4,opt,name=numbersign,proto3" json:"numbersign,omitempty"`
	Storage2             []*ProtoAccount_StorageData2 `protobuf:"bytes,5,rep,name=storage2,proto3" json:"storage2,omitempty"`
	Todelete             []string                     `protobuf:"bytes,6,rep,name=todelete,proto3" json:"todelete,omitempty"`
	Initdata             []byte                       `protobuf:"bytes,7,opt,name=initdata,proto3" json:"initdata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ProtoAccount) Reset()         { *m = ProtoAccount{} }
func (m *ProtoAccount) String() string { return proto.CompactTextString(m) }
func (*ProtoAccount) ProtoMessage()    {}
func (*ProtoAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{18}
}
func (m *ProtoAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoAccount.Merge(m, src)
}
func (m *ProtoAccount) XXX_Size() int {
	return m.Size()
}
func (m *ProtoAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoAccount.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoAccount proto.InternalMessageInfo

func (m *ProtoAccount) GetBase() *ProtoAccountBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ProtoAccount) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *ProtoAccount) GetStorage() []*ProtoAccount_StorageData {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *ProtoAccount) GetNumbersign() bool {
	if m != nil {
		return m.Numbersign
	}
	return false
}

func (m *ProtoAccount) GetStorage2() []*ProtoAccount_StorageData2 {
	if m != nil {
		return m.Storage2
	}
	return nil
}

func (m *ProtoAccount) GetTodelete() []string {
	if m != nil {
		return m.Todelete
	}
	return nil
}

func (m *ProtoAccount) GetInitdata() []byte {
	if m != nil {
		return m.Initdata
	}
	return nil
}

type ProtoAccount_StorageData struct {
	Keyhash              []byte   `protobuf:"bytes,1,opt,name=keyhash,proto3" json:"keyhash,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtoAccount_StorageData) Reset()         { *m = ProtoAccount_StorageData{} }
func (m *ProtoAccount_StorageData) String() string { return proto.CompactTextString(m) }
func (*ProtoAccount_StorageData) ProtoMessage()    {}
func (*ProtoAccount_StorageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{18, 0}
}
func (m *ProtoAccount_StorageData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoAccount_StorageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoAccount_StorageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoAccount_StorageData.Merge(m, src)
}
func (m *ProtoAccount_StorageData) XXX_Size() int {
	return m.Size()
}
func (m *ProtoAccount_StorageData) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoAccount_StorageData.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoAccount_StorageData proto.InternalMessageInfo

func (m *ProtoAccount_StorageData) GetKeyhash() []byte {
	if m != nil {
		return m.Keyhash
	}
	return nil
}

func (m *ProtoAccount_StorageData) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ProtoAccount_StorageData2 struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtoAccount_StorageData2) Reset()         { *m = ProtoAccount_StorageData2{} }
func (m *ProtoAccount_StorageData2) String() string { return proto.CompactTextString(m) }
func (*ProtoAccount_StorageData2) ProtoMessage()    {}
func (*ProtoAccount_StorageData2) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{18, 1}
}
func (m *ProtoAccount_StorageData2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoAccount_StorageData2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoAccount_StorageData2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoAccount_StorageData2.Merge(m, src)
}
func (m *ProtoAccount_StorageData2) XXX_Size() int {
	return m.Size()
}
func (m *ProtoAccount_StorageData2) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoAccount_StorageData2.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoAccount_StorageData2 proto.InternalMessageInfo

func (m *ProtoAccount_StorageData2) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ProtoAccount_StorageData2) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ProtoStateIndex struct {
	Index                [][]byte `protobuf:"bytes,1,rep,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtoStateIndex) Reset()         { *m = ProtoStateIndex{} }
func (m *ProtoStateIndex) String() string { return proto.CompactTextString(m) }
func (*ProtoStateIndex) ProtoMessage()    {}
func (*ProtoStateIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{19}
}
func (m *ProtoStateIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoStateIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoStateIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoStateIndex.Merge(m, src)
}
func (m *ProtoStateIndex) XXX_Size() int {
	return m.Size()
}
func (m *ProtoStateIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoStateIndex.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoStateIndex proto.InternalMessageInfo

func (m *ProtoStateIndex) GetIndex() [][]byte {
	if m != nil {
		return m.Index
	}
	return nil
}

type ProtoStateData struct {
	Version              uint32   `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Vname                string   `protobuf:"bytes,2,opt,name=vname,proto3" json:"vname,omitempty"`
	Ismutable            bool     `protobuf:"varint,3,opt,name=ismutable,proto3" json:"ismutable,omitempty"`
	Type                 string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value                string   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtoStateData) Reset()         { *m = ProtoStateData{} }
func (m *ProtoStateData) String() string { return proto.CompactTextString(m) }
func (*ProtoStateData) ProtoMessage()    {}
func (*ProtoStateData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{20}
}
func (m *ProtoStateData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoStateData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoStateData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoStateData.Merge(m, src)
}
func (m *ProtoStateData) XXX_Size() int {
	return m.Size()
}
func (m *ProtoStateData) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoStateData.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoStateData proto.InternalMessageInfo

func (m *ProtoStateData) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ProtoStateData) GetVname() string {
	if m != nil {
		return m.Vname
	}
	return ""
}

func (m *ProtoStateData) GetIsmutable() bool {
	if m != nil {
		return m.Ismutable
	}
	return false
}

func (m *ProtoStateData) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ProtoStateData) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ProtoAccountStore struct {
	Entries              []*ProtoAccountStore_AddressAccount `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *ProtoAccountStore) Reset()         { *m = ProtoAccountStore{} }
func (m *ProtoAccountStore) String() string { return proto.CompactTextString(m) }
func (*ProtoAccountStore) ProtoMessage()    {}
func (*ProtoAccountStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{21}
}
func (m *ProtoAccountStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoAccountStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoAccountStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoAccountStore.Merge(m, src)
}
func (m *ProtoAccountStore) XXX_Size() int {
	return m.Size()
}
func (m *ProtoAccountStore) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoAccountStore.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoAccountStore proto.InternalMessageInfo

func (m *ProtoAccountStore) GetEntries() []*ProtoAccountStore_AddressAccount {
	if m != nil {
		return m.Entries
	}
	return nil
}

type ProtoAccountStore_AddressAccount struct {
	Address              []byte        `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Account              *ProtoAccount `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ProtoAccountStore_AddressAccount) Reset()         { *m = ProtoAccountStore_AddressAccount{} }
func (m *ProtoAccountStore_AddressAccount) String() string { return proto.CompactTextString(m) }
func (*ProtoAccountStore_AddressAccount) ProtoMessage()    {}
func (*ProtoAccountStore_AddressAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{21, 0}
}
func (m *ProtoAccountStore_AddressAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoAccountStore_AddressAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoAccountStore_AddressAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoAccountStore_AddressAccount.Merge(m, src)
}
func (m *ProtoAccountStore_AddressAccount) XXX_Size() int {
	return m.Size()
}
func (m *ProtoAccountStore_AddressAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoAccountStore_AddressAccount.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoAccountStore_AddressAccount proto.InternalMessageInfo

func (m *ProtoAccountStore_AddressAccount) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ProtoAccountStore_AddressAccount) GetAccount() *ProtoAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

type ProtoPeer struct {
	Ipaddress *ByteArray `protobuf:"bytes,1,opt,name=ipaddress,proto3" json:"ipaddress,omitempty"`
	// Types that are valid to be assigned to Oneof2:
	//	*ProtoPeer_Listenporthost
	Oneof2               isProtoPeer_Oneof2 `protobuf_oneof:"oneof2"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ProtoPeer) Reset()         { *m = ProtoPeer{} }
func (m *ProtoPeer) String() string { return proto.CompactTextString(m) }
func (*ProtoPeer) ProtoMessage()    {}
func (*ProtoPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{22}
}
func (m *ProtoPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoPeer.Merge(m, src)
}
func (m *ProtoPeer) XXX_Size() int {
	return m.Size()
}
func (m *ProtoPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoPeer.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoPeer proto.InternalMessageInfo

type isProtoPeer_Oneof2 interface {
	isProtoPeer_Oneof2()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProtoPeer_Listenporthost struct {
	Listenporthost uint32 `protobuf:"varint,2,opt,name=listenporthost,proto3,oneof" json:"listenporthost,omitempty"`
}

func (*ProtoPeer_Listenporthost) isProtoPeer_Oneof2() {}

func (m *ProtoPeer) GetOneof2() isProtoPeer_Oneof2 {
	if m != nil {
		return m.Oneof2
	}
	return nil
}

func (m *ProtoPeer) GetIpaddress() *ByteArray {
	if m != nil {
		return m.Ipaddress
	}
	return nil
}

func (m *ProtoPeer) GetListenporthost() uint32 {
	if x, ok := m.GetOneof2().(*ProtoPeer_Listenporthost); ok {
		return x.Listenporthost
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtoPeer) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtoPeer_Listenporthost)(nil),
	}
}

type ProtoPoWSolution struct {
	Nonce   uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Result  []byte `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Mixhash []byte `protobuf:"bytes,3,opt,name=mixhash,proto3" json:"mixhash,omitempty"`
	// Types that are valid to be assigned to Oneof4:
	//	*ProtoPoWSolution_Lookupid
	Oneof4               isProtoPoWSolution_Oneof4 `protobuf_oneof:"oneof4"`
	Gasprice             *ByteArray                `protobuf:"bytes,5,opt,name=gasprice,proto3" json:"gasprice,omitempty"`
	Govdata              *GovernanceData           `protobuf:"bytes,6,opt,name=govdata,proto3" json:"govdata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ProtoPoWSolution) Reset()         { *m = ProtoPoWSolution{} }
func (m *ProtoPoWSolution) String() string { return proto.CompactTextString(m) }
func (*ProtoPoWSolution) ProtoMessage()    {}
func (*ProtoPoWSolution) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{23}
}
func (m *ProtoPoWSolution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoPoWSolution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoPoWSolution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoPoWSolution.Merge(m, src)
}
func (m *ProtoPoWSolution) XXX_Size() int {
	return m.Size()
}
func (m *ProtoPoWSolution) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoPoWSolution.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoPoWSolution proto.InternalMessageInfo

type isProtoPoWSolution_Oneof4 interface {
	isProtoPoWSolution_Oneof4()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProtoPoWSolution_Lookupid struct {
	Lookupid uint32 `protobuf:"varint,4,opt,name=lookupid,proto3,oneof" json:"lookupid,omitempty"`
}

func (*ProtoPoWSolution_Lookupid) isProtoPoWSolution_Oneof4() {}

func (m *ProtoPoWSolution) GetOneof4() isProtoPoWSolution_Oneof4 {
	if m != nil {
		return m.Oneof4
	}
	return nil
}

func (m *ProtoPoWSolution) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *ProtoPoWSolution) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ProtoPoWSolution) GetMixhash() []byte {
	if m != nil {
		return m.Mixhash
	}
	return nil
}

func (m *ProtoPoWSolution) GetLookupid() uint32 {
	if x, ok := m.GetOneof4().(*ProtoPoWSolution_Lookupid); ok {
		return x.Lookupid
	}
	return 0
}

func (m *ProtoPoWSolution) GetGasprice() *ByteArray {
	if m != nil {
		return m.Gasprice
	}
	return nil
}

func (m *ProtoPoWSolution) GetGovdata() *GovernanceData {
	if m != nil {
		return m.Govdata
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtoPoWSolution) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtoPoWSolution_Lookupid)(nil),
	}
}

type ProtoCommittee struct {
	Members              []*ByteArray `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ProtoCommittee) Reset()         { *m = ProtoCommittee{} }
func (m *ProtoCommittee) String() string { return proto.CompactTextString(m) }
func (*ProtoCommittee) ProtoMessage()    {}
func (*ProtoCommittee) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{24}
}
func (m *ProtoCommittee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoCommittee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoCommittee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoCommittee.Merge(m, src)
}
func (m *ProtoCommittee) XXX_Size() int {
	return m.Size()
}
func (m *ProtoCommittee) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoCommittee.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoCommittee proto.InternalMessageInfo

func (m *ProtoCommittee) GetMembers() []*ByteArray {
	if m != nil {
		return m.Members
	}
	return nil
}

type ProtoShardingStructureWithPoWSolns struct {
	Shards               []*ProtoShardingStructureWithPoWSolns_Shard `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *ProtoShardingStructureWithPoWSolns) Reset()         { *m = ProtoShardingStructureWithPoWSolns{} }
func (m *ProtoShardingStructureWithPoWSolns) String() string { return proto.CompactTextString(m) }
func (*ProtoShardingStructureWithPoWSolns) ProtoMessage()    {}
func (*ProtoShardingStructureWithPoWSolns) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{25}
}
func (m *ProtoShardingStructureWithPoWSolns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoShardingStructureWithPoWSolns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoShardingStructureWithPoWSolns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoShardingStructureWithPoWSolns.Merge(m, src)
}
func (m *ProtoShardingStructureWithPoWSolns) XXX_Size() int {
	return m.Size()
}
func (m *ProtoShardingStructureWithPoWSolns) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoShardingStructureWithPoWSolns.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoShardingStructureWithPoWSolns proto.InternalMessageInfo

func (m *ProtoShardingStructureWithPoWSolns) GetShards() []*ProtoShardingStructureWithPoWSolns_Shard {
	if m != nil {
		return m.Shards
	}
	return nil
}

type ProtoShardingStructureWithPoWSolns_Member struct {
	Pubkey   *ByteArray `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Peerinfo *ByteArray `protobuf:"bytes,2,opt,name=peerinfo,proto3" json:"peerinfo,omitempty"`
	// Types that are valid to be assigned to Oneof3:
	//	*ProtoShardingStructureWithPoWSolns_Member_Reputation
	Oneof3               isProtoShardingStructureWithPoWSolns_Member_Oneof3 `protobuf_oneof:"oneof3"`
	Powsoln              *ProtoPoWSolution                                  `protobuf:"bytes,4,opt,name=powsoln,proto3" json:"powsoln,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *ProtoShardingStructureWithPoWSolns_Member) Reset() {
	*m = ProtoShardingStructureWithPoWSolns_Member{}
}
func (m *ProtoShardingStructureWithPoWSolns_Member) String() string {
	return proto.CompactTextString(m)
}
func (*ProtoShardingStructureWithPoWSolns_Member) ProtoMessage() {}
func (*ProtoShardingStructureWithPoWSolns_Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{25, 0}
}
func (m *ProtoShardingStructureWithPoWSolns_Member) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoShardingStructureWithPoWSolns_Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoShardingStructureWithPoWSolns_Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoShardingStructureWithPoWSolns_Member.Merge(m, src)
}
func (m *ProtoShardingStructureWithPoWSolns_Member) XXX_Size() int {
	return m.Size()
}
func (m *ProtoShardingStructureWithPoWSolns_Member) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoShardingStructureWithPoWSolns_Member.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoShardingStructureWithPoWSolns_Member proto.InternalMessageInfo

type isProtoShardingStructureWithPoWSolns_Member_Oneof3 interface {
	isProtoShardingStructureWithPoWSolns_Member_Oneof3()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProtoShardingStructureWithPoWSolns_Member_Reputation struct {
	Reputation uint32 `protobuf:"varint,3,opt,name=reputation,proto3,oneof" json:"reputation,omitempty"`
}

func (*ProtoShardingStructureWithPoWSolns_Member_Reputation) isProtoShardingStructureWithPoWSolns_Member_Oneof3() {
}

func (m *ProtoShardingStructureWithPoWSolns_Member) GetOneof3() isProtoShardingStructureWithPoWSolns_Member_Oneof3 {
	if m != nil {
		return m.Oneof3
	}
	return nil
}

func (m *ProtoShardingStructureWithPoWSolns_Member) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *ProtoShardingStructureWithPoWSolns_Member) GetPeerinfo() *ByteArray {
	if m != nil {
		return m.Peerinfo
	}
	return nil
}

func (m *ProtoShardingStructureWithPoWSolns_Member) GetReputation() uint32 {
	if x, ok := m.GetOneof3().(*ProtoShardingStructureWithPoWSolns_Member_Reputation); ok {
		return x.Reputation
	}
	return 0
}

func (m *ProtoShardingStructureWithPoWSolns_Member) GetPowsoln() *ProtoPoWSolution {
	if m != nil {
		return m.Powsoln
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtoShardingStructureWithPoWSolns_Member) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtoShardingStructureWithPoWSolns_Member_Reputation)(nil),
	}
}

type ProtoShardingStructureWithPoWSolns_Shard struct {
	Members              []*ProtoShardingStructureWithPoWSolns_Member `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *ProtoShardingStructureWithPoWSolns_Shard) Reset() {
	*m = ProtoShardingStructureWithPoWSolns_Shard{}
}
func (m *ProtoShardingStructureWithPoWSolns_Shard) String() string { return proto.CompactTextString(m) }
func (*ProtoShardingStructureWithPoWSolns_Shard) ProtoMessage()    {}
func (*ProtoShardingStructureWithPoWSolns_Shard) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{25, 1}
}
func (m *ProtoShardingStructureWithPoWSolns_Shard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoShardingStructureWithPoWSolns_Shard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoShardingStructureWithPoWSolns_Shard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoShardingStructureWithPoWSolns_Shard.Merge(m, src)
}
func (m *ProtoShardingStructureWithPoWSolns_Shard) XXX_Size() int {
	return m.Size()
}
func (m *ProtoShardingStructureWithPoWSolns_Shard) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoShardingStructureWithPoWSolns_Shard.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoShardingStructureWithPoWSolns_Shard proto.InternalMessageInfo

func (m *ProtoShardingStructureWithPoWSolns_Shard) GetMembers() []*ProtoShardingStructureWithPoWSolns_Member {
	if m != nil {
		return m.Members
	}
	return nil
}

type ProtoDSWinnerPoW struct {
	Pubkey               *ByteArray        `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Powsoln              *ProtoPoWSolution `protobuf:"bytes,2,opt,name=powsoln,proto3" json:"powsoln,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ProtoDSWinnerPoW) Reset()         { *m = ProtoDSWinnerPoW{} }
func (m *ProtoDSWinnerPoW) String() string { return proto.CompactTextString(m) }
func (*ProtoDSWinnerPoW) ProtoMessage()    {}
func (*ProtoDSWinnerPoW) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{26}
}
func (m *ProtoDSWinnerPoW) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoDSWinnerPoW) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoDSWinnerPoW) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoDSWinnerPoW.Merge(m, src)
}
func (m *ProtoDSWinnerPoW) XXX_Size() int {
	return m.Size()
}
func (m *ProtoDSWinnerPoW) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoDSWinnerPoW.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoDSWinnerPoW proto.InternalMessageInfo

func (m *ProtoDSWinnerPoW) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *ProtoDSWinnerPoW) GetPowsoln() *ProtoPoWSolution {
	if m != nil {
		return m.Powsoln
	}
	return nil
}

type ProtoTransactionCoreInfo struct {
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Types that are valid to be assigned to Oneof2:
	//	*ProtoTransactionCoreInfo_Nonce
	Oneof2       isProtoTransactionCoreInfo_Oneof2 `protobuf_oneof:"oneof2"`
	Toaddr       []byte                            `protobuf:"bytes,3,opt,name=toaddr,proto3" json:"toaddr,omitempty"`
	Senderpubkey *ByteArray                        `protobuf:"bytes,4,opt,name=senderpubkey,proto3" json:"senderpubkey,omitempty"`
	Amount       *ByteArray                        `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Gasprice     *ByteArray                        `protobuf:"bytes,6,opt,name=gasprice,proto3" json:"gasprice,omitempty"`
	Gaslimit     uint64                            `protobuf:"varint,7,opt,name=gaslimit,proto3" json:"gaslimit,omitempty"`
	// Types that are valid to be assigned to Oneof8:
	//	*ProtoTransactionCoreInfo_Code
	Oneof8 isProtoTransactionCoreInfo_Oneof8 `protobuf_oneof:"oneof8"`
	// Types that are valid to be assigned to Oneof9:
	//	*ProtoTransactionCoreInfo_Data
	Oneof9               isProtoTransactionCoreInfo_Oneof9 `protobuf_oneof:"oneof9"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ProtoTransactionCoreInfo) Reset()         { *m = ProtoTransactionCoreInfo{} }
func (m *ProtoTransactionCoreInfo) String() string { return proto.CompactTextString(m) }
func (*ProtoTransactionCoreInfo) ProtoMessage()    {}
func (*ProtoTransactionCoreInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{27}
}
func (m *ProtoTransactionCoreInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoTransactionCoreInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoTransactionCoreInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoTransactionCoreInfo.Merge(m, src)
}
func (m *ProtoTransactionCoreInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProtoTransactionCoreInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoTransactionCoreInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoTransactionCoreInfo proto.InternalMessageInfo

type isProtoTransactionCoreInfo_Oneof2 interface {
	isProtoTransactionCoreInfo_Oneof2()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProtoTransactionCoreInfo_Oneof8 interface {
	isProtoTransactionCoreInfo_Oneof8()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProtoTransactionCoreInfo_Oneof9 interface {
	isProtoTransactionCoreInfo_Oneof9()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProtoTransactionCoreInfo_Nonce struct {
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3,oneof" json:"nonce,omitempty"`
}
type ProtoTransactionCoreInfo_Code struct {
	Code []byte `protobuf:"bytes,8,opt,name=code,proto3,oneof" json:"code,omitempty"`
}
type ProtoTransactionCoreInfo_Data struct {
	Data []byte `protobuf:"bytes,9,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (*ProtoTransactionCoreInfo_Nonce) isProtoTransactionCoreInfo_Oneof2() {}
func (*ProtoTransactionCoreInfo_Code) isProtoTransactionCoreInfo_Oneof8()  {}
func (*ProtoTransactionCoreInfo_Data) isProtoTransactionCoreInfo_Oneof9()  {}

func (m *ProtoTransactionCoreInfo) GetOneof2() isProtoTransactionCoreInfo_Oneof2 {
	if m != nil {
		return m.Oneof2
	}
	return nil
}
func (m *ProtoTransactionCoreInfo) GetOneof8() isProtoTransactionCoreInfo_Oneof8 {
	if m != nil {
		return m.Oneof8
	}
	return nil
}
func (m *ProtoTransactionCoreInfo) GetOneof9() isProtoTransactionCoreInfo_Oneof9 {
	if m != nil {
		return m.Oneof9
	}
	return nil
}

func (m *ProtoTransactionCoreInfo) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ProtoTransactionCoreInfo) GetNonce() uint64 {
	if x, ok := m.GetOneof2().(*ProtoTransactionCoreInfo_Nonce); ok {
		return x.Nonce
	}
	return 0
}

func (m *ProtoTransactionCoreInfo) GetToaddr() []byte {
	if m != nil {
		return m.Toaddr
	}
	return nil
}

func (m *ProtoTransactionCoreInfo) GetSenderpubkey() *ByteArray {
	if m != nil {
		return m.Senderpubkey
	}
	return nil
}

func (m *ProtoTransactionCoreInfo) GetAmount() *ByteArray {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *ProtoTransactionCoreInfo) GetGasprice() *ByteArray {
	if m != nil {
		return m.Gasprice
	}
	return nil
}

func (m *ProtoTransactionCoreInfo) GetGaslimit() uint64 {
	if m != nil {
		return m.Gaslimit
	}
	return 0
}

func (m *ProtoTransactionCoreInfo) GetCode() []byte {
	if x, ok := m.GetOneof8().(*ProtoTransactionCoreInfo_Code); ok {
		return x.Code
	}
	return nil
}

func (m *ProtoTransactionCoreInfo) GetData() []byte {
	if x, ok := m.GetOneof9().(*ProtoTransactionCoreInfo_Data); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtoTransactionCoreInfo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtoTransactionCoreInfo_Nonce)(nil),
		(*ProtoTransactionCoreInfo_Code)(nil),
		(*ProtoTransactionCoreInfo_Data)(nil),
	}
}

type ProtoTransaction struct {
	Tranid               []byte                    `protobuf:"bytes,1,opt,name=tranid,proto3" json:"tranid,omitempty"`
	Info                 *ProtoTransactionCoreInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Signature            *ByteArray                `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ProtoTransaction) Reset()         { *m = ProtoTransaction{} }
func (m *ProtoTransaction) String() string { return proto.CompactTextString(m) }
func (*ProtoTransaction) ProtoMessage()    {}
func (*ProtoTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{28}
}
func (m *ProtoTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoTransaction.Merge(m, src)
}
func (m *ProtoTransaction) XXX_Size() int {
	return m.Size()
}
func (m *ProtoTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoTransaction proto.InternalMessageInfo

func (m *ProtoTransaction) GetTranid() []byte {
	if m != nil {
		return m.Tranid
	}
	return nil
}

func (m *ProtoTransaction) GetInfo() *ProtoTransactionCoreInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *ProtoTransaction) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ProtoTxnFileOffset struct {
	Offsetinfile         []uint32 `protobuf:"varint,1,rep,packed,name=offsetinfile,proto3" json:"offsetinfile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtoTxnFileOffset) Reset()         { *m = ProtoTxnFileOffset{} }
func (m *ProtoTxnFileOffset) String() string { return proto.CompactTextString(m) }
func (*ProtoTxnFileOffset) ProtoMessage()    {}
func (*ProtoTxnFileOffset) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{29}
}
func (m *ProtoTxnFileOffset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoTxnFileOffset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoTxnFileOffset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoTxnFileOffset.Merge(m, src)
}
func (m *ProtoTxnFileOffset) XXX_Size() int {
	return m.Size()
}
func (m *ProtoTxnFileOffset) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoTxnFileOffset.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoTxnFileOffset proto.InternalMessageInfo

func (m *ProtoTxnFileOffset) GetOffsetinfile() []uint32 {
	if m != nil {
		return m.Offsetinfile
	}
	return nil
}

type ProtoTransactionArray struct {
	Transactions         []*ProtoTransaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ProtoTransactionArray) Reset()         { *m = ProtoTransactionArray{} }
func (m *ProtoTransactionArray) String() string { return proto.CompactTextString(m) }
func (*ProtoTransactionArray) ProtoMessage()    {}
func (*ProtoTransactionArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{30}
}
func (m *ProtoTransactionArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoTransactionArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoTransactionArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoTransactionArray.Merge(m, src)
}
func (m *ProtoTransactionArray) XXX_Size() int {
	return m.Size()
}
func (m *ProtoTransactionArray) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoTransactionArray.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoTransactionArray proto.InternalMessageInfo

func (m *ProtoTransactionArray) GetTransactions() []*ProtoTransaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type ProtoTransactionReceipt struct {
	Receipt []byte `protobuf:"bytes,1,opt,name=receipt,proto3" json:"receipt,omitempty"`
	// Types that are valid to be assigned to Oneof2:
	//	*ProtoTransactionReceipt_Cumgas
	Oneof2               isProtoTransactionReceipt_Oneof2 `protobuf_oneof:"oneof2"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ProtoTransactionReceipt) Reset()         { *m = ProtoTransactionReceipt{} }
func (m *ProtoTransactionReceipt) String() string { return proto.CompactTextString(m) }
func (*ProtoTransactionReceipt) ProtoMessage()    {}
func (*ProtoTransactionReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{31}
}
func (m *ProtoTransactionReceipt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoTransactionReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoTransactionReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoTransactionReceipt.Merge(m, src)
}
func (m *ProtoTransactionReceipt) XXX_Size() int {
	return m.Size()
}
func (m *ProtoTransactionReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoTransactionReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoTransactionReceipt proto.InternalMessageInfo

type isProtoTransactionReceipt_Oneof2 interface {
	isProtoTransactionReceipt_Oneof2()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProtoTransactionReceipt_Cumgas struct {
	Cumgas uint64 `protobuf:"varint,2,opt,name=cumgas,proto3,oneof" json:"cumgas,omitempty"`
}

func (*ProtoTransactionReceipt_Cumgas) isProtoTransactionReceipt_Oneof2() {}

func (m *ProtoTransactionReceipt) GetOneof2() isProtoTransactionReceipt_Oneof2 {
	if m != nil {
		return m.Oneof2
	}
	return nil
}

func (m *ProtoTransactionReceipt) GetReceipt() []byte {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func (m *ProtoTransactionReceipt) GetCumgas() uint64 {
	if x, ok := m.GetOneof2().(*ProtoTransactionReceipt_Cumgas); ok {
		return x.Cumgas
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtoTransactionReceipt) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtoTransactionReceipt_Cumgas)(nil),
	}
}

type ProtoTransactionWithReceipt struct {
	Transaction          *ProtoTransaction        `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Receipt              *ProtoTransactionReceipt `protobuf:"bytes,2,opt,name=receipt,proto3" json:"receipt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ProtoTransactionWithReceipt) Reset()         { *m = ProtoTransactionWithReceipt{} }
func (m *ProtoTransactionWithReceipt) String() string { return proto.CompactTextString(m) }
func (*ProtoTransactionWithReceipt) ProtoMessage()    {}
func (*ProtoTransactionWithReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{32}
}
func (m *ProtoTransactionWithReceipt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoTransactionWithReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoTransactionWithReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoTransactionWithReceipt.Merge(m, src)
}
func (m *ProtoTransactionWithReceipt) XXX_Size() int {
	return m.Size()
}
func (m *ProtoTransactionWithReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoTransactionWithReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoTransactionWithReceipt proto.InternalMessageInfo

func (m *ProtoTransactionWithReceipt) GetTransaction() *ProtoTransaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *ProtoTransactionWithReceipt) GetReceipt() *ProtoTransactionReceipt {
	if m != nil {
		return m.Receipt
	}
	return nil
}

type ProtoBloomFilter struct {
	Salt                  []uint32 `protobuf:"varint,1,rep,packed,name=salt,proto3" json:"salt,omitempty"`
	Bittable              []byte   `protobuf:"bytes,2,opt,name=bittable,proto3" json:"bittable,omitempty"`
	Saltcount             uint32   `protobuf:"varint,3,opt,name=saltcount,proto3" json:"saltcount,omitempty"`
	Tablesize             uint64   `protobuf:"varint,4,opt,name=tablesize,proto3" json:"tablesize,omitempty"`
	Projectedelementcount uint64   `protobuf:"varint,5,opt,name=projectedelementcount,proto3" json:"projectedelementcount,omitempty"`
	Insertedelementcount  uint64   `protobuf:"varint,6,opt,name=insertedelementcount,proto3" json:"insertedelementcount,omitempty"`
	Randomseed            uint64   `protobuf:"varint,7,opt,name=randomseed,proto3" json:"randomseed,omitempty"`
	Probability           float64  `protobuf:"fixed64,8,opt,name=probability,proto3" json:"probability,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ProtoBloomFilter) Reset()         { *m = ProtoBloomFilter{} }
func (m *ProtoBloomFilter) String() string { return proto.CompactTextString(m) }
func (*ProtoBloomFilter) ProtoMessage()    {}
func (*ProtoBloomFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{33}
}
func (m *ProtoBloomFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoBloomFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoBloomFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoBloomFilter.Merge(m, src)
}
func (m *ProtoBloomFilter) XXX_Size() int {
	return m.Size()
}
func (m *ProtoBloomFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoBloomFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoBloomFilter proto.InternalMessageInfo

func (m *ProtoBloomFilter) GetSalt() []uint32 {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *ProtoBloomFilter) GetBittable() []byte {
	if m != nil {
		return m.Bittable
	}
	return nil
}

func (m *ProtoBloomFilter) GetSaltcount() uint32 {
	if m != nil {
		return m.Saltcount
	}
	return 0
}

func (m *ProtoBloomFilter) GetTablesize() uint64 {
	if m != nil {
		return m.Tablesize
	}
	return 0
}

func (m *ProtoBloomFilter) GetProjectedelementcount() uint64 {
	if m != nil {
		return m.Projectedelementcount
	}
	return 0
}

func (m *ProtoBloomFilter) GetInsertedelementcount() uint64 {
	if m != nil {
		return m.Insertedelementcount
	}
	return 0
}

func (m *ProtoBloomFilter) GetRandomseed() uint64 {
	if m != nil {
		return m.Randomseed
	}
	return 0
}

func (m *ProtoBloomFilter) GetProbability() float64 {
	if m != nil {
		return m.Probability
	}
	return 0
}

type ProtoSWInfo struct {
	Zilliqamajorversion  uint32   `protobuf:"varint,1,opt,name=zilliqamajorversion,proto3" json:"zilliqamajorversion,omitempty"`
	Zilliqaminorversion  uint32   `protobuf:"varint,2,opt,name=zilliqaminorversion,proto3" json:"zilliqaminorversion,omitempty"`
	Zilliqafixversion    uint32   `protobuf:"varint,3,opt,name=zilliqafixversion,proto3" json:"zilliqafixversion,omitempty"`
	Zilliqaupgradeds     uint64   `protobuf:"varint,4,opt,name=zilliqaupgradeds,proto3" json:"zilliqaupgradeds,omitempty"`
	Zilliqacommit        uint32   `protobuf:"varint,5,opt,name=zilliqacommit,proto3" json:"zilliqacommit,omitempty"`
	Scillamajorversion   uint32   `protobuf:"varint,6,opt,name=scillamajorversion,proto3" json:"scillamajorversion,omitempty"`
	Scillaminorversion   uint32   `protobuf:"varint,7,opt,name=scillaminorversion,proto3" json:"scillaminorversion,omitempty"`
	Scillafixversion     uint32   `protobuf:"varint,8,opt,name=scillafixversion,proto3" json:"scillafixversion,omitempty"`
	Scillaupgradeds      uint64   `protobuf:"varint,9,opt,name=scillaupgradeds,proto3" json:"scillaupgradeds,omitempty"`
	Scillacommit         uint32   `protobuf:"varint,10,opt,name=scillacommit,proto3" json:"scillacommit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtoSWInfo) Reset()         { *m = ProtoSWInfo{} }
func (m *ProtoSWInfo) String() string { return proto.CompactTextString(m) }
func (*ProtoSWInfo) ProtoMessage()    {}
func (*ProtoSWInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{34}
}
func (m *ProtoSWInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoSWInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoSWInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoSWInfo.Merge(m, src)
}
func (m *ProtoSWInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProtoSWInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoSWInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoSWInfo proto.InternalMessageInfo

func (m *ProtoSWInfo) GetZilliqamajorversion() uint32 {
	if m != nil {
		return m.Zilliqamajorversion
	}
	return 0
}

func (m *ProtoSWInfo) GetZilliqaminorversion() uint32 {
	if m != nil {
		return m.Zilliqaminorversion
	}
	return 0
}

func (m *ProtoSWInfo) GetZilliqafixversion() uint32 {
	if m != nil {
		return m.Zilliqafixversion
	}
	return 0
}

func (m *ProtoSWInfo) GetZilliqaupgradeds() uint64 {
	if m != nil {
		return m.Zilliqaupgradeds
	}
	return 0
}

func (m *ProtoSWInfo) GetZilliqacommit() uint32 {
	if m != nil {
		return m.Zilliqacommit
	}
	return 0
}

func (m *ProtoSWInfo) GetScillamajorversion() uint32 {
	if m != nil {
		return m.Scillamajorversion
	}
	return 0
}

func (m *ProtoSWInfo) GetScillaminorversion() uint32 {
	if m != nil {
		return m.Scillaminorversion
	}
	return 0
}

func (m *ProtoSWInfo) GetScillafixversion() uint32 {
	if m != nil {
		return m.Scillafixversion
	}
	return 0
}

func (m *ProtoSWInfo) GetScillaupgradeds() uint64 {
	if m != nil {
		return m.Scillaupgradeds
	}
	return 0
}

func (m *ProtoSWInfo) GetScillacommit() uint32 {
	if m != nil {
		return m.Scillacommit
	}
	return 0
}

type ProtoFallbackBlockWShardingStructure struct {
	Fallbackblock        *ProtoFallbackBlock     `protobuf:"bytes,1,opt,name=fallbackblock,proto3" json:"fallbackblock,omitempty"`
	Sharding             *ProtoShardingStructure `protobuf:"bytes,2,opt,name=sharding,proto3" json:"sharding,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ProtoFallbackBlockWShardingStructure) Reset()         { *m = ProtoFallbackBlockWShardingStructure{} }
func (m *ProtoFallbackBlockWShardingStructure) String() string { return proto.CompactTextString(m) }
func (*ProtoFallbackBlockWShardingStructure) ProtoMessage()    {}
func (*ProtoFallbackBlockWShardingStructure) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{35}
}
func (m *ProtoFallbackBlockWShardingStructure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoFallbackBlockWShardingStructure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoFallbackBlockWShardingStructure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoFallbackBlockWShardingStructure.Merge(m, src)
}
func (m *ProtoFallbackBlockWShardingStructure) XXX_Size() int {
	return m.Size()
}
func (m *ProtoFallbackBlockWShardingStructure) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoFallbackBlockWShardingStructure.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoFallbackBlockWShardingStructure proto.InternalMessageInfo

func (m *ProtoFallbackBlockWShardingStructure) GetFallbackblock() *ProtoFallbackBlock {
	if m != nil {
		return m.Fallbackblock
	}
	return nil
}

func (m *ProtoFallbackBlockWShardingStructure) GetSharding() *ProtoShardingStructure {
	if m != nil {
		return m.Sharding
	}
	return nil
}

type ProtoSingleDirectoryBlock struct {
	// Types that are valid to be assigned to Directoryblock:
	//	*ProtoSingleDirectoryBlock_Dsblock
	//	*ProtoSingleDirectoryBlock_Vcblock
	//	*ProtoSingleDirectoryBlock_Fallbackblockwshard
	Directoryblock       isProtoSingleDirectoryBlock_Directoryblock `protobuf_oneof:"directoryblock"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *ProtoSingleDirectoryBlock) Reset()         { *m = ProtoSingleDirectoryBlock{} }
func (m *ProtoSingleDirectoryBlock) String() string { return proto.CompactTextString(m) }
func (*ProtoSingleDirectoryBlock) ProtoMessage()    {}
func (*ProtoSingleDirectoryBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{36}
}
func (m *ProtoSingleDirectoryBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoSingleDirectoryBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoSingleDirectoryBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoSingleDirectoryBlock.Merge(m, src)
}
func (m *ProtoSingleDirectoryBlock) XXX_Size() int {
	return m.Size()
}
func (m *ProtoSingleDirectoryBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoSingleDirectoryBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoSingleDirectoryBlock proto.InternalMessageInfo

type isProtoSingleDirectoryBlock_Directoryblock interface {
	isProtoSingleDirectoryBlock_Directoryblock()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProtoSingleDirectoryBlock_Dsblock struct {
	Dsblock *ProtoDSBlock `protobuf:"bytes,1,opt,name=dsblock,proto3,oneof" json:"dsblock,omitempty"`
}
type ProtoSingleDirectoryBlock_Vcblock struct {
	Vcblock *ProtoVCBlock `protobuf:"bytes,2,opt,name=vcblock,proto3,oneof" json:"vcblock,omitempty"`
}
type ProtoSingleDirectoryBlock_Fallbackblockwshard struct {
	Fallbackblockwshard *ProtoFallbackBlockWShardingStructure `protobuf:"bytes,3,opt,name=fallbackblockwshard,proto3,oneof" json:"fallbackblockwshard,omitempty"`
}

func (*ProtoSingleDirectoryBlock_Dsblock) isProtoSingleDirectoryBlock_Directoryblock()             {}
func (*ProtoSingleDirectoryBlock_Vcblock) isProtoSingleDirectoryBlock_Directoryblock()             {}
func (*ProtoSingleDirectoryBlock_Fallbackblockwshard) isProtoSingleDirectoryBlock_Directoryblock() {}

func (m *ProtoSingleDirectoryBlock) GetDirectoryblock() isProtoSingleDirectoryBlock_Directoryblock {
	if m != nil {
		return m.Directoryblock
	}
	return nil
}

func (m *ProtoSingleDirectoryBlock) GetDsblock() *ProtoDSBlock {
	if x, ok := m.GetDirectoryblock().(*ProtoSingleDirectoryBlock_Dsblock); ok {
		return x.Dsblock
	}
	return nil
}

func (m *ProtoSingleDirectoryBlock) GetVcblock() *ProtoVCBlock {
	if x, ok := m.GetDirectoryblock().(*ProtoSingleDirectoryBlock_Vcblock); ok {
		return x.Vcblock
	}
	return nil
}

func (m *ProtoSingleDirectoryBlock) GetFallbackblockwshard() *ProtoFallbackBlockWShardingStructure {
	if x, ok := m.GetDirectoryblock().(*ProtoSingleDirectoryBlock_Fallbackblockwshard); ok {
		return x.Fallbackblockwshard
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtoSingleDirectoryBlock) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtoSingleDirectoryBlock_Dsblock)(nil),
		(*ProtoSingleDirectoryBlock_Vcblock)(nil),
		(*ProtoSingleDirectoryBlock_Fallbackblockwshard)(nil),
	}
}

type PMHello struct {
	Data                 *PMHello_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Signature            *ByteArray    `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PMHello) Reset()         { *m = PMHello{} }
func (m *PMHello) String() string { return proto.CompactTextString(m) }
func (*PMHello) ProtoMessage()    {}
func (*PMHello) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{37}
}
func (m *PMHello) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PMHello) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PMHello) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PMHello.Merge(m, src)
}
func (m *PMHello) XXX_Size() int {
	return m.Size()
}
func (m *PMHello) XXX_DiscardUnknown() {
	xxx_messageInfo_PMHello.DiscardUnknown(m)
}

var xxx_messageInfo_PMHello proto.InternalMessageInfo

func (m *PMHello) GetData() *PMHello_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PMHello) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type PMHello_Data struct {
	Pubkey               *ByteArray `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Listenport           uint32     `protobuf:"varint,2,opt,name=listenport,proto3" json:"listenport,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PMHello_Data) Reset()         { *m = PMHello_Data{} }
func (m *PMHello_Data) String() string { return proto.CompactTextString(m) }
func (*PMHello_Data) ProtoMessage()    {}
func (*PMHello_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{37, 0}
}
func (m *PMHello_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PMHello_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PMHello_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PMHello_Data.Merge(m, src)
}
func (m *PMHello_Data) XXX_Size() int {
	return m.Size()
}
func (m *PMHello_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_PMHello_Data.DiscardUnknown(m)
}

var xxx_messageInfo_PMHello_Data proto.InternalMessageInfo

func (m *PMHello_Data) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *PMHello_Data) GetListenport() uint32 {
	if m != nil {
		return m.Listenport
	}
	return 0
}

type GovernanceData struct {
	Proposalid           uint32   `protobuf:"varint,1,opt,name=proposalid,proto3" json:"proposalid,omitempty"`
	Votevalue            uint32   `protobuf:"varint,2,opt,name=votevalue,proto3" json:"votevalue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GovernanceData) Reset()         { *m = GovernanceData{} }
func (m *GovernanceData) String() string { return proto.CompactTextString(m) }
func (*GovernanceData) ProtoMessage()    {}
func (*GovernanceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{38}
}
func (m *GovernanceData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovernanceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GovernanceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovernanceData.Merge(m, src)
}
func (m *GovernanceData) XXX_Size() int {
	return m.Size()
}
func (m *GovernanceData) XXX_DiscardUnknown() {
	xxx_messageInfo_GovernanceData.DiscardUnknown(m)
}

var xxx_messageInfo_GovernanceData proto.InternalMessageInfo

func (m *GovernanceData) GetProposalid() uint32 {
	if m != nil {
		return m.Proposalid
	}
	return 0
}

func (m *GovernanceData) GetVotevalue() uint32 {
	if m != nil {
		return m.Votevalue
	}
	return 0
}

type DSPoWSubmission struct {
	Data                 *DSPoWSubmission_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Signature            *ByteArray            `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DSPoWSubmission) Reset()         { *m = DSPoWSubmission{} }
func (m *DSPoWSubmission) String() string { return proto.CompactTextString(m) }
func (*DSPoWSubmission) ProtoMessage()    {}
func (*DSPoWSubmission) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{39}
}
func (m *DSPoWSubmission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DSPoWSubmission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DSPoWSubmission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSPoWSubmission.Merge(m, src)
}
func (m *DSPoWSubmission) XXX_Size() int {
	return m.Size()
}
func (m *DSPoWSubmission) XXX_DiscardUnknown() {
	xxx_messageInfo_DSPoWSubmission.DiscardUnknown(m)
}

var xxx_messageInfo_DSPoWSubmission proto.InternalMessageInfo

func (m *DSPoWSubmission) GetData() *DSPoWSubmission_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DSPoWSubmission) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type DSPoWSubmission_Data struct {
	Blocknumber          uint64          `protobuf:"varint,1,opt,name=blocknumber,proto3" json:"blocknumber,omitempty"`
	Difficultylevel      uint32          `protobuf:"varint,2,opt,name=difficultylevel,proto3" json:"difficultylevel,omitempty"`
	Submitterpeer        *ByteArray      `protobuf:"bytes,3,opt,name=submitterpeer,proto3" json:"submitterpeer,omitempty"`
	SubmitterpubKey      *ByteArray      `protobuf:"bytes,4,opt,name=submitterpubKey,proto3" json:"submitterpubKey,omitempty"`
	Nonce                uint64          `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Resultinghash        string          `protobuf:"bytes,6,opt,name=resultinghash,proto3" json:"resultinghash,omitempty"`
	Mixhash              string          `protobuf:"bytes,7,opt,name=mixhash,proto3" json:"mixhash,omitempty"`
	Lookupid             uint32          `protobuf:"varint,8,opt,name=lookupid,proto3" json:"lookupid,omitempty"`
	Gasprice             *ByteArray      `protobuf:"bytes,9,opt,name=gasprice,proto3" json:"gasprice,omitempty"`
	Govdata              *GovernanceData `protobuf:"bytes,10,opt,name=govdata,proto3" json:"govdata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DSPoWSubmission_Data) Reset()         { *m = DSPoWSubmission_Data{} }
func (m *DSPoWSubmission_Data) String() string { return proto.CompactTextString(m) }
func (*DSPoWSubmission_Data) ProtoMessage()    {}
func (*DSPoWSubmission_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{39, 0}
}
func (m *DSPoWSubmission_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DSPoWSubmission_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DSPoWSubmission_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSPoWSubmission_Data.Merge(m, src)
}
func (m *DSPoWSubmission_Data) XXX_Size() int {
	return m.Size()
}
func (m *DSPoWSubmission_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_DSPoWSubmission_Data.DiscardUnknown(m)
}

var xxx_messageInfo_DSPoWSubmission_Data proto.InternalMessageInfo

func (m *DSPoWSubmission_Data) GetBlocknumber() uint64 {
	if m != nil {
		return m.Blocknumber
	}
	return 0
}

func (m *DSPoWSubmission_Data) GetDifficultylevel() uint32 {
	if m != nil {
		return m.Difficultylevel
	}
	return 0
}

func (m *DSPoWSubmission_Data) GetSubmitterpeer() *ByteArray {
	if m != nil {
		return m.Submitterpeer
	}
	return nil
}

func (m *DSPoWSubmission_Data) GetSubmitterpubKey() *ByteArray {
	if m != nil {
		return m.SubmitterpubKey
	}
	return nil
}

func (m *DSPoWSubmission_Data) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *DSPoWSubmission_Data) GetResultinghash() string {
	if m != nil {
		return m.Resultinghash
	}
	return ""
}

func (m *DSPoWSubmission_Data) GetMixhash() string {
	if m != nil {
		return m.Mixhash
	}
	return ""
}

func (m *DSPoWSubmission_Data) GetLookupid() uint32 {
	if m != nil {
		return m.Lookupid
	}
	return 0
}

func (m *DSPoWSubmission_Data) GetGasprice() *ByteArray {
	if m != nil {
		return m.Gasprice
	}
	return nil
}

func (m *DSPoWSubmission_Data) GetGovdata() *GovernanceData {
	if m != nil {
		return m.Govdata
	}
	return nil
}

type DSPoWPacketSubmission struct {
	Data                 *DSPoWPacketSubmission_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                  `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                  `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DSPoWPacketSubmission) Reset()         { *m = DSPoWPacketSubmission{} }
func (m *DSPoWPacketSubmission) String() string { return proto.CompactTextString(m) }
func (*DSPoWPacketSubmission) ProtoMessage()    {}
func (*DSPoWPacketSubmission) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{40}
}
func (m *DSPoWPacketSubmission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DSPoWPacketSubmission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DSPoWPacketSubmission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSPoWPacketSubmission.Merge(m, src)
}
func (m *DSPoWPacketSubmission) XXX_Size() int {
	return m.Size()
}
func (m *DSPoWPacketSubmission) XXX_DiscardUnknown() {
	xxx_messageInfo_DSPoWPacketSubmission.DiscardUnknown(m)
}

var xxx_messageInfo_DSPoWPacketSubmission proto.InternalMessageInfo

func (m *DSPoWPacketSubmission) GetData() *DSPoWPacketSubmission_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DSPoWPacketSubmission) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *DSPoWPacketSubmission) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type DSPoWPacketSubmission_Data struct {
	DsPowSubmissions     []*DSPoWSubmission `protobuf:"bytes,1,rep,name=dsPowSubmissions,proto3" json:"dsPowSubmissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DSPoWPacketSubmission_Data) Reset()         { *m = DSPoWPacketSubmission_Data{} }
func (m *DSPoWPacketSubmission_Data) String() string { return proto.CompactTextString(m) }
func (*DSPoWPacketSubmission_Data) ProtoMessage()    {}
func (*DSPoWPacketSubmission_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{40, 0}
}
func (m *DSPoWPacketSubmission_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DSPoWPacketSubmission_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DSPoWPacketSubmission_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSPoWPacketSubmission_Data.Merge(m, src)
}
func (m *DSPoWPacketSubmission_Data) XXX_Size() int {
	return m.Size()
}
func (m *DSPoWPacketSubmission_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_DSPoWPacketSubmission_Data.DiscardUnknown(m)
}

var xxx_messageInfo_DSPoWPacketSubmission_Data proto.InternalMessageInfo

func (m *DSPoWPacketSubmission_Data) GetDsPowSubmissions() []*DSPoWSubmission {
	if m != nil {
		return m.DsPowSubmissions
	}
	return nil
}

type DSMicroBlockSubmission struct {
	Data                 *DSMicroBlockSubmission_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                   `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *DSMicroBlockSubmission) Reset()         { *m = DSMicroBlockSubmission{} }
func (m *DSMicroBlockSubmission) String() string { return proto.CompactTextString(m) }
func (*DSMicroBlockSubmission) ProtoMessage()    {}
func (*DSMicroBlockSubmission) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{41}
}
func (m *DSMicroBlockSubmission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DSMicroBlockSubmission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DSMicroBlockSubmission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSMicroBlockSubmission.Merge(m, src)
}
func (m *DSMicroBlockSubmission) XXX_Size() int {
	return m.Size()
}
func (m *DSMicroBlockSubmission) XXX_DiscardUnknown() {
	xxx_messageInfo_DSMicroBlockSubmission.DiscardUnknown(m)
}

var xxx_messageInfo_DSMicroBlockSubmission proto.InternalMessageInfo

func (m *DSMicroBlockSubmission) GetData() *DSMicroBlockSubmission_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DSMicroBlockSubmission) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *DSMicroBlockSubmission) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type DSMicroBlockSubmission_Data struct {
	Microblocktype       uint32             `protobuf:"varint,1,opt,name=microblocktype,proto3" json:"microblocktype,omitempty"`
	Epochnumber          uint64             `protobuf:"varint,2,opt,name=epochnumber,proto3" json:"epochnumber,omitempty"`
	Microblocks          []*ProtoMicroBlock `protobuf:"bytes,3,rep,name=microblocks,proto3" json:"microblocks,omitempty"`
	Statedeltas          [][]byte           `protobuf:"bytes,4,rep,name=statedeltas,proto3" json:"statedeltas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DSMicroBlockSubmission_Data) Reset()         { *m = DSMicroBlockSubmission_Data{} }
func (m *DSMicroBlockSubmission_Data) String() string { return proto.CompactTextString(m) }
func (*DSMicroBlockSubmission_Data) ProtoMessage()    {}
func (*DSMicroBlockSubmission_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{41, 0}
}
func (m *DSMicroBlockSubmission_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DSMicroBlockSubmission_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DSMicroBlockSubmission_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSMicroBlockSubmission_Data.Merge(m, src)
}
func (m *DSMicroBlockSubmission_Data) XXX_Size() int {
	return m.Size()
}
func (m *DSMicroBlockSubmission_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_DSMicroBlockSubmission_Data.DiscardUnknown(m)
}

var xxx_messageInfo_DSMicroBlockSubmission_Data proto.InternalMessageInfo

func (m *DSMicroBlockSubmission_Data) GetMicroblocktype() uint32 {
	if m != nil {
		return m.Microblocktype
	}
	return 0
}

func (m *DSMicroBlockSubmission_Data) GetEpochnumber() uint64 {
	if m != nil {
		return m.Epochnumber
	}
	return 0
}

func (m *DSMicroBlockSubmission_Data) GetMicroblocks() []*ProtoMicroBlock {
	if m != nil {
		return m.Microblocks
	}
	return nil
}

func (m *DSMicroBlockSubmission_Data) GetStatedeltas() [][]byte {
	if m != nil {
		return m.Statedeltas
	}
	return nil
}

type DSDSBlockAnnouncement struct {
	Dsblock              *ProtoDSBlock                       `protobuf:"bytes,1,opt,name=dsblock,proto3" json:"dsblock,omitempty"`
	Sharding             *ProtoShardingStructureWithPoWSolns `protobuf:"bytes,2,opt,name=sharding,proto3" json:"sharding,omitempty"`
	Dswinnerpows         []*ProtoDSWinnerPoW                 `protobuf:"bytes,3,rep,name=dswinnerpows,proto3" json:"dswinnerpows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *DSDSBlockAnnouncement) Reset()         { *m = DSDSBlockAnnouncement{} }
func (m *DSDSBlockAnnouncement) String() string { return proto.CompactTextString(m) }
func (*DSDSBlockAnnouncement) ProtoMessage()    {}
func (*DSDSBlockAnnouncement) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{42}
}
func (m *DSDSBlockAnnouncement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DSDSBlockAnnouncement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DSDSBlockAnnouncement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSDSBlockAnnouncement.Merge(m, src)
}
func (m *DSDSBlockAnnouncement) XXX_Size() int {
	return m.Size()
}
func (m *DSDSBlockAnnouncement) XXX_DiscardUnknown() {
	xxx_messageInfo_DSDSBlockAnnouncement.DiscardUnknown(m)
}

var xxx_messageInfo_DSDSBlockAnnouncement proto.InternalMessageInfo

func (m *DSDSBlockAnnouncement) GetDsblock() *ProtoDSBlock {
	if m != nil {
		return m.Dsblock
	}
	return nil
}

func (m *DSDSBlockAnnouncement) GetSharding() *ProtoShardingStructureWithPoWSolns {
	if m != nil {
		return m.Sharding
	}
	return nil
}

func (m *DSDSBlockAnnouncement) GetDswinnerpows() []*ProtoDSWinnerPoW {
	if m != nil {
		return m.Dswinnerpows
	}
	return nil
}

type DSFinalBlockAnnouncement struct {
	Txblock              *ProtoTxBlock    `protobuf:"bytes,1,opt,name=txblock,proto3" json:"txblock,omitempty"`
	Microblock           *ProtoMicroBlock `protobuf:"bytes,2,opt,name=microblock,proto3" json:"microblock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DSFinalBlockAnnouncement) Reset()         { *m = DSFinalBlockAnnouncement{} }
func (m *DSFinalBlockAnnouncement) String() string { return proto.CompactTextString(m) }
func (*DSFinalBlockAnnouncement) ProtoMessage()    {}
func (*DSFinalBlockAnnouncement) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{43}
}
func (m *DSFinalBlockAnnouncement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DSFinalBlockAnnouncement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DSFinalBlockAnnouncement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSFinalBlockAnnouncement.Merge(m, src)
}
func (m *DSFinalBlockAnnouncement) XXX_Size() int {
	return m.Size()
}
func (m *DSFinalBlockAnnouncement) XXX_DiscardUnknown() {
	xxx_messageInfo_DSFinalBlockAnnouncement.DiscardUnknown(m)
}

var xxx_messageInfo_DSFinalBlockAnnouncement proto.InternalMessageInfo

func (m *DSFinalBlockAnnouncement) GetTxblock() *ProtoTxBlock {
	if m != nil {
		return m.Txblock
	}
	return nil
}

func (m *DSFinalBlockAnnouncement) GetMicroblock() *ProtoMicroBlock {
	if m != nil {
		return m.Microblock
	}
	return nil
}

type DSVCBlockAnnouncement struct {
	Vcblock              *ByteArray `protobuf:"bytes,1,opt,name=vcblock,proto3" json:"vcblock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DSVCBlockAnnouncement) Reset()         { *m = DSVCBlockAnnouncement{} }
func (m *DSVCBlockAnnouncement) String() string { return proto.CompactTextString(m) }
func (*DSVCBlockAnnouncement) ProtoMessage()    {}
func (*DSVCBlockAnnouncement) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{44}
}
func (m *DSVCBlockAnnouncement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DSVCBlockAnnouncement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DSVCBlockAnnouncement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSVCBlockAnnouncement.Merge(m, src)
}
func (m *DSVCBlockAnnouncement) XXX_Size() int {
	return m.Size()
}
func (m *DSVCBlockAnnouncement) XXX_DiscardUnknown() {
	xxx_messageInfo_DSVCBlockAnnouncement.DiscardUnknown(m)
}

var xxx_messageInfo_DSVCBlockAnnouncement proto.InternalMessageInfo

func (m *DSVCBlockAnnouncement) GetVcblock() *ByteArray {
	if m != nil {
		return m.Vcblock
	}
	return nil
}

type DSMissingMicroBlocksErrorMsg struct {
	Mbhashes             [][]byte `protobuf:"bytes,1,rep,name=mbhashes,proto3" json:"mbhashes,omitempty"`
	Epochnum             uint64   `protobuf:"varint,2,opt,name=epochnum,proto3" json:"epochnum,omitempty"`
	Listenport           uint32   `protobuf:"varint,3,opt,name=listenport,proto3" json:"listenport,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DSMissingMicroBlocksErrorMsg) Reset()         { *m = DSMissingMicroBlocksErrorMsg{} }
func (m *DSMissingMicroBlocksErrorMsg) String() string { return proto.CompactTextString(m) }
func (*DSMissingMicroBlocksErrorMsg) ProtoMessage()    {}
func (*DSMissingMicroBlocksErrorMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{45}
}
func (m *DSMissingMicroBlocksErrorMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DSMissingMicroBlocksErrorMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DSMissingMicroBlocksErrorMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSMissingMicroBlocksErrorMsg.Merge(m, src)
}
func (m *DSMissingMicroBlocksErrorMsg) XXX_Size() int {
	return m.Size()
}
func (m *DSMissingMicroBlocksErrorMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DSMissingMicroBlocksErrorMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DSMissingMicroBlocksErrorMsg proto.InternalMessageInfo

func (m *DSMissingMicroBlocksErrorMsg) GetMbhashes() [][]byte {
	if m != nil {
		return m.Mbhashes
	}
	return nil
}

func (m *DSMissingMicroBlocksErrorMsg) GetEpochnum() uint64 {
	if m != nil {
		return m.Epochnum
	}
	return 0
}

func (m *DSMissingMicroBlocksErrorMsg) GetListenport() uint32 {
	if m != nil {
		return m.Listenport
	}
	return 0
}

type NodeDSBlock struct {
	Shardid              uint32                  `protobuf:"varint,1,opt,name=shardid,proto3" json:"shardid,omitempty"`
	Dsblock              *ProtoDSBlock           `protobuf:"bytes,2,opt,name=dsblock,proto3" json:"dsblock,omitempty"`
	Vcblocks             []*ProtoVCBlock         `protobuf:"bytes,3,rep,name=vcblocks,proto3" json:"vcblocks,omitempty"`
	Sharding             *ProtoShardingStructure `protobuf:"bytes,4,opt,name=sharding,proto3" json:"sharding,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *NodeDSBlock) Reset()         { *m = NodeDSBlock{} }
func (m *NodeDSBlock) String() string { return proto.CompactTextString(m) }
func (*NodeDSBlock) ProtoMessage()    {}
func (*NodeDSBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{46}
}
func (m *NodeDSBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeDSBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeDSBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeDSBlock.Merge(m, src)
}
func (m *NodeDSBlock) XXX_Size() int {
	return m.Size()
}
func (m *NodeDSBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeDSBlock.DiscardUnknown(m)
}

var xxx_messageInfo_NodeDSBlock proto.InternalMessageInfo

func (m *NodeDSBlock) GetShardid() uint32 {
	if m != nil {
		return m.Shardid
	}
	return 0
}

func (m *NodeDSBlock) GetDsblock() *ProtoDSBlock {
	if m != nil {
		return m.Dsblock
	}
	return nil
}

func (m *NodeDSBlock) GetVcblocks() []*ProtoVCBlock {
	if m != nil {
		return m.Vcblocks
	}
	return nil
}

func (m *NodeDSBlock) GetSharding() *ProtoShardingStructure {
	if m != nil {
		return m.Sharding
	}
	return nil
}

type NodeFinalBlock struct {
	Dsblocknumber        uint64        `protobuf:"varint,1,opt,name=dsblocknumber,proto3" json:"dsblocknumber,omitempty"`
	Consensusid          uint32        `protobuf:"varint,2,opt,name=consensusid,proto3" json:"consensusid,omitempty"`
	Txblock              *ProtoTxBlock `protobuf:"bytes,3,opt,name=txblock,proto3" json:"txblock,omitempty"`
	Statedelta           []byte        `protobuf:"bytes,4,opt,name=statedelta,proto3" json:"statedelta,omitempty"`
	Shardids             []uint32      `protobuf:"varint,5,rep,packed,name=shardids,proto3" json:"shardids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NodeFinalBlock) Reset()         { *m = NodeFinalBlock{} }
func (m *NodeFinalBlock) String() string { return proto.CompactTextString(m) }
func (*NodeFinalBlock) ProtoMessage()    {}
func (*NodeFinalBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{47}
}
func (m *NodeFinalBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeFinalBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeFinalBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeFinalBlock.Merge(m, src)
}
func (m *NodeFinalBlock) XXX_Size() int {
	return m.Size()
}
func (m *NodeFinalBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeFinalBlock.DiscardUnknown(m)
}

var xxx_messageInfo_NodeFinalBlock proto.InternalMessageInfo

func (m *NodeFinalBlock) GetDsblocknumber() uint64 {
	if m != nil {
		return m.Dsblocknumber
	}
	return 0
}

func (m *NodeFinalBlock) GetConsensusid() uint32 {
	if m != nil {
		return m.Consensusid
	}
	return 0
}

func (m *NodeFinalBlock) GetTxblock() *ProtoTxBlock {
	if m != nil {
		return m.Txblock
	}
	return nil
}

func (m *NodeFinalBlock) GetStatedelta() []byte {
	if m != nil {
		return m.Statedelta
	}
	return nil
}

func (m *NodeFinalBlock) GetShardids() []uint32 {
	if m != nil {
		return m.Shardids
	}
	return nil
}

type NodeVCFinalBlock struct {
	Dsblocknumber        uint64          `protobuf:"varint,1,opt,name=dsblocknumber,proto3" json:"dsblocknumber,omitempty"`
	Consensusid          uint32          `protobuf:"varint,2,opt,name=consensusid,proto3" json:"consensusid,omitempty"`
	Txblock              *ProtoTxBlock   `protobuf:"bytes,3,opt,name=txblock,proto3" json:"txblock,omitempty"`
	Statedelta           []byte          `protobuf:"bytes,4,opt,name=statedelta,proto3" json:"statedelta,omitempty"`
	Vcblocks             []*ProtoVCBlock `protobuf:"bytes,5,rep,name=vcblocks,proto3" json:"vcblocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NodeVCFinalBlock) Reset()         { *m = NodeVCFinalBlock{} }
func (m *NodeVCFinalBlock) String() string { return proto.CompactTextString(m) }
func (*NodeVCFinalBlock) ProtoMessage()    {}
func (*NodeVCFinalBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{48}
}
func (m *NodeVCFinalBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeVCFinalBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeVCFinalBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeVCFinalBlock.Merge(m, src)
}
func (m *NodeVCFinalBlock) XXX_Size() int {
	return m.Size()
}
func (m *NodeVCFinalBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeVCFinalBlock.DiscardUnknown(m)
}

var xxx_messageInfo_NodeVCFinalBlock proto.InternalMessageInfo

func (m *NodeVCFinalBlock) GetDsblocknumber() uint64 {
	if m != nil {
		return m.Dsblocknumber
	}
	return 0
}

func (m *NodeVCFinalBlock) GetConsensusid() uint32 {
	if m != nil {
		return m.Consensusid
	}
	return 0
}

func (m *NodeVCFinalBlock) GetTxblock() *ProtoTxBlock {
	if m != nil {
		return m.Txblock
	}
	return nil
}

func (m *NodeVCFinalBlock) GetStatedelta() []byte {
	if m != nil {
		return m.Statedelta
	}
	return nil
}

func (m *NodeVCFinalBlock) GetVcblocks() []*ProtoVCBlock {
	if m != nil {
		return m.Vcblocks
	}
	return nil
}

type NodeMBnForwardTransaction struct {
	Microblock           *ProtoMicroBlock `protobuf:"bytes,1,opt,name=microblock,proto3" json:"microblock,omitempty"`
	Txnswithreceipt      []*ByteArray     `protobuf:"bytes,2,rep,name=txnswithreceipt,proto3" json:"txnswithreceipt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NodeMBnForwardTransaction) Reset()         { *m = NodeMBnForwardTransaction{} }
func (m *NodeMBnForwardTransaction) String() string { return proto.CompactTextString(m) }
func (*NodeMBnForwardTransaction) ProtoMessage()    {}
func (*NodeMBnForwardTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{49}
}
func (m *NodeMBnForwardTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeMBnForwardTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeMBnForwardTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMBnForwardTransaction.Merge(m, src)
}
func (m *NodeMBnForwardTransaction) XXX_Size() int {
	return m.Size()
}
func (m *NodeMBnForwardTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMBnForwardTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMBnForwardTransaction proto.InternalMessageInfo

func (m *NodeMBnForwardTransaction) GetMicroblock() *ProtoMicroBlock {
	if m != nil {
		return m.Microblock
	}
	return nil
}

func (m *NodeMBnForwardTransaction) GetTxnswithreceipt() []*ByteArray {
	if m != nil {
		return m.Txnswithreceipt
	}
	return nil
}

type NodePendingTxn struct {
	Data                 *NodePendingTxn_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Signature            *ByteArray           `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NodePendingTxn) Reset()         { *m = NodePendingTxn{} }
func (m *NodePendingTxn) String() string { return proto.CompactTextString(m) }
func (*NodePendingTxn) ProtoMessage()    {}
func (*NodePendingTxn) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{50}
}
func (m *NodePendingTxn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodePendingTxn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodePendingTxn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodePendingTxn.Merge(m, src)
}
func (m *NodePendingTxn) XXX_Size() int {
	return m.Size()
}
func (m *NodePendingTxn) XXX_DiscardUnknown() {
	xxx_messageInfo_NodePendingTxn.DiscardUnknown(m)
}

var xxx_messageInfo_NodePendingTxn proto.InternalMessageInfo

func (m *NodePendingTxn) GetData() *NodePendingTxn_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *NodePendingTxn) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type NodePendingTxn_Data struct {
	Hashcodepair         []*NodePendingTxn_Data_Pair `protobuf:"bytes,1,rep,name=hashcodepair,proto3" json:"hashcodepair,omitempty"`
	Epochnumber          uint64                      `protobuf:"varint,2,opt,name=epochnumber,proto3" json:"epochnumber,omitempty"`
	Shardid              uint32                      `protobuf:"varint,3,opt,name=shardid,proto3" json:"shardid,omitempty"`
	Pubkey               *ByteArray                  `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NodePendingTxn_Data) Reset()         { *m = NodePendingTxn_Data{} }
func (m *NodePendingTxn_Data) String() string { return proto.CompactTextString(m) }
func (*NodePendingTxn_Data) ProtoMessage()    {}
func (*NodePendingTxn_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{50, 0}
}
func (m *NodePendingTxn_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodePendingTxn_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodePendingTxn_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodePendingTxn_Data.Merge(m, src)
}
func (m *NodePendingTxn_Data) XXX_Size() int {
	return m.Size()
}
func (m *NodePendingTxn_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_NodePendingTxn_Data.DiscardUnknown(m)
}

var xxx_messageInfo_NodePendingTxn_Data proto.InternalMessageInfo

func (m *NodePendingTxn_Data) GetHashcodepair() []*NodePendingTxn_Data_Pair {
	if m != nil {
		return m.Hashcodepair
	}
	return nil
}

func (m *NodePendingTxn_Data) GetEpochnumber() uint64 {
	if m != nil {
		return m.Epochnumber
	}
	return 0
}

func (m *NodePendingTxn_Data) GetShardid() uint32 {
	if m != nil {
		return m.Shardid
	}
	return 0
}

func (m *NodePendingTxn_Data) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

type NodePendingTxn_Data_Pair struct {
	Txnhash              []byte   `protobuf:"bytes,1,opt,name=txnhash,proto3" json:"txnhash,omitempty"`
	Code                 uint32   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodePendingTxn_Data_Pair) Reset()         { *m = NodePendingTxn_Data_Pair{} }
func (m *NodePendingTxn_Data_Pair) String() string { return proto.CompactTextString(m) }
func (*NodePendingTxn_Data_Pair) ProtoMessage()    {}
func (*NodePendingTxn_Data_Pair) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{50, 0, 0}
}
func (m *NodePendingTxn_Data_Pair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodePendingTxn_Data_Pair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodePendingTxn_Data_Pair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodePendingTxn_Data_Pair.Merge(m, src)
}
func (m *NodePendingTxn_Data_Pair) XXX_Size() int {
	return m.Size()
}
func (m *NodePendingTxn_Data_Pair) XXX_DiscardUnknown() {
	xxx_messageInfo_NodePendingTxn_Data_Pair.DiscardUnknown(m)
}

var xxx_messageInfo_NodePendingTxn_Data_Pair proto.InternalMessageInfo

func (m *NodePendingTxn_Data_Pair) GetTxnhash() []byte {
	if m != nil {
		return m.Txnhash
	}
	return nil
}

func (m *NodePendingTxn_Data_Pair) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type NodeVCBlock struct {
	Vcblock              *ProtoVCBlock `protobuf:"bytes,1,opt,name=vcblock,proto3" json:"vcblock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NodeVCBlock) Reset()         { *m = NodeVCBlock{} }
func (m *NodeVCBlock) String() string { return proto.CompactTextString(m) }
func (*NodeVCBlock) ProtoMessage()    {}
func (*NodeVCBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{51}
}
func (m *NodeVCBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeVCBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeVCBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeVCBlock.Merge(m, src)
}
func (m *NodeVCBlock) XXX_Size() int {
	return m.Size()
}
func (m *NodeVCBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeVCBlock.DiscardUnknown(m)
}

var xxx_messageInfo_NodeVCBlock proto.InternalMessageInfo

func (m *NodeVCBlock) GetVcblock() *ProtoVCBlock {
	if m != nil {
		return m.Vcblock
	}
	return nil
}

type NodeForwardTxnBlock struct {
	Epochnumber          uint64              `protobuf:"varint,1,opt,name=epochnumber,proto3" json:"epochnumber,omitempty"`
	Dsblocknum           uint64              `protobuf:"varint,2,opt,name=dsblocknum,proto3" json:"dsblocknum,omitempty"`
	Shardid              uint32              `protobuf:"varint,3,opt,name=shardid,proto3" json:"shardid,omitempty"`
	Pubkey               *ByteArray          `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Transactions         []*ProtoTransaction `protobuf:"bytes,5,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Signature            *ByteArray          `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NodeForwardTxnBlock) Reset()         { *m = NodeForwardTxnBlock{} }
func (m *NodeForwardTxnBlock) String() string { return proto.CompactTextString(m) }
func (*NodeForwardTxnBlock) ProtoMessage()    {}
func (*NodeForwardTxnBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{52}
}
func (m *NodeForwardTxnBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeForwardTxnBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeForwardTxnBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeForwardTxnBlock.Merge(m, src)
}
func (m *NodeForwardTxnBlock) XXX_Size() int {
	return m.Size()
}
func (m *NodeForwardTxnBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeForwardTxnBlock.DiscardUnknown(m)
}

var xxx_messageInfo_NodeForwardTxnBlock proto.InternalMessageInfo

func (m *NodeForwardTxnBlock) GetEpochnumber() uint64 {
	if m != nil {
		return m.Epochnumber
	}
	return 0
}

func (m *NodeForwardTxnBlock) GetDsblocknum() uint64 {
	if m != nil {
		return m.Dsblocknum
	}
	return 0
}

func (m *NodeForwardTxnBlock) GetShardid() uint32 {
	if m != nil {
		return m.Shardid
	}
	return 0
}

func (m *NodeForwardTxnBlock) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *NodeForwardTxnBlock) GetTransactions() []*ProtoTransaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *NodeForwardTxnBlock) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type NodeMicroBlockAnnouncement struct {
	Microblock           *ProtoMicroBlock `protobuf:"bytes,1,opt,name=microblock,proto3" json:"microblock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NodeMicroBlockAnnouncement) Reset()         { *m = NodeMicroBlockAnnouncement{} }
func (m *NodeMicroBlockAnnouncement) String() string { return proto.CompactTextString(m) }
func (*NodeMicroBlockAnnouncement) ProtoMessage()    {}
func (*NodeMicroBlockAnnouncement) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{53}
}
func (m *NodeMicroBlockAnnouncement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeMicroBlockAnnouncement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeMicroBlockAnnouncement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMicroBlockAnnouncement.Merge(m, src)
}
func (m *NodeMicroBlockAnnouncement) XXX_Size() int {
	return m.Size()
}
func (m *NodeMicroBlockAnnouncement) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMicroBlockAnnouncement.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMicroBlockAnnouncement proto.InternalMessageInfo

func (m *NodeMicroBlockAnnouncement) GetMicroblock() *ProtoMicroBlock {
	if m != nil {
		return m.Microblock
	}
	return nil
}

type NodeFallbackBlockAnnouncement struct {
	Fallbackblock        *ByteArray `protobuf:"bytes,1,opt,name=fallbackblock,proto3" json:"fallbackblock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *NodeFallbackBlockAnnouncement) Reset()         { *m = NodeFallbackBlockAnnouncement{} }
func (m *NodeFallbackBlockAnnouncement) String() string { return proto.CompactTextString(m) }
func (*NodeFallbackBlockAnnouncement) ProtoMessage()    {}
func (*NodeFallbackBlockAnnouncement) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{54}
}
func (m *NodeFallbackBlockAnnouncement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeFallbackBlockAnnouncement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeFallbackBlockAnnouncement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeFallbackBlockAnnouncement.Merge(m, src)
}
func (m *NodeFallbackBlockAnnouncement) XXX_Size() int {
	return m.Size()
}
func (m *NodeFallbackBlockAnnouncement) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeFallbackBlockAnnouncement.DiscardUnknown(m)
}

var xxx_messageInfo_NodeFallbackBlockAnnouncement proto.InternalMessageInfo

func (m *NodeFallbackBlockAnnouncement) GetFallbackblock() *ByteArray {
	if m != nil {
		return m.Fallbackblock
	}
	return nil
}

type NodeFallbackBlock struct {
	Fallbackblock        *ProtoFallbackBlock `protobuf:"bytes,1,opt,name=fallbackblock,proto3" json:"fallbackblock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NodeFallbackBlock) Reset()         { *m = NodeFallbackBlock{} }
func (m *NodeFallbackBlock) String() string { return proto.CompactTextString(m) }
func (*NodeFallbackBlock) ProtoMessage()    {}
func (*NodeFallbackBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{55}
}
func (m *NodeFallbackBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeFallbackBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeFallbackBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeFallbackBlock.Merge(m, src)
}
func (m *NodeFallbackBlock) XXX_Size() int {
	return m.Size()
}
func (m *NodeFallbackBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeFallbackBlock.DiscardUnknown(m)
}

var xxx_messageInfo_NodeFallbackBlock proto.InternalMessageInfo

func (m *NodeFallbackBlock) GetFallbackblock() *ProtoFallbackBlock {
	if m != nil {
		return m.Fallbackblock
	}
	return nil
}

type NodeMissingTxnsErrorMsg struct {
	Txnhashes            [][]byte `protobuf:"bytes,1,rep,name=txnhashes,proto3" json:"txnhashes,omitempty"`
	Epochnum             uint64   `protobuf:"varint,2,opt,name=epochnum,proto3" json:"epochnum,omitempty"`
	Listenport           uint32   `protobuf:"varint,3,opt,name=listenport,proto3" json:"listenport,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeMissingTxnsErrorMsg) Reset()         { *m = NodeMissingTxnsErrorMsg{} }
func (m *NodeMissingTxnsErrorMsg) String() string { return proto.CompactTextString(m) }
func (*NodeMissingTxnsErrorMsg) ProtoMessage()    {}
func (*NodeMissingTxnsErrorMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{56}
}
func (m *NodeMissingTxnsErrorMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeMissingTxnsErrorMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeMissingTxnsErrorMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMissingTxnsErrorMsg.Merge(m, src)
}
func (m *NodeMissingTxnsErrorMsg) XXX_Size() int {
	return m.Size()
}
func (m *NodeMissingTxnsErrorMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMissingTxnsErrorMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMissingTxnsErrorMsg proto.InternalMessageInfo

func (m *NodeMissingTxnsErrorMsg) GetTxnhashes() [][]byte {
	if m != nil {
		return m.Txnhashes
	}
	return nil
}

func (m *NodeMissingTxnsErrorMsg) GetEpochnum() uint64 {
	if m != nil {
		return m.Epochnum
	}
	return 0
}

func (m *NodeMissingTxnsErrorMsg) GetListenport() uint32 {
	if m != nil {
		return m.Listenport
	}
	return 0
}

type LookupGetSeedPeers struct {
	Listenport           uint32   `protobuf:"varint,1,opt,name=listenport,proto3" json:"listenport,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupGetSeedPeers) Reset()         { *m = LookupGetSeedPeers{} }
func (m *LookupGetSeedPeers) String() string { return proto.CompactTextString(m) }
func (*LookupGetSeedPeers) ProtoMessage()    {}
func (*LookupGetSeedPeers) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{57}
}
func (m *LookupGetSeedPeers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetSeedPeers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetSeedPeers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetSeedPeers.Merge(m, src)
}
func (m *LookupGetSeedPeers) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetSeedPeers) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetSeedPeers.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetSeedPeers proto.InternalMessageInfo

func (m *LookupGetSeedPeers) GetListenport() uint32 {
	if m != nil {
		return m.Listenport
	}
	return 0
}

type LookupSetSeedPeers struct {
	Candidateseeds       []*ByteArray `protobuf:"bytes,1,rep,name=candidateseeds,proto3" json:"candidateseeds,omitempty"`
	Pubkey               *ByteArray   `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *LookupSetSeedPeers) Reset()         { *m = LookupSetSeedPeers{} }
func (m *LookupSetSeedPeers) String() string { return proto.CompactTextString(m) }
func (*LookupSetSeedPeers) ProtoMessage()    {}
func (*LookupSetSeedPeers) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{58}
}
func (m *LookupSetSeedPeers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetSeedPeers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetSeedPeers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetSeedPeers.Merge(m, src)
}
func (m *LookupSetSeedPeers) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetSeedPeers) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetSeedPeers.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetSeedPeers proto.InternalMessageInfo

func (m *LookupSetSeedPeers) GetCandidateseeds() []*ByteArray {
	if m != nil {
		return m.Candidateseeds
	}
	return nil
}

func (m *LookupSetSeedPeers) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupSetSeedPeers) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

// From normal node to lookup nodes.
type LookupGetDSInfoFromSeed struct {
	Listenport           uint32   `protobuf:"varint,1,opt,name=listenport,proto3" json:"listenport,omitempty"`
	Initialds            bool     `protobuf:"varint,2,opt,name=initialds,proto3" json:"initialds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupGetDSInfoFromSeed) Reset()         { *m = LookupGetDSInfoFromSeed{} }
func (m *LookupGetDSInfoFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupGetDSInfoFromSeed) ProtoMessage()    {}
func (*LookupGetDSInfoFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{59}
}
func (m *LookupGetDSInfoFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetDSInfoFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetDSInfoFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetDSInfoFromSeed.Merge(m, src)
}
func (m *LookupGetDSInfoFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetDSInfoFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetDSInfoFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetDSInfoFromSeed proto.InternalMessageInfo

func (m *LookupGetDSInfoFromSeed) GetListenport() uint32 {
	if m != nil {
		return m.Listenport
	}
	return 0
}

func (m *LookupGetDSInfoFromSeed) GetInitialds() bool {
	if m != nil {
		return m.Initialds
	}
	return false
}

// From DS leader to lookup nodes and from lookup nodes to normal nodes.
type LookupSetDSInfoFromSeed struct {
	Dscommittee          *ProtoDSCommittee `protobuf:"bytes,1,opt,name=dscommittee,proto3" json:"dscommittee,omitempty"`
	Pubkey               *ByteArray        `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray        `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Initialds            bool              `protobuf:"varint,4,opt,name=initialds,proto3" json:"initialds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LookupSetDSInfoFromSeed) Reset()         { *m = LookupSetDSInfoFromSeed{} }
func (m *LookupSetDSInfoFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupSetDSInfoFromSeed) ProtoMessage()    {}
func (*LookupSetDSInfoFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{60}
}
func (m *LookupSetDSInfoFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetDSInfoFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetDSInfoFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetDSInfoFromSeed.Merge(m, src)
}
func (m *LookupSetDSInfoFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetDSInfoFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetDSInfoFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetDSInfoFromSeed proto.InternalMessageInfo

func (m *LookupSetDSInfoFromSeed) GetDscommittee() *ProtoDSCommittee {
	if m != nil {
		return m.Dscommittee
	}
	return nil
}

func (m *LookupSetDSInfoFromSeed) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupSetDSInfoFromSeed) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *LookupSetDSInfoFromSeed) GetInitialds() bool {
	if m != nil {
		return m.Initialds
	}
	return false
}

// From new join lookup node or new join normal node to existing lookup node.
type LookupGetDSBlockFromSeed struct {
	Lowblocknum          uint64   `protobuf:"varint,1,opt,name=lowblocknum,proto3" json:"lowblocknum,omitempty"`
	Highblocknum         uint64   `protobuf:"varint,2,opt,name=highblocknum,proto3" json:"highblocknum,omitempty"`
	Listenport           uint32   `protobuf:"varint,3,opt,name=listenport,proto3" json:"listenport,omitempty"`
	Includeminerinfo     bool     `protobuf:"varint,4,opt,name=includeminerinfo,proto3" json:"includeminerinfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupGetDSBlockFromSeed) Reset()         { *m = LookupGetDSBlockFromSeed{} }
func (m *LookupGetDSBlockFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupGetDSBlockFromSeed) ProtoMessage()    {}
func (*LookupGetDSBlockFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{61}
}
func (m *LookupGetDSBlockFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetDSBlockFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetDSBlockFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetDSBlockFromSeed.Merge(m, src)
}
func (m *LookupGetDSBlockFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetDSBlockFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetDSBlockFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetDSBlockFromSeed proto.InternalMessageInfo

func (m *LookupGetDSBlockFromSeed) GetLowblocknum() uint64 {
	if m != nil {
		return m.Lowblocknum
	}
	return 0
}

func (m *LookupGetDSBlockFromSeed) GetHighblocknum() uint64 {
	if m != nil {
		return m.Highblocknum
	}
	return 0
}

func (m *LookupGetDSBlockFromSeed) GetListenport() uint32 {
	if m != nil {
		return m.Listenport
	}
	return 0
}

func (m *LookupGetDSBlockFromSeed) GetIncludeminerinfo() bool {
	if m != nil {
		return m.Includeminerinfo
	}
	return false
}

// From lookup nodes to new join lookup node or new join normal node.
type LookupSetDSBlockFromSeed struct {
	Data                 *LookupSetDSBlockFromSeed_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                     `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                     `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *LookupSetDSBlockFromSeed) Reset()         { *m = LookupSetDSBlockFromSeed{} }
func (m *LookupSetDSBlockFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupSetDSBlockFromSeed) ProtoMessage()    {}
func (*LookupSetDSBlockFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{62}
}
func (m *LookupSetDSBlockFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetDSBlockFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetDSBlockFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetDSBlockFromSeed.Merge(m, src)
}
func (m *LookupSetDSBlockFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetDSBlockFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetDSBlockFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetDSBlockFromSeed proto.InternalMessageInfo

func (m *LookupSetDSBlockFromSeed) GetData() *LookupSetDSBlockFromSeed_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupSetDSBlockFromSeed) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupSetDSBlockFromSeed) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupSetDSBlockFromSeed_Data struct {
	Lowblocknum          uint64          `protobuf:"varint,1,opt,name=lowblocknum,proto3" json:"lowblocknum,omitempty"`
	Highblocknum         uint64          `protobuf:"varint,2,opt,name=highblocknum,proto3" json:"highblocknum,omitempty"`
	Dsblocks             []*ProtoDSBlock `protobuf:"bytes,3,rep,name=dsblocks,proto3" json:"dsblocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *LookupSetDSBlockFromSeed_Data) Reset()         { *m = LookupSetDSBlockFromSeed_Data{} }
func (m *LookupSetDSBlockFromSeed_Data) String() string { return proto.CompactTextString(m) }
func (*LookupSetDSBlockFromSeed_Data) ProtoMessage()    {}
func (*LookupSetDSBlockFromSeed_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{62, 0}
}
func (m *LookupSetDSBlockFromSeed_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetDSBlockFromSeed_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetDSBlockFromSeed_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetDSBlockFromSeed_Data.Merge(m, src)
}
func (m *LookupSetDSBlockFromSeed_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetDSBlockFromSeed_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetDSBlockFromSeed_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetDSBlockFromSeed_Data proto.InternalMessageInfo

func (m *LookupSetDSBlockFromSeed_Data) GetLowblocknum() uint64 {
	if m != nil {
		return m.Lowblocknum
	}
	return 0
}

func (m *LookupSetDSBlockFromSeed_Data) GetHighblocknum() uint64 {
	if m != nil {
		return m.Highblocknum
	}
	return 0
}

func (m *LookupSetDSBlockFromSeed_Data) GetDsblocks() []*ProtoDSBlock {
	if m != nil {
		return m.Dsblocks
	}
	return nil
}

// From lookup nodes to new join lookup node.
type LookupSetMinerInfoFromSeed struct {
	Data                 *LookupSetMinerInfoFromSeed_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                       `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                       `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *LookupSetMinerInfoFromSeed) Reset()         { *m = LookupSetMinerInfoFromSeed{} }
func (m *LookupSetMinerInfoFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupSetMinerInfoFromSeed) ProtoMessage()    {}
func (*LookupSetMinerInfoFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{63}
}
func (m *LookupSetMinerInfoFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetMinerInfoFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetMinerInfoFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetMinerInfoFromSeed.Merge(m, src)
}
func (m *LookupSetMinerInfoFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetMinerInfoFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetMinerInfoFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetMinerInfoFromSeed proto.InternalMessageInfo

func (m *LookupSetMinerInfoFromSeed) GetData() *LookupSetMinerInfoFromSeed_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupSetMinerInfoFromSeed) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupSetMinerInfoFromSeed) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupSetMinerInfoFromSeed_MinerInfo struct {
	Minerinfodscomm      *ProtoMinerInfoDSComm `protobuf:"bytes,1,opt,name=minerinfodscomm,proto3" json:"minerinfodscomm,omitempty"`
	Minerinfoshards      *ProtoMinerInfoShards `protobuf:"bytes,2,opt,name=minerinfoshards,proto3" json:"minerinfoshards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *LookupSetMinerInfoFromSeed_MinerInfo) Reset()         { *m = LookupSetMinerInfoFromSeed_MinerInfo{} }
func (m *LookupSetMinerInfoFromSeed_MinerInfo) String() string { return proto.CompactTextString(m) }
func (*LookupSetMinerInfoFromSeed_MinerInfo) ProtoMessage()    {}
func (*LookupSetMinerInfoFromSeed_MinerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{63, 0}
}
func (m *LookupSetMinerInfoFromSeed_MinerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetMinerInfoFromSeed_MinerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetMinerInfoFromSeed_MinerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetMinerInfoFromSeed_MinerInfo.Merge(m, src)
}
func (m *LookupSetMinerInfoFromSeed_MinerInfo) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetMinerInfoFromSeed_MinerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetMinerInfoFromSeed_MinerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetMinerInfoFromSeed_MinerInfo proto.InternalMessageInfo

func (m *LookupSetMinerInfoFromSeed_MinerInfo) GetMinerinfodscomm() *ProtoMinerInfoDSComm {
	if m != nil {
		return m.Minerinfodscomm
	}
	return nil
}

func (m *LookupSetMinerInfoFromSeed_MinerInfo) GetMinerinfoshards() *ProtoMinerInfoShards {
	if m != nil {
		return m.Minerinfoshards
	}
	return nil
}

type LookupSetMinerInfoFromSeed_Data struct {
	Minerinfoperds       map[uint64]*LookupSetMinerInfoFromSeed_MinerInfo `protobuf:"bytes,1,rep,name=minerinfoperds,proto3" json:"minerinfoperds,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *LookupSetMinerInfoFromSeed_Data) Reset()         { *m = LookupSetMinerInfoFromSeed_Data{} }
func (m *LookupSetMinerInfoFromSeed_Data) String() string { return proto.CompactTextString(m) }
func (*LookupSetMinerInfoFromSeed_Data) ProtoMessage()    {}
func (*LookupSetMinerInfoFromSeed_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{63, 1}
}
func (m *LookupSetMinerInfoFromSeed_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetMinerInfoFromSeed_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetMinerInfoFromSeed_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetMinerInfoFromSeed_Data.Merge(m, src)
}
func (m *LookupSetMinerInfoFromSeed_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetMinerInfoFromSeed_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetMinerInfoFromSeed_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetMinerInfoFromSeed_Data proto.InternalMessageInfo

func (m *LookupSetMinerInfoFromSeed_Data) GetMinerinfoperds() map[uint64]*LookupSetMinerInfoFromSeed_MinerInfo {
	if m != nil {
		return m.Minerinfoperds
	}
	return nil
}

// From new join lookup node or new join normal node to existing lookup node.
type LookupGetTxBlockFromSeed struct {
	Lowblocknum          uint64   `protobuf:"varint,1,opt,name=lowblocknum,proto3" json:"lowblocknum,omitempty"`
	Highblocknum         uint64   `protobuf:"varint,2,opt,name=highblocknum,proto3" json:"highblocknum,omitempty"`
	Listenport           uint32   `protobuf:"varint,3,opt,name=listenport,proto3" json:"listenport,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupGetTxBlockFromSeed) Reset()         { *m = LookupGetTxBlockFromSeed{} }
func (m *LookupGetTxBlockFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupGetTxBlockFromSeed) ProtoMessage()    {}
func (*LookupGetTxBlockFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{64}
}
func (m *LookupGetTxBlockFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetTxBlockFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetTxBlockFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetTxBlockFromSeed.Merge(m, src)
}
func (m *LookupGetTxBlockFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetTxBlockFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetTxBlockFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetTxBlockFromSeed proto.InternalMessageInfo

func (m *LookupGetTxBlockFromSeed) GetLowblocknum() uint64 {
	if m != nil {
		return m.Lowblocknum
	}
	return 0
}

func (m *LookupGetTxBlockFromSeed) GetHighblocknum() uint64 {
	if m != nil {
		return m.Highblocknum
	}
	return 0
}

func (m *LookupGetTxBlockFromSeed) GetListenport() uint32 {
	if m != nil {
		return m.Listenport
	}
	return 0
}

// From lookup nodes to new join lookup node or new join normal node.
type LookupSetTxBlockFromSeed struct {
	Data                 *LookupSetTxBlockFromSeed_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                     `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                     `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *LookupSetTxBlockFromSeed) Reset()         { *m = LookupSetTxBlockFromSeed{} }
func (m *LookupSetTxBlockFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupSetTxBlockFromSeed) ProtoMessage()    {}
func (*LookupSetTxBlockFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{65}
}
func (m *LookupSetTxBlockFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetTxBlockFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetTxBlockFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetTxBlockFromSeed.Merge(m, src)
}
func (m *LookupSetTxBlockFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetTxBlockFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetTxBlockFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetTxBlockFromSeed proto.InternalMessageInfo

func (m *LookupSetTxBlockFromSeed) GetData() *LookupSetTxBlockFromSeed_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupSetTxBlockFromSeed) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupSetTxBlockFromSeed) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupSetTxBlockFromSeed_Data struct {
	Lowblocknum          uint64          `protobuf:"varint,1,opt,name=lowblocknum,proto3" json:"lowblocknum,omitempty"`
	Highblocknum         uint64          `protobuf:"varint,2,opt,name=highblocknum,proto3" json:"highblocknum,omitempty"`
	Txblocks             []*ProtoTxBlock `protobuf:"bytes,3,rep,name=txblocks,proto3" json:"txblocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *LookupSetTxBlockFromSeed_Data) Reset()         { *m = LookupSetTxBlockFromSeed_Data{} }
func (m *LookupSetTxBlockFromSeed_Data) String() string { return proto.CompactTextString(m) }
func (*LookupSetTxBlockFromSeed_Data) ProtoMessage()    {}
func (*LookupSetTxBlockFromSeed_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{65, 0}
}
func (m *LookupSetTxBlockFromSeed_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetTxBlockFromSeed_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetTxBlockFromSeed_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetTxBlockFromSeed_Data.Merge(m, src)
}
func (m *LookupSetTxBlockFromSeed_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetTxBlockFromSeed_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetTxBlockFromSeed_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetTxBlockFromSeed_Data proto.InternalMessageInfo

func (m *LookupSetTxBlockFromSeed_Data) GetLowblocknum() uint64 {
	if m != nil {
		return m.Lowblocknum
	}
	return 0
}

func (m *LookupSetTxBlockFromSeed_Data) GetHighblocknum() uint64 {
	if m != nil {
		return m.Highblocknum
	}
	return 0
}

func (m *LookupSetTxBlockFromSeed_Data) GetTxblocks() []*ProtoTxBlock {
	if m != nil {
		return m.Txblocks
	}
	return nil
}

type LookupGetStateDeltaFromSeed struct {
	Blocknum             uint64   `protobuf:"varint,1,opt,name=blocknum,proto3" json:"blocknum,omitempty"`
	Listenport           uint32   `protobuf:"varint,2,opt,name=listenport,proto3" json:"listenport,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupGetStateDeltaFromSeed) Reset()         { *m = LookupGetStateDeltaFromSeed{} }
func (m *LookupGetStateDeltaFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupGetStateDeltaFromSeed) ProtoMessage()    {}
func (*LookupGetStateDeltaFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{66}
}
func (m *LookupGetStateDeltaFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetStateDeltaFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetStateDeltaFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetStateDeltaFromSeed.Merge(m, src)
}
func (m *LookupGetStateDeltaFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetStateDeltaFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetStateDeltaFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetStateDeltaFromSeed proto.InternalMessageInfo

func (m *LookupGetStateDeltaFromSeed) GetBlocknum() uint64 {
	if m != nil {
		return m.Blocknum
	}
	return 0
}

func (m *LookupGetStateDeltaFromSeed) GetListenport() uint32 {
	if m != nil {
		return m.Listenport
	}
	return 0
}

type LookupGetStateDeltasFromSeed struct {
	Lowblocknum          uint64   `protobuf:"varint,1,opt,name=lowblocknum,proto3" json:"lowblocknum,omitempty"`
	Highblocknum         uint64   `protobuf:"varint,2,opt,name=highblocknum,proto3" json:"highblocknum,omitempty"`
	Listenport           uint32   `protobuf:"varint,3,opt,name=listenport,proto3" json:"listenport,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupGetStateDeltasFromSeed) Reset()         { *m = LookupGetStateDeltasFromSeed{} }
func (m *LookupGetStateDeltasFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupGetStateDeltasFromSeed) ProtoMessage()    {}
func (*LookupGetStateDeltasFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{67}
}
func (m *LookupGetStateDeltasFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetStateDeltasFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetStateDeltasFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetStateDeltasFromSeed.Merge(m, src)
}
func (m *LookupGetStateDeltasFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetStateDeltasFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetStateDeltasFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetStateDeltasFromSeed proto.InternalMessageInfo

func (m *LookupGetStateDeltasFromSeed) GetLowblocknum() uint64 {
	if m != nil {
		return m.Lowblocknum
	}
	return 0
}

func (m *LookupGetStateDeltasFromSeed) GetHighblocknum() uint64 {
	if m != nil {
		return m.Highblocknum
	}
	return 0
}

func (m *LookupGetStateDeltasFromSeed) GetListenport() uint32 {
	if m != nil {
		return m.Listenport
	}
	return 0
}

type LookupSetStateDeltaFromSeed struct {
	Data                 *LookupSetStateDeltaFromSeed_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                        `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                        `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *LookupSetStateDeltaFromSeed) Reset()         { *m = LookupSetStateDeltaFromSeed{} }
func (m *LookupSetStateDeltaFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupSetStateDeltaFromSeed) ProtoMessage()    {}
func (*LookupSetStateDeltaFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{68}
}
func (m *LookupSetStateDeltaFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetStateDeltaFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetStateDeltaFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetStateDeltaFromSeed.Merge(m, src)
}
func (m *LookupSetStateDeltaFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetStateDeltaFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetStateDeltaFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetStateDeltaFromSeed proto.InternalMessageInfo

func (m *LookupSetStateDeltaFromSeed) GetData() *LookupSetStateDeltaFromSeed_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupSetStateDeltaFromSeed) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupSetStateDeltaFromSeed) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupSetStateDeltaFromSeed_Data struct {
	Blocknum             uint64   `protobuf:"varint,1,opt,name=blocknum,proto3" json:"blocknum,omitempty"`
	Statedelta           []byte   `protobuf:"bytes,2,opt,name=statedelta,proto3" json:"statedelta,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupSetStateDeltaFromSeed_Data) Reset()         { *m = LookupSetStateDeltaFromSeed_Data{} }
func (m *LookupSetStateDeltaFromSeed_Data) String() string { return proto.CompactTextString(m) }
func (*LookupSetStateDeltaFromSeed_Data) ProtoMessage()    {}
func (*LookupSetStateDeltaFromSeed_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{68, 0}
}
func (m *LookupSetStateDeltaFromSeed_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetStateDeltaFromSeed_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetStateDeltaFromSeed_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetStateDeltaFromSeed_Data.Merge(m, src)
}
func (m *LookupSetStateDeltaFromSeed_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetStateDeltaFromSeed_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetStateDeltaFromSeed_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetStateDeltaFromSeed_Data proto.InternalMessageInfo

func (m *LookupSetStateDeltaFromSeed_Data) GetBlocknum() uint64 {
	if m != nil {
		return m.Blocknum
	}
	return 0
}

func (m *LookupSetStateDeltaFromSeed_Data) GetStatedelta() []byte {
	if m != nil {
		return m.Statedelta
	}
	return nil
}

type LookupSetStateDeltasFromSeed struct {
	Data                 *LookupSetStateDeltasFromSeed_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                         `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                         `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *LookupSetStateDeltasFromSeed) Reset()         { *m = LookupSetStateDeltasFromSeed{} }
func (m *LookupSetStateDeltasFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupSetStateDeltasFromSeed) ProtoMessage()    {}
func (*LookupSetStateDeltasFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{69}
}
func (m *LookupSetStateDeltasFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetStateDeltasFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetStateDeltasFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetStateDeltasFromSeed.Merge(m, src)
}
func (m *LookupSetStateDeltasFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetStateDeltasFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetStateDeltasFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetStateDeltasFromSeed proto.InternalMessageInfo

func (m *LookupSetStateDeltasFromSeed) GetData() *LookupSetStateDeltasFromSeed_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupSetStateDeltasFromSeed) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupSetStateDeltasFromSeed) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupSetStateDeltasFromSeed_Data struct {
	Lowblocknum          uint64   `protobuf:"varint,1,opt,name=lowblocknum,proto3" json:"lowblocknum,omitempty"`
	Highblocknum         uint64   `protobuf:"varint,2,opt,name=highblocknum,proto3" json:"highblocknum,omitempty"`
	Statedeltas          [][]byte `protobuf:"bytes,3,rep,name=statedeltas,proto3" json:"statedeltas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupSetStateDeltasFromSeed_Data) Reset()         { *m = LookupSetStateDeltasFromSeed_Data{} }
func (m *LookupSetStateDeltasFromSeed_Data) String() string { return proto.CompactTextString(m) }
func (*LookupSetStateDeltasFromSeed_Data) ProtoMessage()    {}
func (*LookupSetStateDeltasFromSeed_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{69, 0}
}
func (m *LookupSetStateDeltasFromSeed_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetStateDeltasFromSeed_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetStateDeltasFromSeed_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetStateDeltasFromSeed_Data.Merge(m, src)
}
func (m *LookupSetStateDeltasFromSeed_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetStateDeltasFromSeed_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetStateDeltasFromSeed_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetStateDeltasFromSeed_Data proto.InternalMessageInfo

func (m *LookupSetStateDeltasFromSeed_Data) GetLowblocknum() uint64 {
	if m != nil {
		return m.Lowblocknum
	}
	return 0
}

func (m *LookupSetStateDeltasFromSeed_Data) GetHighblocknum() uint64 {
	if m != nil {
		return m.Highblocknum
	}
	return 0
}

func (m *LookupSetStateDeltasFromSeed_Data) GetStatedeltas() [][]byte {
	if m != nil {
		return m.Statedeltas
	}
	return nil
}

type LookupGetStateFromSeed struct {
	Listenport           uint32   `protobuf:"varint,1,opt,name=listenport,proto3" json:"listenport,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupGetStateFromSeed) Reset()         { *m = LookupGetStateFromSeed{} }
func (m *LookupGetStateFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupGetStateFromSeed) ProtoMessage()    {}
func (*LookupGetStateFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{70}
}
func (m *LookupGetStateFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetStateFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetStateFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetStateFromSeed.Merge(m, src)
}
func (m *LookupGetStateFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetStateFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetStateFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetStateFromSeed proto.InternalMessageInfo

func (m *LookupGetStateFromSeed) GetListenport() uint32 {
	if m != nil {
		return m.Listenport
	}
	return 0
}

type LookupSetStateFromSeed struct {
	Accountstore         *ByteArray `protobuf:"bytes,1,opt,name=accountstore,proto3" json:"accountstore,omitempty"`
	Pubkey               *ByteArray `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *LookupSetStateFromSeed) Reset()         { *m = LookupSetStateFromSeed{} }
func (m *LookupSetStateFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupSetStateFromSeed) ProtoMessage()    {}
func (*LookupSetStateFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{71}
}
func (m *LookupSetStateFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetStateFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetStateFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetStateFromSeed.Merge(m, src)
}
func (m *LookupSetStateFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetStateFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetStateFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetStateFromSeed proto.InternalMessageInfo

func (m *LookupSetStateFromSeed) GetAccountstore() *ByteArray {
	if m != nil {
		return m.Accountstore
	}
	return nil
}

func (m *LookupSetStateFromSeed) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupSetStateFromSeed) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

// msgtype is used to prevent replay attacks
type LookupSetLookupOffline struct {
	Data                 *LookupSetLookupOffline_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                   `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *LookupSetLookupOffline) Reset()         { *m = LookupSetLookupOffline{} }
func (m *LookupSetLookupOffline) String() string { return proto.CompactTextString(m) }
func (*LookupSetLookupOffline) ProtoMessage()    {}
func (*LookupSetLookupOffline) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{72}
}
func (m *LookupSetLookupOffline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetLookupOffline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetLookupOffline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetLookupOffline.Merge(m, src)
}
func (m *LookupSetLookupOffline) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetLookupOffline) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetLookupOffline.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetLookupOffline proto.InternalMessageInfo

func (m *LookupSetLookupOffline) GetData() *LookupSetLookupOffline_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupSetLookupOffline) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupSetLookupOffline) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupSetLookupOffline_Data struct {
	Msgtype              uint32   `protobuf:"varint,1,opt,name=msgtype,proto3" json:"msgtype,omitempty"`
	Listenport           uint32   `protobuf:"varint,2,opt,name=listenport,proto3" json:"listenport,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupSetLookupOffline_Data) Reset()         { *m = LookupSetLookupOffline_Data{} }
func (m *LookupSetLookupOffline_Data) String() string { return proto.CompactTextString(m) }
func (*LookupSetLookupOffline_Data) ProtoMessage()    {}
func (*LookupSetLookupOffline_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{72, 0}
}
func (m *LookupSetLookupOffline_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetLookupOffline_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetLookupOffline_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetLookupOffline_Data.Merge(m, src)
}
func (m *LookupSetLookupOffline_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetLookupOffline_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetLookupOffline_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetLookupOffline_Data proto.InternalMessageInfo

func (m *LookupSetLookupOffline_Data) GetMsgtype() uint32 {
	if m != nil {
		return m.Msgtype
	}
	return 0
}

func (m *LookupSetLookupOffline_Data) GetListenport() uint32 {
	if m != nil {
		return m.Listenport
	}
	return 0
}

// msgtype and blocknumber are used to prevent replay attacks
type LookupSetLookupOnline struct {
	Data                 *LookupSetLookupOnline_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                  `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                  `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *LookupSetLookupOnline) Reset()         { *m = LookupSetLookupOnline{} }
func (m *LookupSetLookupOnline) String() string { return proto.CompactTextString(m) }
func (*LookupSetLookupOnline) ProtoMessage()    {}
func (*LookupSetLookupOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{73}
}
func (m *LookupSetLookupOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetLookupOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetLookupOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetLookupOnline.Merge(m, src)
}
func (m *LookupSetLookupOnline) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetLookupOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetLookupOnline.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetLookupOnline proto.InternalMessageInfo

func (m *LookupSetLookupOnline) GetData() *LookupSetLookupOnline_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupSetLookupOnline) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupSetLookupOnline) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupSetLookupOnline_Data struct {
	Msgtype              uint32   `protobuf:"varint,1,opt,name=msgtype,proto3" json:"msgtype,omitempty"`
	Listenport           uint32   `protobuf:"varint,2,opt,name=listenport,proto3" json:"listenport,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupSetLookupOnline_Data) Reset()         { *m = LookupSetLookupOnline_Data{} }
func (m *LookupSetLookupOnline_Data) String() string { return proto.CompactTextString(m) }
func (*LookupSetLookupOnline_Data) ProtoMessage()    {}
func (*LookupSetLookupOnline_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{73, 0}
}
func (m *LookupSetLookupOnline_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetLookupOnline_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetLookupOnline_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetLookupOnline_Data.Merge(m, src)
}
func (m *LookupSetLookupOnline_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetLookupOnline_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetLookupOnline_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetLookupOnline_Data proto.InternalMessageInfo

func (m *LookupSetLookupOnline_Data) GetMsgtype() uint32 {
	if m != nil {
		return m.Msgtype
	}
	return 0
}

func (m *LookupSetLookupOnline_Data) GetListenport() uint32 {
	if m != nil {
		return m.Listenport
	}
	return 0
}

type LookupGetOfflineLookups struct {
	Listenport           uint32   `protobuf:"varint,1,opt,name=listenport,proto3" json:"listenport,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupGetOfflineLookups) Reset()         { *m = LookupGetOfflineLookups{} }
func (m *LookupGetOfflineLookups) String() string { return proto.CompactTextString(m) }
func (*LookupGetOfflineLookups) ProtoMessage()    {}
func (*LookupGetOfflineLookups) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{74}
}
func (m *LookupGetOfflineLookups) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetOfflineLookups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetOfflineLookups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetOfflineLookups.Merge(m, src)
}
func (m *LookupGetOfflineLookups) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetOfflineLookups) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetOfflineLookups.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetOfflineLookups proto.InternalMessageInfo

func (m *LookupGetOfflineLookups) GetListenport() uint32 {
	if m != nil {
		return m.Listenport
	}
	return 0
}

type LookupSetOfflineLookups struct {
	Nodes                []*ByteArray `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Pubkey               *ByteArray   `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *LookupSetOfflineLookups) Reset()         { *m = LookupSetOfflineLookups{} }
func (m *LookupSetOfflineLookups) String() string { return proto.CompactTextString(m) }
func (*LookupSetOfflineLookups) ProtoMessage()    {}
func (*LookupSetOfflineLookups) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{75}
}
func (m *LookupSetOfflineLookups) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetOfflineLookups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetOfflineLookups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetOfflineLookups.Merge(m, src)
}
func (m *LookupSetOfflineLookups) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetOfflineLookups) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetOfflineLookups.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetOfflineLookups proto.InternalMessageInfo

func (m *LookupSetOfflineLookups) GetNodes() []*ByteArray {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *LookupSetOfflineLookups) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupSetOfflineLookups) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

// msgtype and blocknumber is used to prevent replay attacks
type LookupRaiseStartPoW struct {
	Data                 *LookupRaiseStartPoW_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *LookupRaiseStartPoW) Reset()         { *m = LookupRaiseStartPoW{} }
func (m *LookupRaiseStartPoW) String() string { return proto.CompactTextString(m) }
func (*LookupRaiseStartPoW) ProtoMessage()    {}
func (*LookupRaiseStartPoW) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{76}
}
func (m *LookupRaiseStartPoW) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupRaiseStartPoW) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupRaiseStartPoW) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupRaiseStartPoW.Merge(m, src)
}
func (m *LookupRaiseStartPoW) XXX_Size() int {
	return m.Size()
}
func (m *LookupRaiseStartPoW) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupRaiseStartPoW.DiscardUnknown(m)
}

var xxx_messageInfo_LookupRaiseStartPoW proto.InternalMessageInfo

func (m *LookupRaiseStartPoW) GetData() *LookupRaiseStartPoW_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupRaiseStartPoW) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupRaiseStartPoW) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupRaiseStartPoW_Data struct {
	Msgtype              uint32   `protobuf:"varint,1,opt,name=msgtype,proto3" json:"msgtype,omitempty"`
	Blocknumber          uint64   `protobuf:"varint,2,opt,name=blocknumber,proto3" json:"blocknumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupRaiseStartPoW_Data) Reset()         { *m = LookupRaiseStartPoW_Data{} }
func (m *LookupRaiseStartPoW_Data) String() string { return proto.CompactTextString(m) }
func (*LookupRaiseStartPoW_Data) ProtoMessage()    {}
func (*LookupRaiseStartPoW_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{76, 0}
}
func (m *LookupRaiseStartPoW_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupRaiseStartPoW_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupRaiseStartPoW_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupRaiseStartPoW_Data.Merge(m, src)
}
func (m *LookupRaiseStartPoW_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupRaiseStartPoW_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupRaiseStartPoW_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupRaiseStartPoW_Data proto.InternalMessageInfo

func (m *LookupRaiseStartPoW_Data) GetMsgtype() uint32 {
	if m != nil {
		return m.Msgtype
	}
	return 0
}

func (m *LookupRaiseStartPoW_Data) GetBlocknumber() uint64 {
	if m != nil {
		return m.Blocknumber
	}
	return 0
}

type LookupGetStartPoWFromSeed struct {
	Data                 *LookupGetStartPoWFromSeed_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                      `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                      `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *LookupGetStartPoWFromSeed) Reset()         { *m = LookupGetStartPoWFromSeed{} }
func (m *LookupGetStartPoWFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupGetStartPoWFromSeed) ProtoMessage()    {}
func (*LookupGetStartPoWFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{77}
}
func (m *LookupGetStartPoWFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetStartPoWFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetStartPoWFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetStartPoWFromSeed.Merge(m, src)
}
func (m *LookupGetStartPoWFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetStartPoWFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetStartPoWFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetStartPoWFromSeed proto.InternalMessageInfo

func (m *LookupGetStartPoWFromSeed) GetData() *LookupGetStartPoWFromSeed_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupGetStartPoWFromSeed) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupGetStartPoWFromSeed) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupGetStartPoWFromSeed_Data struct {
	Listenport           uint32   `protobuf:"varint,1,opt,name=listenport,proto3" json:"listenport,omitempty"`
	Blocknumber          uint64   `protobuf:"varint,2,opt,name=blocknumber,proto3" json:"blocknumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupGetStartPoWFromSeed_Data) Reset()         { *m = LookupGetStartPoWFromSeed_Data{} }
func (m *LookupGetStartPoWFromSeed_Data) String() string { return proto.CompactTextString(m) }
func (*LookupGetStartPoWFromSeed_Data) ProtoMessage()    {}
func (*LookupGetStartPoWFromSeed_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{77, 0}
}
func (m *LookupGetStartPoWFromSeed_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetStartPoWFromSeed_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetStartPoWFromSeed_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetStartPoWFromSeed_Data.Merge(m, src)
}
func (m *LookupGetStartPoWFromSeed_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetStartPoWFromSeed_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetStartPoWFromSeed_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetStartPoWFromSeed_Data proto.InternalMessageInfo

func (m *LookupGetStartPoWFromSeed_Data) GetListenport() uint32 {
	if m != nil {
		return m.Listenport
	}
	return 0
}

func (m *LookupGetStartPoWFromSeed_Data) GetBlocknumber() uint64 {
	if m != nil {
		return m.Blocknumber
	}
	return 0
}

type LookupSetStartPoWFromSeed struct {
	Blocknumber          uint64     `protobuf:"varint,1,opt,name=blocknumber,proto3" json:"blocknumber,omitempty"`
	Pubkey               *ByteArray `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *LookupSetStartPoWFromSeed) Reset()         { *m = LookupSetStartPoWFromSeed{} }
func (m *LookupSetStartPoWFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupSetStartPoWFromSeed) ProtoMessage()    {}
func (*LookupSetStartPoWFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{78}
}
func (m *LookupSetStartPoWFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetStartPoWFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetStartPoWFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetStartPoWFromSeed.Merge(m, src)
}
func (m *LookupSetStartPoWFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetStartPoWFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetStartPoWFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetStartPoWFromSeed proto.InternalMessageInfo

func (m *LookupSetStartPoWFromSeed) GetBlocknumber() uint64 {
	if m != nil {
		return m.Blocknumber
	}
	return 0
}

func (m *LookupSetStartPoWFromSeed) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupSetStartPoWFromSeed) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

// From archival node to lookup node.
type LookupGetShardsFromSeed struct {
	Listenport           uint32   `protobuf:"varint,1,opt,name=listenport,proto3" json:"listenport,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupGetShardsFromSeed) Reset()         { *m = LookupGetShardsFromSeed{} }
func (m *LookupGetShardsFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupGetShardsFromSeed) ProtoMessage()    {}
func (*LookupGetShardsFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{79}
}
func (m *LookupGetShardsFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetShardsFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetShardsFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetShardsFromSeed.Merge(m, src)
}
func (m *LookupGetShardsFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetShardsFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetShardsFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetShardsFromSeed proto.InternalMessageInfo

func (m *LookupGetShardsFromSeed) GetListenport() uint32 {
	if m != nil {
		return m.Listenport
	}
	return 0
}

// From lookup node to archival node.
type LookupSetShardsFromSeed struct {
	Sharding             *ProtoShardingStructure `protobuf:"bytes,1,opt,name=sharding,proto3" json:"sharding,omitempty"`
	Pubkey               *ByteArray              `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray              `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *LookupSetShardsFromSeed) Reset()         { *m = LookupSetShardsFromSeed{} }
func (m *LookupSetShardsFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupSetShardsFromSeed) ProtoMessage()    {}
func (*LookupSetShardsFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{80}
}
func (m *LookupSetShardsFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetShardsFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetShardsFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetShardsFromSeed.Merge(m, src)
}
func (m *LookupSetShardsFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetShardsFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetShardsFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetShardsFromSeed proto.InternalMessageInfo

func (m *LookupSetShardsFromSeed) GetSharding() *ProtoShardingStructure {
	if m != nil {
		return m.Sharding
	}
	return nil
}

func (m *LookupSetShardsFromSeed) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupSetShardsFromSeed) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupGetMicroBlockFromLookup struct {
	Portno               uint32   `protobuf:"varint,1,opt,name=portno,proto3" json:"portno,omitempty"`
	Mbhashes             [][]byte `protobuf:"bytes,2,rep,name=mbhashes,proto3" json:"mbhashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupGetMicroBlockFromLookup) Reset()         { *m = LookupGetMicroBlockFromLookup{} }
func (m *LookupGetMicroBlockFromLookup) String() string { return proto.CompactTextString(m) }
func (*LookupGetMicroBlockFromLookup) ProtoMessage()    {}
func (*LookupGetMicroBlockFromLookup) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{81}
}
func (m *LookupGetMicroBlockFromLookup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetMicroBlockFromLookup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetMicroBlockFromLookup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetMicroBlockFromLookup.Merge(m, src)
}
func (m *LookupGetMicroBlockFromLookup) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetMicroBlockFromLookup) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetMicroBlockFromLookup.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetMicroBlockFromLookup proto.InternalMessageInfo

func (m *LookupGetMicroBlockFromLookup) GetPortno() uint32 {
	if m != nil {
		return m.Portno
	}
	return 0
}

func (m *LookupGetMicroBlockFromLookup) GetMbhashes() [][]byte {
	if m != nil {
		return m.Mbhashes
	}
	return nil
}

type LookupSetMicroBlockFromLookup struct {
	Microblocks          []*ProtoMicroBlock `protobuf:"bytes,1,rep,name=microblocks,proto3" json:"microblocks,omitempty"`
	Pubkey               *ByteArray         `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray         `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *LookupSetMicroBlockFromLookup) Reset()         { *m = LookupSetMicroBlockFromLookup{} }
func (m *LookupSetMicroBlockFromLookup) String() string { return proto.CompactTextString(m) }
func (*LookupSetMicroBlockFromLookup) ProtoMessage()    {}
func (*LookupSetMicroBlockFromLookup) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{82}
}
func (m *LookupSetMicroBlockFromLookup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetMicroBlockFromLookup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetMicroBlockFromLookup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetMicroBlockFromLookup.Merge(m, src)
}
func (m *LookupSetMicroBlockFromLookup) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetMicroBlockFromLookup) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetMicroBlockFromLookup.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetMicroBlockFromLookup proto.InternalMessageInfo

func (m *LookupSetMicroBlockFromLookup) GetMicroblocks() []*ProtoMicroBlock {
	if m != nil {
		return m.Microblocks
	}
	return nil
}

func (m *LookupSetMicroBlockFromLookup) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupSetMicroBlockFromLookup) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupGetMicroBlockFromL2L struct {
	Data                 *LookupGetMicroBlockFromL2L_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                       `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                       `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *LookupGetMicroBlockFromL2L) Reset()         { *m = LookupGetMicroBlockFromL2L{} }
func (m *LookupGetMicroBlockFromL2L) String() string { return proto.CompactTextString(m) }
func (*LookupGetMicroBlockFromL2L) ProtoMessage()    {}
func (*LookupGetMicroBlockFromL2L) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{83}
}
func (m *LookupGetMicroBlockFromL2L) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetMicroBlockFromL2L) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetMicroBlockFromL2L) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetMicroBlockFromL2L.Merge(m, src)
}
func (m *LookupGetMicroBlockFromL2L) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetMicroBlockFromL2L) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetMicroBlockFromL2L.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetMicroBlockFromL2L proto.InternalMessageInfo

func (m *LookupGetMicroBlockFromL2L) GetData() *LookupGetMicroBlockFromL2L_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupGetMicroBlockFromL2L) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupGetMicroBlockFromL2L) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupGetMicroBlockFromL2L_Data struct {
	Portno               uint32   `protobuf:"varint,1,opt,name=portno,proto3" json:"portno,omitempty"`
	Mbhashes             [][]byte `protobuf:"bytes,2,rep,name=mbhashes,proto3" json:"mbhashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupGetMicroBlockFromL2L_Data) Reset()         { *m = LookupGetMicroBlockFromL2L_Data{} }
func (m *LookupGetMicroBlockFromL2L_Data) String() string { return proto.CompactTextString(m) }
func (*LookupGetMicroBlockFromL2L_Data) ProtoMessage()    {}
func (*LookupGetMicroBlockFromL2L_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{83, 0}
}
func (m *LookupGetMicroBlockFromL2L_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetMicroBlockFromL2L_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetMicroBlockFromL2L_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetMicroBlockFromL2L_Data.Merge(m, src)
}
func (m *LookupGetMicroBlockFromL2L_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetMicroBlockFromL2L_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetMicroBlockFromL2L_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetMicroBlockFromL2L_Data proto.InternalMessageInfo

func (m *LookupGetMicroBlockFromL2L_Data) GetPortno() uint32 {
	if m != nil {
		return m.Portno
	}
	return 0
}

func (m *LookupGetMicroBlockFromL2L_Data) GetMbhashes() [][]byte {
	if m != nil {
		return m.Mbhashes
	}
	return nil
}

type LookupForwardTxnsFromSeed struct {
	Shardtransactions    *ProtoTransactionArray `protobuf:"bytes,1,opt,name=shardtransactions,proto3" json:"shardtransactions,omitempty"`
	Dstransactions       *ProtoTransactionArray `protobuf:"bytes,2,opt,name=dstransactions,proto3" json:"dstransactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *LookupForwardTxnsFromSeed) Reset()         { *m = LookupForwardTxnsFromSeed{} }
func (m *LookupForwardTxnsFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupForwardTxnsFromSeed) ProtoMessage()    {}
func (*LookupForwardTxnsFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{84}
}
func (m *LookupForwardTxnsFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupForwardTxnsFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupForwardTxnsFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupForwardTxnsFromSeed.Merge(m, src)
}
func (m *LookupForwardTxnsFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupForwardTxnsFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupForwardTxnsFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupForwardTxnsFromSeed proto.InternalMessageInfo

func (m *LookupForwardTxnsFromSeed) GetShardtransactions() *ProtoTransactionArray {
	if m != nil {
		return m.Shardtransactions
	}
	return nil
}

func (m *LookupForwardTxnsFromSeed) GetDstransactions() *ProtoTransactionArray {
	if m != nil {
		return m.Dstransactions
	}
	return nil
}

type LookupGetTxnsFromLookup struct {
	Portno               uint32   `protobuf:"varint,1,opt,name=portno,proto3" json:"portno,omitempty"`
	Mbhash               []byte   `protobuf:"bytes,2,opt,name=mbhash,proto3" json:"mbhash,omitempty"`
	Txnhashes            [][]byte `protobuf:"bytes,3,rep,name=txnhashes,proto3" json:"txnhashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupGetTxnsFromLookup) Reset()         { *m = LookupGetTxnsFromLookup{} }
func (m *LookupGetTxnsFromLookup) String() string { return proto.CompactTextString(m) }
func (*LookupGetTxnsFromLookup) ProtoMessage()    {}
func (*LookupGetTxnsFromLookup) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{85}
}
func (m *LookupGetTxnsFromLookup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetTxnsFromLookup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetTxnsFromLookup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetTxnsFromLookup.Merge(m, src)
}
func (m *LookupGetTxnsFromLookup) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetTxnsFromLookup) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetTxnsFromLookup.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetTxnsFromLookup proto.InternalMessageInfo

func (m *LookupGetTxnsFromLookup) GetPortno() uint32 {
	if m != nil {
		return m.Portno
	}
	return 0
}

func (m *LookupGetTxnsFromLookup) GetMbhash() []byte {
	if m != nil {
		return m.Mbhash
	}
	return nil
}

func (m *LookupGetTxnsFromLookup) GetTxnhashes() [][]byte {
	if m != nil {
		return m.Txnhashes
	}
	return nil
}

type LookupGetTxnsFromL2L struct {
	Data                 *LookupGetTxnsFromL2L_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                 `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                 `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *LookupGetTxnsFromL2L) Reset()         { *m = LookupGetTxnsFromL2L{} }
func (m *LookupGetTxnsFromL2L) String() string { return proto.CompactTextString(m) }
func (*LookupGetTxnsFromL2L) ProtoMessage()    {}
func (*LookupGetTxnsFromL2L) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{86}
}
func (m *LookupGetTxnsFromL2L) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetTxnsFromL2L) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetTxnsFromL2L) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetTxnsFromL2L.Merge(m, src)
}
func (m *LookupGetTxnsFromL2L) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetTxnsFromL2L) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetTxnsFromL2L.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetTxnsFromL2L proto.InternalMessageInfo

func (m *LookupGetTxnsFromL2L) GetData() *LookupGetTxnsFromL2L_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupGetTxnsFromL2L) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupGetTxnsFromL2L) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupGetTxnsFromL2L_Data struct {
	Portno               uint32   `protobuf:"varint,1,opt,name=portno,proto3" json:"portno,omitempty"`
	Mbhash               []byte   `protobuf:"bytes,2,opt,name=mbhash,proto3" json:"mbhash,omitempty"`
	Txnhashes            [][]byte `protobuf:"bytes,3,rep,name=txnhashes,proto3" json:"txnhashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupGetTxnsFromL2L_Data) Reset()         { *m = LookupGetTxnsFromL2L_Data{} }
func (m *LookupGetTxnsFromL2L_Data) String() string { return proto.CompactTextString(m) }
func (*LookupGetTxnsFromL2L_Data) ProtoMessage()    {}
func (*LookupGetTxnsFromL2L_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{86, 0}
}
func (m *LookupGetTxnsFromL2L_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetTxnsFromL2L_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetTxnsFromL2L_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetTxnsFromL2L_Data.Merge(m, src)
}
func (m *LookupGetTxnsFromL2L_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetTxnsFromL2L_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetTxnsFromL2L_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetTxnsFromL2L_Data proto.InternalMessageInfo

func (m *LookupGetTxnsFromL2L_Data) GetPortno() uint32 {
	if m != nil {
		return m.Portno
	}
	return 0
}

func (m *LookupGetTxnsFromL2L_Data) GetMbhash() []byte {
	if m != nil {
		return m.Mbhash
	}
	return nil
}

func (m *LookupGetTxnsFromL2L_Data) GetTxnhashes() [][]byte {
	if m != nil {
		return m.Txnhashes
	}
	return nil
}

type LookupSetTxnsFromLookup struct {
	Mbhash               []byte       `protobuf:"bytes,1,opt,name=mbhash,proto3" json:"mbhash,omitempty"`
	Transactions         []*ByteArray `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Pubkey               *ByteArray   `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray   `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *LookupSetTxnsFromLookup) Reset()         { *m = LookupSetTxnsFromLookup{} }
func (m *LookupSetTxnsFromLookup) String() string { return proto.CompactTextString(m) }
func (*LookupSetTxnsFromLookup) ProtoMessage()    {}
func (*LookupSetTxnsFromLookup) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{87}
}
func (m *LookupSetTxnsFromLookup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetTxnsFromLookup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetTxnsFromLookup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetTxnsFromLookup.Merge(m, src)
}
func (m *LookupSetTxnsFromLookup) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetTxnsFromLookup) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetTxnsFromLookup.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetTxnsFromLookup proto.InternalMessageInfo

func (m *LookupSetTxnsFromLookup) GetMbhash() []byte {
	if m != nil {
		return m.Mbhash
	}
	return nil
}

func (m *LookupSetTxnsFromLookup) GetTransactions() []*ByteArray {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *LookupSetTxnsFromLookup) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupSetTxnsFromLookup) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupGetDirectoryBlocksFromSeed struct {
	Portno               uint32   `protobuf:"varint,1,opt,name=portno,proto3" json:"portno,omitempty"`
	Indexnum             uint64   `protobuf:"varint,2,opt,name=indexnum,proto3" json:"indexnum,omitempty"`
	Includeminerinfo     bool     `protobuf:"varint,3,opt,name=includeminerinfo,proto3" json:"includeminerinfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupGetDirectoryBlocksFromSeed) Reset()         { *m = LookupGetDirectoryBlocksFromSeed{} }
func (m *LookupGetDirectoryBlocksFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupGetDirectoryBlocksFromSeed) ProtoMessage()    {}
func (*LookupGetDirectoryBlocksFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{88}
}
func (m *LookupGetDirectoryBlocksFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetDirectoryBlocksFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetDirectoryBlocksFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetDirectoryBlocksFromSeed.Merge(m, src)
}
func (m *LookupGetDirectoryBlocksFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetDirectoryBlocksFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetDirectoryBlocksFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetDirectoryBlocksFromSeed proto.InternalMessageInfo

func (m *LookupGetDirectoryBlocksFromSeed) GetPortno() uint32 {
	if m != nil {
		return m.Portno
	}
	return 0
}

func (m *LookupGetDirectoryBlocksFromSeed) GetIndexnum() uint64 {
	if m != nil {
		return m.Indexnum
	}
	return 0
}

func (m *LookupGetDirectoryBlocksFromSeed) GetIncludeminerinfo() bool {
	if m != nil {
		return m.Includeminerinfo
	}
	return false
}

type LookupSetDirectoryBlocksFromSeed struct {
	Data                 *LookupSetDirectoryBlocksFromSeed_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                             `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                             `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *LookupSetDirectoryBlocksFromSeed) Reset()         { *m = LookupSetDirectoryBlocksFromSeed{} }
func (m *LookupSetDirectoryBlocksFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupSetDirectoryBlocksFromSeed) ProtoMessage()    {}
func (*LookupSetDirectoryBlocksFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{89}
}
func (m *LookupSetDirectoryBlocksFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetDirectoryBlocksFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetDirectoryBlocksFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetDirectoryBlocksFromSeed.Merge(m, src)
}
func (m *LookupSetDirectoryBlocksFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetDirectoryBlocksFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetDirectoryBlocksFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetDirectoryBlocksFromSeed proto.InternalMessageInfo

func (m *LookupSetDirectoryBlocksFromSeed) GetData() *LookupSetDirectoryBlocksFromSeed_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupSetDirectoryBlocksFromSeed) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupSetDirectoryBlocksFromSeed) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupSetDirectoryBlocksFromSeed_Data struct {
	Indexnum             uint64                       `protobuf:"varint,1,opt,name=indexnum,proto3" json:"indexnum,omitempty"`
	Dirblocks            []*ProtoSingleDirectoryBlock `protobuf:"bytes,2,rep,name=dirblocks,proto3" json:"dirblocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *LookupSetDirectoryBlocksFromSeed_Data) Reset()         { *m = LookupSetDirectoryBlocksFromSeed_Data{} }
func (m *LookupSetDirectoryBlocksFromSeed_Data) String() string { return proto.CompactTextString(m) }
func (*LookupSetDirectoryBlocksFromSeed_Data) ProtoMessage()    {}
func (*LookupSetDirectoryBlocksFromSeed_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{89, 0}
}
func (m *LookupSetDirectoryBlocksFromSeed_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetDirectoryBlocksFromSeed_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetDirectoryBlocksFromSeed_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetDirectoryBlocksFromSeed_Data.Merge(m, src)
}
func (m *LookupSetDirectoryBlocksFromSeed_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetDirectoryBlocksFromSeed_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetDirectoryBlocksFromSeed_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetDirectoryBlocksFromSeed_Data proto.InternalMessageInfo

func (m *LookupSetDirectoryBlocksFromSeed_Data) GetIndexnum() uint64 {
	if m != nil {
		return m.Indexnum
	}
	return 0
}

func (m *LookupSetDirectoryBlocksFromSeed_Data) GetDirblocks() []*ProtoSingleDirectoryBlock {
	if m != nil {
		return m.Dirblocks
	}
	return nil
}

type ConsensusAnnouncement struct {
	Consensusinfo *ConsensusAnnouncement_ConsensusInfo `protobuf:"bytes,1,opt,name=consensusinfo,proto3" json:"consensusinfo,omitempty"`
	Pubkey        *ByteArray                           `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature     *ByteArray                           `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// Types that are valid to be assigned to Announcement:
	//	*ConsensusAnnouncement_Dsblock
	//	*ConsensusAnnouncement_Microblock
	//	*ConsensusAnnouncement_Finalblock
	//	*ConsensusAnnouncement_Vcblock
	//	*ConsensusAnnouncement_Fallbackblock
	Announcement         isConsensusAnnouncement_Announcement `protobuf_oneof:"announcement"`
	Finalsignature       *ByteArray                           `protobuf:"bytes,9,opt,name=finalsignature,proto3" json:"finalsignature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ConsensusAnnouncement) Reset()         { *m = ConsensusAnnouncement{} }
func (m *ConsensusAnnouncement) String() string { return proto.CompactTextString(m) }
func (*ConsensusAnnouncement) ProtoMessage()    {}
func (*ConsensusAnnouncement) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{90}
}
func (m *ConsensusAnnouncement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusAnnouncement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusAnnouncement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusAnnouncement.Merge(m, src)
}
func (m *ConsensusAnnouncement) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusAnnouncement) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusAnnouncement.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusAnnouncement proto.InternalMessageInfo

type isConsensusAnnouncement_Announcement interface {
	isConsensusAnnouncement_Announcement()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ConsensusAnnouncement_Dsblock struct {
	Dsblock *DSDSBlockAnnouncement `protobuf:"bytes,4,opt,name=dsblock,proto3,oneof" json:"dsblock,omitempty"`
}
type ConsensusAnnouncement_Microblock struct {
	Microblock *NodeMicroBlockAnnouncement `protobuf:"bytes,5,opt,name=microblock,proto3,oneof" json:"microblock,omitempty"`
}
type ConsensusAnnouncement_Finalblock struct {
	Finalblock *DSFinalBlockAnnouncement `protobuf:"bytes,6,opt,name=finalblock,proto3,oneof" json:"finalblock,omitempty"`
}
type ConsensusAnnouncement_Vcblock struct {
	Vcblock *DSVCBlockAnnouncement `protobuf:"bytes,7,opt,name=vcblock,proto3,oneof" json:"vcblock,omitempty"`
}
type ConsensusAnnouncement_Fallbackblock struct {
	Fallbackblock *NodeFallbackBlockAnnouncement `protobuf:"bytes,8,opt,name=fallbackblock,proto3,oneof" json:"fallbackblock,omitempty"`
}

func (*ConsensusAnnouncement_Dsblock) isConsensusAnnouncement_Announcement()       {}
func (*ConsensusAnnouncement_Microblock) isConsensusAnnouncement_Announcement()    {}
func (*ConsensusAnnouncement_Finalblock) isConsensusAnnouncement_Announcement()    {}
func (*ConsensusAnnouncement_Vcblock) isConsensusAnnouncement_Announcement()       {}
func (*ConsensusAnnouncement_Fallbackblock) isConsensusAnnouncement_Announcement() {}

func (m *ConsensusAnnouncement) GetAnnouncement() isConsensusAnnouncement_Announcement {
	if m != nil {
		return m.Announcement
	}
	return nil
}

func (m *ConsensusAnnouncement) GetConsensusinfo() *ConsensusAnnouncement_ConsensusInfo {
	if m != nil {
		return m.Consensusinfo
	}
	return nil
}

func (m *ConsensusAnnouncement) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *ConsensusAnnouncement) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ConsensusAnnouncement) GetDsblock() *DSDSBlockAnnouncement {
	if x, ok := m.GetAnnouncement().(*ConsensusAnnouncement_Dsblock); ok {
		return x.Dsblock
	}
	return nil
}

func (m *ConsensusAnnouncement) GetMicroblock() *NodeMicroBlockAnnouncement {
	if x, ok := m.GetAnnouncement().(*ConsensusAnnouncement_Microblock); ok {
		return x.Microblock
	}
	return nil
}

func (m *ConsensusAnnouncement) GetFinalblock() *DSFinalBlockAnnouncement {
	if x, ok := m.GetAnnouncement().(*ConsensusAnnouncement_Finalblock); ok {
		return x.Finalblock
	}
	return nil
}

func (m *ConsensusAnnouncement) GetVcblock() *DSVCBlockAnnouncement {
	if x, ok := m.GetAnnouncement().(*ConsensusAnnouncement_Vcblock); ok {
		return x.Vcblock
	}
	return nil
}

func (m *ConsensusAnnouncement) GetFallbackblock() *NodeFallbackBlockAnnouncement {
	if x, ok := m.GetAnnouncement().(*ConsensusAnnouncement_Fallbackblock); ok {
		return x.Fallbackblock
	}
	return nil
}

func (m *ConsensusAnnouncement) GetFinalsignature() *ByteArray {
	if m != nil {
		return m.Finalsignature
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConsensusAnnouncement) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConsensusAnnouncement_Dsblock)(nil),
		(*ConsensusAnnouncement_Microblock)(nil),
		(*ConsensusAnnouncement_Finalblock)(nil),
		(*ConsensusAnnouncement_Vcblock)(nil),
		(*ConsensusAnnouncement_Fallbackblock)(nil),
	}
}

type ConsensusAnnouncement_ConsensusInfo struct {
	Consensusid          uint32   `protobuf:"varint,1,opt,name=consensusid,proto3" json:"consensusid,omitempty"`
	Blocknumber          uint64   `protobuf:"varint,2,opt,name=blocknumber,proto3" json:"blocknumber,omitempty"`
	Blockhash            []byte   `protobuf:"bytes,3,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	Leaderid             uint32   `protobuf:"varint,4,opt,name=leaderid,proto3" json:"leaderid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsensusAnnouncement_ConsensusInfo) Reset()         { *m = ConsensusAnnouncement_ConsensusInfo{} }
func (m *ConsensusAnnouncement_ConsensusInfo) String() string { return proto.CompactTextString(m) }
func (*ConsensusAnnouncement_ConsensusInfo) ProtoMessage()    {}
func (*ConsensusAnnouncement_ConsensusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{90, 0}
}
func (m *ConsensusAnnouncement_ConsensusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusAnnouncement_ConsensusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusAnnouncement_ConsensusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusAnnouncement_ConsensusInfo.Merge(m, src)
}
func (m *ConsensusAnnouncement_ConsensusInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusAnnouncement_ConsensusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusAnnouncement_ConsensusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusAnnouncement_ConsensusInfo proto.InternalMessageInfo

func (m *ConsensusAnnouncement_ConsensusInfo) GetConsensusid() uint32 {
	if m != nil {
		return m.Consensusid
	}
	return 0
}

func (m *ConsensusAnnouncement_ConsensusInfo) GetBlocknumber() uint64 {
	if m != nil {
		return m.Blocknumber
	}
	return 0
}

func (m *ConsensusAnnouncement_ConsensusInfo) GetBlockhash() []byte {
	if m != nil {
		return m.Blockhash
	}
	return nil
}

func (m *ConsensusAnnouncement_ConsensusInfo) GetLeaderid() uint32 {
	if m != nil {
		return m.Leaderid
	}
	return 0
}

type ConsensusCommit struct {
	Consensusinfo        *ConsensusCommit_ConsensusInfo `protobuf:"bytes,1,opt,name=consensusinfo,proto3" json:"consensusinfo,omitempty"`
	Pubkey               *ByteArray                     `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                     `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ConsensusCommit) Reset()         { *m = ConsensusCommit{} }
func (m *ConsensusCommit) String() string { return proto.CompactTextString(m) }
func (*ConsensusCommit) ProtoMessage()    {}
func (*ConsensusCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{91}
}
func (m *ConsensusCommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusCommit.Merge(m, src)
}
func (m *ConsensusCommit) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusCommit.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusCommit proto.InternalMessageInfo

func (m *ConsensusCommit) GetConsensusinfo() *ConsensusCommit_ConsensusInfo {
	if m != nil {
		return m.Consensusinfo
	}
	return nil
}

func (m *ConsensusCommit) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *ConsensusCommit) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ConsensusCommit_ConsensusInfo struct {
	Consensusid          uint32     `protobuf:"varint,1,opt,name=consensusid,proto3" json:"consensusid,omitempty"`
	Blocknumber          uint64     `protobuf:"varint,2,opt,name=blocknumber,proto3" json:"blocknumber,omitempty"`
	Blockhash            []byte     `protobuf:"bytes,3,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	Backupid             uint32     `protobuf:"varint,4,opt,name=backupid,proto3" json:"backupid,omitempty"`
	Commitpoint          *ByteArray `protobuf:"bytes,5,opt,name=commitpoint,proto3" json:"commitpoint,omitempty"`
	Commitpointhash      *ByteArray `protobuf:"bytes,6,opt,name=commitpointhash,proto3" json:"commitpointhash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ConsensusCommit_ConsensusInfo) Reset()         { *m = ConsensusCommit_ConsensusInfo{} }
func (m *ConsensusCommit_ConsensusInfo) String() string { return proto.CompactTextString(m) }
func (*ConsensusCommit_ConsensusInfo) ProtoMessage()    {}
func (*ConsensusCommit_ConsensusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{91, 0}
}
func (m *ConsensusCommit_ConsensusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusCommit_ConsensusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusCommit_ConsensusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusCommit_ConsensusInfo.Merge(m, src)
}
func (m *ConsensusCommit_ConsensusInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusCommit_ConsensusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusCommit_ConsensusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusCommit_ConsensusInfo proto.InternalMessageInfo

func (m *ConsensusCommit_ConsensusInfo) GetConsensusid() uint32 {
	if m != nil {
		return m.Consensusid
	}
	return 0
}

func (m *ConsensusCommit_ConsensusInfo) GetBlocknumber() uint64 {
	if m != nil {
		return m.Blocknumber
	}
	return 0
}

func (m *ConsensusCommit_ConsensusInfo) GetBlockhash() []byte {
	if m != nil {
		return m.Blockhash
	}
	return nil
}

func (m *ConsensusCommit_ConsensusInfo) GetBackupid() uint32 {
	if m != nil {
		return m.Backupid
	}
	return 0
}

func (m *ConsensusCommit_ConsensusInfo) GetCommitpoint() *ByteArray {
	if m != nil {
		return m.Commitpoint
	}
	return nil
}

func (m *ConsensusCommit_ConsensusInfo) GetCommitpointhash() *ByteArray {
	if m != nil {
		return m.Commitpointhash
	}
	return nil
}

type ConsensusChallenge struct {
	Consensusinfo        *ConsensusChallenge_ConsensusInfo `protobuf:"bytes,1,opt,name=consensusinfo,proto3" json:"consensusinfo,omitempty"`
	Pubkey               *ByteArray                        `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                        `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ConsensusChallenge) Reset()         { *m = ConsensusChallenge{} }
func (m *ConsensusChallenge) String() string { return proto.CompactTextString(m) }
func (*ConsensusChallenge) ProtoMessage()    {}
func (*ConsensusChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{92}
}
func (m *ConsensusChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusChallenge.Merge(m, src)
}
func (m *ConsensusChallenge) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusChallenge proto.InternalMessageInfo

func (m *ConsensusChallenge) GetConsensusinfo() *ConsensusChallenge_ConsensusInfo {
	if m != nil {
		return m.Consensusinfo
	}
	return nil
}

func (m *ConsensusChallenge) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *ConsensusChallenge) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ConsensusChallenge_SubsetInfo struct {
	Aggregatedcommit     *ByteArray `protobuf:"bytes,1,opt,name=aggregatedcommit,proto3" json:"aggregatedcommit,omitempty"`
	Aggregatedkey        *ByteArray `protobuf:"bytes,2,opt,name=aggregatedkey,proto3" json:"aggregatedkey,omitempty"`
	Challenge            *ByteArray `protobuf:"bytes,3,opt,name=challenge,proto3" json:"challenge,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ConsensusChallenge_SubsetInfo) Reset()         { *m = ConsensusChallenge_SubsetInfo{} }
func (m *ConsensusChallenge_SubsetInfo) String() string { return proto.CompactTextString(m) }
func (*ConsensusChallenge_SubsetInfo) ProtoMessage()    {}
func (*ConsensusChallenge_SubsetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{92, 0}
}
func (m *ConsensusChallenge_SubsetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusChallenge_SubsetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusChallenge_SubsetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusChallenge_SubsetInfo.Merge(m, src)
}
func (m *ConsensusChallenge_SubsetInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusChallenge_SubsetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusChallenge_SubsetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusChallenge_SubsetInfo proto.InternalMessageInfo

func (m *ConsensusChallenge_SubsetInfo) GetAggregatedcommit() *ByteArray {
	if m != nil {
		return m.Aggregatedcommit
	}
	return nil
}

func (m *ConsensusChallenge_SubsetInfo) GetAggregatedkey() *ByteArray {
	if m != nil {
		return m.Aggregatedkey
	}
	return nil
}

func (m *ConsensusChallenge_SubsetInfo) GetChallenge() *ByteArray {
	if m != nil {
		return m.Challenge
	}
	return nil
}

type ConsensusChallenge_ConsensusInfo struct {
	Consensusid          uint32                           `protobuf:"varint,1,opt,name=consensusid,proto3" json:"consensusid,omitempty"`
	Blocknumber          uint64                           `protobuf:"varint,2,opt,name=blocknumber,proto3" json:"blocknumber,omitempty"`
	Blockhash            []byte                           `protobuf:"bytes,3,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	Leaderid             uint32                           `protobuf:"varint,4,opt,name=leaderid,proto3" json:"leaderid,omitempty"`
	Subsetinfo           []*ConsensusChallenge_SubsetInfo `protobuf:"bytes,5,rep,name=subsetinfo,proto3" json:"subsetinfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ConsensusChallenge_ConsensusInfo) Reset()         { *m = ConsensusChallenge_ConsensusInfo{} }
func (m *ConsensusChallenge_ConsensusInfo) String() string { return proto.CompactTextString(m) }
func (*ConsensusChallenge_ConsensusInfo) ProtoMessage()    {}
func (*ConsensusChallenge_ConsensusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{92, 1}
}
func (m *ConsensusChallenge_ConsensusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusChallenge_ConsensusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusChallenge_ConsensusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusChallenge_ConsensusInfo.Merge(m, src)
}
func (m *ConsensusChallenge_ConsensusInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusChallenge_ConsensusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusChallenge_ConsensusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusChallenge_ConsensusInfo proto.InternalMessageInfo

func (m *ConsensusChallenge_ConsensusInfo) GetConsensusid() uint32 {
	if m != nil {
		return m.Consensusid
	}
	return 0
}

func (m *ConsensusChallenge_ConsensusInfo) GetBlocknumber() uint64 {
	if m != nil {
		return m.Blocknumber
	}
	return 0
}

func (m *ConsensusChallenge_ConsensusInfo) GetBlockhash() []byte {
	if m != nil {
		return m.Blockhash
	}
	return nil
}

func (m *ConsensusChallenge_ConsensusInfo) GetLeaderid() uint32 {
	if m != nil {
		return m.Leaderid
	}
	return 0
}

func (m *ConsensusChallenge_ConsensusInfo) GetSubsetinfo() []*ConsensusChallenge_SubsetInfo {
	if m != nil {
		return m.Subsetinfo
	}
	return nil
}

type ConsensusResponse struct {
	Consensusinfo        *ConsensusResponse_ConsensusInfo `protobuf:"bytes,1,opt,name=consensusinfo,proto3" json:"consensusinfo,omitempty"`
	Pubkey               *ByteArray                       `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                       `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ConsensusResponse) Reset()         { *m = ConsensusResponse{} }
func (m *ConsensusResponse) String() string { return proto.CompactTextString(m) }
func (*ConsensusResponse) ProtoMessage()    {}
func (*ConsensusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{93}
}
func (m *ConsensusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusResponse.Merge(m, src)
}
func (m *ConsensusResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusResponse proto.InternalMessageInfo

func (m *ConsensusResponse) GetConsensusinfo() *ConsensusResponse_ConsensusInfo {
	if m != nil {
		return m.Consensusinfo
	}
	return nil
}

func (m *ConsensusResponse) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *ConsensusResponse) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ConsensusResponse_SubsetInfo struct {
	Response             *ByteArray `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ConsensusResponse_SubsetInfo) Reset()         { *m = ConsensusResponse_SubsetInfo{} }
func (m *ConsensusResponse_SubsetInfo) String() string { return proto.CompactTextString(m) }
func (*ConsensusResponse_SubsetInfo) ProtoMessage()    {}
func (*ConsensusResponse_SubsetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{93, 0}
}
func (m *ConsensusResponse_SubsetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusResponse_SubsetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusResponse_SubsetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusResponse_SubsetInfo.Merge(m, src)
}
func (m *ConsensusResponse_SubsetInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusResponse_SubsetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusResponse_SubsetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusResponse_SubsetInfo proto.InternalMessageInfo

func (m *ConsensusResponse_SubsetInfo) GetResponse() *ByteArray {
	if m != nil {
		return m.Response
	}
	return nil
}

type ConsensusResponse_ConsensusInfo struct {
	Consensusid          uint32                          `protobuf:"varint,1,opt,name=consensusid,proto3" json:"consensusid,omitempty"`
	Blocknumber          uint64                          `protobuf:"varint,2,opt,name=blocknumber,proto3" json:"blocknumber,omitempty"`
	Blockhash            []byte                          `protobuf:"bytes,3,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	Backupid             uint32                          `protobuf:"varint,4,opt,name=backupid,proto3" json:"backupid,omitempty"`
	Subsetinfo           []*ConsensusResponse_SubsetInfo `protobuf:"bytes,5,rep,name=subsetinfo,proto3" json:"subsetinfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ConsensusResponse_ConsensusInfo) Reset()         { *m = ConsensusResponse_ConsensusInfo{} }
func (m *ConsensusResponse_ConsensusInfo) String() string { return proto.CompactTextString(m) }
func (*ConsensusResponse_ConsensusInfo) ProtoMessage()    {}
func (*ConsensusResponse_ConsensusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{93, 1}
}
func (m *ConsensusResponse_ConsensusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusResponse_ConsensusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusResponse_ConsensusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusResponse_ConsensusInfo.Merge(m, src)
}
func (m *ConsensusResponse_ConsensusInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusResponse_ConsensusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusResponse_ConsensusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusResponse_ConsensusInfo proto.InternalMessageInfo

func (m *ConsensusResponse_ConsensusInfo) GetConsensusid() uint32 {
	if m != nil {
		return m.Consensusid
	}
	return 0
}

func (m *ConsensusResponse_ConsensusInfo) GetBlocknumber() uint64 {
	if m != nil {
		return m.Blocknumber
	}
	return 0
}

func (m *ConsensusResponse_ConsensusInfo) GetBlockhash() []byte {
	if m != nil {
		return m.Blockhash
	}
	return nil
}

func (m *ConsensusResponse_ConsensusInfo) GetBackupid() uint32 {
	if m != nil {
		return m.Backupid
	}
	return 0
}

func (m *ConsensusResponse_ConsensusInfo) GetSubsetinfo() []*ConsensusResponse_SubsetInfo {
	if m != nil {
		return m.Subsetinfo
	}
	return nil
}

type ConsensusCollectiveSig struct {
	Consensusinfo        *ConsensusCollectiveSig_ConsensusInfo `protobuf:"bytes,1,opt,name=consensusinfo,proto3" json:"consensusinfo,omitempty"`
	Pubkey               *ByteArray                            `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                            `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ConsensusCollectiveSig) Reset()         { *m = ConsensusCollectiveSig{} }
func (m *ConsensusCollectiveSig) String() string { return proto.CompactTextString(m) }
func (*ConsensusCollectiveSig) ProtoMessage()    {}
func (*ConsensusCollectiveSig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{94}
}
func (m *ConsensusCollectiveSig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusCollectiveSig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusCollectiveSig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusCollectiveSig.Merge(m, src)
}
func (m *ConsensusCollectiveSig) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusCollectiveSig) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusCollectiveSig.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusCollectiveSig proto.InternalMessageInfo

func (m *ConsensusCollectiveSig) GetConsensusinfo() *ConsensusCollectiveSig_ConsensusInfo {
	if m != nil {
		return m.Consensusinfo
	}
	return nil
}

func (m *ConsensusCollectiveSig) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *ConsensusCollectiveSig) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ConsensusCollectiveSig_ConsensusInfo struct {
	Consensusid          uint32     `protobuf:"varint,1,opt,name=consensusid,proto3" json:"consensusid,omitempty"`
	Blocknumber          uint64     `protobuf:"varint,2,opt,name=blocknumber,proto3" json:"blocknumber,omitempty"`
	Blockhash            []byte     `protobuf:"bytes,3,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	Leaderid             uint32     `protobuf:"varint,4,opt,name=leaderid,proto3" json:"leaderid,omitempty"`
	Collectivesig        *ByteArray `protobuf:"bytes,5,opt,name=collectivesig,proto3" json:"collectivesig,omitempty"`
	Bitmap               []bool     `protobuf:"varint,6,rep,packed,name=bitmap,proto3" json:"bitmap,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ConsensusCollectiveSig_ConsensusInfo) Reset()         { *m = ConsensusCollectiveSig_ConsensusInfo{} }
func (m *ConsensusCollectiveSig_ConsensusInfo) String() string { return proto.CompactTextString(m) }
func (*ConsensusCollectiveSig_ConsensusInfo) ProtoMessage()    {}
func (*ConsensusCollectiveSig_ConsensusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{94, 0}
}
func (m *ConsensusCollectiveSig_ConsensusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusCollectiveSig_ConsensusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusCollectiveSig_ConsensusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusCollectiveSig_ConsensusInfo.Merge(m, src)
}
func (m *ConsensusCollectiveSig_ConsensusInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusCollectiveSig_ConsensusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusCollectiveSig_ConsensusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusCollectiveSig_ConsensusInfo proto.InternalMessageInfo

func (m *ConsensusCollectiveSig_ConsensusInfo) GetConsensusid() uint32 {
	if m != nil {
		return m.Consensusid
	}
	return 0
}

func (m *ConsensusCollectiveSig_ConsensusInfo) GetBlocknumber() uint64 {
	if m != nil {
		return m.Blocknumber
	}
	return 0
}

func (m *ConsensusCollectiveSig_ConsensusInfo) GetBlockhash() []byte {
	if m != nil {
		return m.Blockhash
	}
	return nil
}

func (m *ConsensusCollectiveSig_ConsensusInfo) GetLeaderid() uint32 {
	if m != nil {
		return m.Leaderid
	}
	return 0
}

func (m *ConsensusCollectiveSig_ConsensusInfo) GetCollectivesig() *ByteArray {
	if m != nil {
		return m.Collectivesig
	}
	return nil
}

func (m *ConsensusCollectiveSig_ConsensusInfo) GetBitmap() []bool {
	if m != nil {
		return m.Bitmap
	}
	return nil
}

type ConsensusCommitFailure struct {
	Consensusinfo        *ConsensusCommitFailure_ConsensusInfo `protobuf:"bytes,1,opt,name=consensusinfo,proto3" json:"consensusinfo,omitempty"`
	Pubkey               *ByteArray                            `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                            `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ConsensusCommitFailure) Reset()         { *m = ConsensusCommitFailure{} }
func (m *ConsensusCommitFailure) String() string { return proto.CompactTextString(m) }
func (*ConsensusCommitFailure) ProtoMessage()    {}
func (*ConsensusCommitFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{95}
}
func (m *ConsensusCommitFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusCommitFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusCommitFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusCommitFailure.Merge(m, src)
}
func (m *ConsensusCommitFailure) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusCommitFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusCommitFailure.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusCommitFailure proto.InternalMessageInfo

func (m *ConsensusCommitFailure) GetConsensusinfo() *ConsensusCommitFailure_ConsensusInfo {
	if m != nil {
		return m.Consensusinfo
	}
	return nil
}

func (m *ConsensusCommitFailure) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *ConsensusCommitFailure) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ConsensusCommitFailure_ConsensusInfo struct {
	Consensusid          uint32   `protobuf:"varint,1,opt,name=consensusid,proto3" json:"consensusid,omitempty"`
	Blocknumber          uint64   `protobuf:"varint,2,opt,name=blocknumber,proto3" json:"blocknumber,omitempty"`
	Blockhash            []byte   `protobuf:"bytes,3,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	Backupid             uint32   `protobuf:"varint,4,opt,name=backupid,proto3" json:"backupid,omitempty"`
	Errormsg             []byte   `protobuf:"bytes,5,opt,name=errormsg,proto3" json:"errormsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsensusCommitFailure_ConsensusInfo) Reset()         { *m = ConsensusCommitFailure_ConsensusInfo{} }
func (m *ConsensusCommitFailure_ConsensusInfo) String() string { return proto.CompactTextString(m) }
func (*ConsensusCommitFailure_ConsensusInfo) ProtoMessage()    {}
func (*ConsensusCommitFailure_ConsensusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{95, 0}
}
func (m *ConsensusCommitFailure_ConsensusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusCommitFailure_ConsensusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusCommitFailure_ConsensusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusCommitFailure_ConsensusInfo.Merge(m, src)
}
func (m *ConsensusCommitFailure_ConsensusInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusCommitFailure_ConsensusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusCommitFailure_ConsensusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusCommitFailure_ConsensusInfo proto.InternalMessageInfo

func (m *ConsensusCommitFailure_ConsensusInfo) GetConsensusid() uint32 {
	if m != nil {
		return m.Consensusid
	}
	return 0
}

func (m *ConsensusCommitFailure_ConsensusInfo) GetBlocknumber() uint64 {
	if m != nil {
		return m.Blocknumber
	}
	return 0
}

func (m *ConsensusCommitFailure_ConsensusInfo) GetBlockhash() []byte {
	if m != nil {
		return m.Blockhash
	}
	return nil
}

func (m *ConsensusCommitFailure_ConsensusInfo) GetBackupid() uint32 {
	if m != nil {
		return m.Backupid
	}
	return 0
}

func (m *ConsensusCommitFailure_ConsensusInfo) GetErrormsg() []byte {
	if m != nil {
		return m.Errormsg
	}
	return nil
}

type ConsensusConsensusFailure struct {
	Consensusinfo        *ConsensusConsensusFailure_ConsensusInfo `protobuf:"bytes,1,opt,name=consensusinfo,proto3" json:"consensusinfo,omitempty"`
	Pubkey               *ByteArray                               `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                               `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *ConsensusConsensusFailure) Reset()         { *m = ConsensusConsensusFailure{} }
func (m *ConsensusConsensusFailure) String() string { return proto.CompactTextString(m) }
func (*ConsensusConsensusFailure) ProtoMessage()    {}
func (*ConsensusConsensusFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{96}
}
func (m *ConsensusConsensusFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusConsensusFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusConsensusFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusConsensusFailure.Merge(m, src)
}
func (m *ConsensusConsensusFailure) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusConsensusFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusConsensusFailure.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusConsensusFailure proto.InternalMessageInfo

func (m *ConsensusConsensusFailure) GetConsensusinfo() *ConsensusConsensusFailure_ConsensusInfo {
	if m != nil {
		return m.Consensusinfo
	}
	return nil
}

func (m *ConsensusConsensusFailure) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *ConsensusConsensusFailure) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ConsensusConsensusFailure_ConsensusInfo struct {
	Consensusid          uint32   `protobuf:"varint,1,opt,name=consensusid,proto3" json:"consensusid,omitempty"`
	Blocknumber          uint64   `protobuf:"varint,2,opt,name=blocknumber,proto3" json:"blocknumber,omitempty"`
	Blockhash            []byte   `protobuf:"bytes,3,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	Leaderid             uint32   `protobuf:"varint,4,opt,name=leaderid,proto3" json:"leaderid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsensusConsensusFailure_ConsensusInfo) Reset() {
	*m = ConsensusConsensusFailure_ConsensusInfo{}
}
func (m *ConsensusConsensusFailure_ConsensusInfo) String() string { return proto.CompactTextString(m) }
func (*ConsensusConsensusFailure_ConsensusInfo) ProtoMessage()    {}
func (*ConsensusConsensusFailure_ConsensusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{96, 0}
}
func (m *ConsensusConsensusFailure_ConsensusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusConsensusFailure_ConsensusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusConsensusFailure_ConsensusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusConsensusFailure_ConsensusInfo.Merge(m, src)
}
func (m *ConsensusConsensusFailure_ConsensusInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusConsensusFailure_ConsensusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusConsensusFailure_ConsensusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusConsensusFailure_ConsensusInfo proto.InternalMessageInfo

func (m *ConsensusConsensusFailure_ConsensusInfo) GetConsensusid() uint32 {
	if m != nil {
		return m.Consensusid
	}
	return 0
}

func (m *ConsensusConsensusFailure_ConsensusInfo) GetBlocknumber() uint64 {
	if m != nil {
		return m.Blocknumber
	}
	return 0
}

func (m *ConsensusConsensusFailure_ConsensusInfo) GetBlockhash() []byte {
	if m != nil {
		return m.Blockhash
	}
	return nil
}

func (m *ConsensusConsensusFailure_ConsensusInfo) GetLeaderid() uint32 {
	if m != nil {
		return m.Leaderid
	}
	return 0
}

// From node undergoing vc pre check to fetch latest blocks
type LookupGetDSTxBlockFromSeed struct {
	Dslowblocknum        uint64   `protobuf:"varint,1,opt,name=dslowblocknum,proto3" json:"dslowblocknum,omitempty"`
	Dshighblocknum       uint64   `protobuf:"varint,2,opt,name=dshighblocknum,proto3" json:"dshighblocknum,omitempty"`
	Txlowblocknum        uint64   `protobuf:"varint,3,opt,name=txlowblocknum,proto3" json:"txlowblocknum,omitempty"`
	Txhighblocknum       uint64   `protobuf:"varint,4,opt,name=txhighblocknum,proto3" json:"txhighblocknum,omitempty"`
	Listenport           uint32   `protobuf:"varint,5,opt,name=listenport,proto3" json:"listenport,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupGetDSTxBlockFromSeed) Reset()         { *m = LookupGetDSTxBlockFromSeed{} }
func (m *LookupGetDSTxBlockFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupGetDSTxBlockFromSeed) ProtoMessage()    {}
func (*LookupGetDSTxBlockFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{97}
}
func (m *LookupGetDSTxBlockFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetDSTxBlockFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetDSTxBlockFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetDSTxBlockFromSeed.Merge(m, src)
}
func (m *LookupGetDSTxBlockFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetDSTxBlockFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetDSTxBlockFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetDSTxBlockFromSeed proto.InternalMessageInfo

func (m *LookupGetDSTxBlockFromSeed) GetDslowblocknum() uint64 {
	if m != nil {
		return m.Dslowblocknum
	}
	return 0
}

func (m *LookupGetDSTxBlockFromSeed) GetDshighblocknum() uint64 {
	if m != nil {
		return m.Dshighblocknum
	}
	return 0
}

func (m *LookupGetDSTxBlockFromSeed) GetTxlowblocknum() uint64 {
	if m != nil {
		return m.Txlowblocknum
	}
	return 0
}

func (m *LookupGetDSTxBlockFromSeed) GetTxhighblocknum() uint64 {
	if m != nil {
		return m.Txhighblocknum
	}
	return 0
}

func (m *LookupGetDSTxBlockFromSeed) GetListenport() uint32 {
	if m != nil {
		return m.Listenport
	}
	return 0
}

// From lookup nodes to node under going vc pre check
type VCNodeSetDSTxBlockFromSeed struct {
	Data                 *VCNodeSetDSTxBlockFromSeed_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                       `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                       `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *VCNodeSetDSTxBlockFromSeed) Reset()         { *m = VCNodeSetDSTxBlockFromSeed{} }
func (m *VCNodeSetDSTxBlockFromSeed) String() string { return proto.CompactTextString(m) }
func (*VCNodeSetDSTxBlockFromSeed) ProtoMessage()    {}
func (*VCNodeSetDSTxBlockFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{98}
}
func (m *VCNodeSetDSTxBlockFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VCNodeSetDSTxBlockFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VCNodeSetDSTxBlockFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VCNodeSetDSTxBlockFromSeed.Merge(m, src)
}
func (m *VCNodeSetDSTxBlockFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *VCNodeSetDSTxBlockFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_VCNodeSetDSTxBlockFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_VCNodeSetDSTxBlockFromSeed proto.InternalMessageInfo

func (m *VCNodeSetDSTxBlockFromSeed) GetData() *VCNodeSetDSTxBlockFromSeed_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *VCNodeSetDSTxBlockFromSeed) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *VCNodeSetDSTxBlockFromSeed) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type VCNodeSetDSTxBlockFromSeed_Data struct {
	Dsblocks             []*ProtoDSBlock `protobuf:"bytes,1,rep,name=dsblocks,proto3" json:"dsblocks,omitempty"`
	Txblocks             []*ProtoTxBlock `protobuf:"bytes,2,rep,name=txblocks,proto3" json:"txblocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *VCNodeSetDSTxBlockFromSeed_Data) Reset()         { *m = VCNodeSetDSTxBlockFromSeed_Data{} }
func (m *VCNodeSetDSTxBlockFromSeed_Data) String() string { return proto.CompactTextString(m) }
func (*VCNodeSetDSTxBlockFromSeed_Data) ProtoMessage()    {}
func (*VCNodeSetDSTxBlockFromSeed_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{98, 0}
}
func (m *VCNodeSetDSTxBlockFromSeed_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VCNodeSetDSTxBlockFromSeed_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VCNodeSetDSTxBlockFromSeed_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VCNodeSetDSTxBlockFromSeed_Data.Merge(m, src)
}
func (m *VCNodeSetDSTxBlockFromSeed_Data) XXX_Size() int {
	return m.Size()
}
func (m *VCNodeSetDSTxBlockFromSeed_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_VCNodeSetDSTxBlockFromSeed_Data.DiscardUnknown(m)
}

var xxx_messageInfo_VCNodeSetDSTxBlockFromSeed_Data proto.InternalMessageInfo

func (m *VCNodeSetDSTxBlockFromSeed_Data) GetDsblocks() []*ProtoDSBlock {
	if m != nil {
		return m.Dsblocks
	}
	return nil
}

func (m *VCNodeSetDSTxBlockFromSeed_Data) GetTxblocks() []*ProtoTxBlock {
	if m != nil {
		return m.Txblocks
	}
	return nil
}

// From shard node to lookup/dsCommittee. New shard node network info.
type NodeSetShardNodeNetworkInfoUpdate struct {
	Data                 *NodeSetShardNodeNetworkInfoUpdate_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Signature            *ByteArray                              `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *NodeSetShardNodeNetworkInfoUpdate) Reset()         { *m = NodeSetShardNodeNetworkInfoUpdate{} }
func (m *NodeSetShardNodeNetworkInfoUpdate) String() string { return proto.CompactTextString(m) }
func (*NodeSetShardNodeNetworkInfoUpdate) ProtoMessage()    {}
func (*NodeSetShardNodeNetworkInfoUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{99}
}
func (m *NodeSetShardNodeNetworkInfoUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeSetShardNodeNetworkInfoUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeSetShardNodeNetworkInfoUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSetShardNodeNetworkInfoUpdate.Merge(m, src)
}
func (m *NodeSetShardNodeNetworkInfoUpdate) XXX_Size() int {
	return m.Size()
}
func (m *NodeSetShardNodeNetworkInfoUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSetShardNodeNetworkInfoUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSetShardNodeNetworkInfoUpdate proto.InternalMessageInfo

func (m *NodeSetShardNodeNetworkInfoUpdate) GetData() *NodeSetShardNodeNetworkInfoUpdate_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *NodeSetShardNodeNetworkInfoUpdate) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type NodeSetShardNodeNetworkInfoUpdate_Data struct {
	Dsepochnumber           uint64     `protobuf:"varint,1,opt,name=dsepochnumber,proto3" json:"dsepochnumber,omitempty"`
	Shardnodepubkey         *ByteArray `protobuf:"bytes,2,opt,name=shardnodepubkey,proto3" json:"shardnodepubkey,omitempty"`
	Shardnodenewnetworkinfo *ProtoPeer `protobuf:"bytes,3,opt,name=shardnodenewnetworkinfo,proto3" json:"shardnodenewnetworkinfo,omitempty"`
	Timestamp               uint64     `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}   `json:"-"`
	XXX_unrecognized        []byte     `json:"-"`
	XXX_sizecache           int32      `json:"-"`
}

func (m *NodeSetShardNodeNetworkInfoUpdate_Data) Reset() {
	*m = NodeSetShardNodeNetworkInfoUpdate_Data{}
}
func (m *NodeSetShardNodeNetworkInfoUpdate_Data) String() string { return proto.CompactTextString(m) }
func (*NodeSetShardNodeNetworkInfoUpdate_Data) ProtoMessage()    {}
func (*NodeSetShardNodeNetworkInfoUpdate_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{99, 0}
}
func (m *NodeSetShardNodeNetworkInfoUpdate_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeSetShardNodeNetworkInfoUpdate_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeSetShardNodeNetworkInfoUpdate_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSetShardNodeNetworkInfoUpdate_Data.Merge(m, src)
}
func (m *NodeSetShardNodeNetworkInfoUpdate_Data) XXX_Size() int {
	return m.Size()
}
func (m *NodeSetShardNodeNetworkInfoUpdate_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSetShardNodeNetworkInfoUpdate_Data.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSetShardNodeNetworkInfoUpdate_Data proto.InternalMessageInfo

func (m *NodeSetShardNodeNetworkInfoUpdate_Data) GetDsepochnumber() uint64 {
	if m != nil {
		return m.Dsepochnumber
	}
	return 0
}

func (m *NodeSetShardNodeNetworkInfoUpdate_Data) GetShardnodepubkey() *ByteArray {
	if m != nil {
		return m.Shardnodepubkey
	}
	return nil
}

func (m *NodeSetShardNodeNetworkInfoUpdate_Data) GetShardnodenewnetworkinfo() *ProtoPeer {
	if m != nil {
		return m.Shardnodenewnetworkinfo
	}
	return nil
}

func (m *NodeSetShardNodeNetworkInfoUpdate_Data) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// From DS Guard to lookup. New DS guard node network info.
type DSLookupSetDSGuardNetworkInfoUpdate struct {
	Data                 *DSLookupSetDSGuardNetworkInfoUpdate_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Signature            *ByteArray                                `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *DSLookupSetDSGuardNetworkInfoUpdate) Reset()         { *m = DSLookupSetDSGuardNetworkInfoUpdate{} }
func (m *DSLookupSetDSGuardNetworkInfoUpdate) String() string { return proto.CompactTextString(m) }
func (*DSLookupSetDSGuardNetworkInfoUpdate) ProtoMessage()    {}
func (*DSLookupSetDSGuardNetworkInfoUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{100}
}
func (m *DSLookupSetDSGuardNetworkInfoUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DSLookupSetDSGuardNetworkInfoUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DSLookupSetDSGuardNetworkInfoUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSLookupSetDSGuardNetworkInfoUpdate.Merge(m, src)
}
func (m *DSLookupSetDSGuardNetworkInfoUpdate) XXX_Size() int {
	return m.Size()
}
func (m *DSLookupSetDSGuardNetworkInfoUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_DSLookupSetDSGuardNetworkInfoUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_DSLookupSetDSGuardNetworkInfoUpdate proto.InternalMessageInfo

func (m *DSLookupSetDSGuardNetworkInfoUpdate) GetData() *DSLookupSetDSGuardNetworkInfoUpdate_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DSLookupSetDSGuardNetworkInfoUpdate) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type DSLookupSetDSGuardNetworkInfoUpdate_Data struct {
	Dsepochnumber         uint64     `protobuf:"varint,1,opt,name=dsepochnumber,proto3" json:"dsepochnumber,omitempty"`
	Dsguardpubkey         *ByteArray `protobuf:"bytes,2,opt,name=dsguardpubkey,proto3" json:"dsguardpubkey,omitempty"`
	Dsguardnewnetworkinfo *ProtoPeer `protobuf:"bytes,3,opt,name=dsguardnewnetworkinfo,proto3" json:"dsguardnewnetworkinfo,omitempty"`
	Timestamp             uint64     `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}   `json:"-"`
	XXX_unrecognized      []byte     `json:"-"`
	XXX_sizecache         int32      `json:"-"`
}

func (m *DSLookupSetDSGuardNetworkInfoUpdate_Data) Reset() {
	*m = DSLookupSetDSGuardNetworkInfoUpdate_Data{}
}
func (m *DSLookupSetDSGuardNetworkInfoUpdate_Data) String() string { return proto.CompactTextString(m) }
func (*DSLookupSetDSGuardNetworkInfoUpdate_Data) ProtoMessage()    {}
func (*DSLookupSetDSGuardNetworkInfoUpdate_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{100, 0}
}
func (m *DSLookupSetDSGuardNetworkInfoUpdate_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DSLookupSetDSGuardNetworkInfoUpdate_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DSLookupSetDSGuardNetworkInfoUpdate_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSLookupSetDSGuardNetworkInfoUpdate_Data.Merge(m, src)
}
func (m *DSLookupSetDSGuardNetworkInfoUpdate_Data) XXX_Size() int {
	return m.Size()
}
func (m *DSLookupSetDSGuardNetworkInfoUpdate_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_DSLookupSetDSGuardNetworkInfoUpdate_Data.DiscardUnknown(m)
}

var xxx_messageInfo_DSLookupSetDSGuardNetworkInfoUpdate_Data proto.InternalMessageInfo

func (m *DSLookupSetDSGuardNetworkInfoUpdate_Data) GetDsepochnumber() uint64 {
	if m != nil {
		return m.Dsepochnumber
	}
	return 0
}

func (m *DSLookupSetDSGuardNetworkInfoUpdate_Data) GetDsguardpubkey() *ByteArray {
	if m != nil {
		return m.Dsguardpubkey
	}
	return nil
}

func (m *DSLookupSetDSGuardNetworkInfoUpdate_Data) GetDsguardnewnetworkinfo() *ProtoPeer {
	if m != nil {
		return m.Dsguardnewnetworkinfo
	}
	return nil
}

func (m *DSLookupSetDSGuardNetworkInfoUpdate_Data) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// To update shard node of guard node's network info change
type NodeGetGuardNodeNetworkInfoUpdate struct {
	Data                 *NodeGetGuardNodeNetworkInfoUpdate_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                              `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                              `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *NodeGetGuardNodeNetworkInfoUpdate) Reset()         { *m = NodeGetGuardNodeNetworkInfoUpdate{} }
func (m *NodeGetGuardNodeNetworkInfoUpdate) String() string { return proto.CompactTextString(m) }
func (*NodeGetGuardNodeNetworkInfoUpdate) ProtoMessage()    {}
func (*NodeGetGuardNodeNetworkInfoUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{101}
}
func (m *NodeGetGuardNodeNetworkInfoUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeGetGuardNodeNetworkInfoUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeGetGuardNodeNetworkInfoUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeGetGuardNodeNetworkInfoUpdate.Merge(m, src)
}
func (m *NodeGetGuardNodeNetworkInfoUpdate) XXX_Size() int {
	return m.Size()
}
func (m *NodeGetGuardNodeNetworkInfoUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeGetGuardNodeNetworkInfoUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NodeGetGuardNodeNetworkInfoUpdate proto.InternalMessageInfo

func (m *NodeGetGuardNodeNetworkInfoUpdate) GetData() *NodeGetGuardNodeNetworkInfoUpdate_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *NodeGetGuardNodeNetworkInfoUpdate) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *NodeGetGuardNodeNetworkInfoUpdate) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type NodeGetGuardNodeNetworkInfoUpdate_Data struct {
	Portno               uint32   `protobuf:"varint,1,opt,name=portno,proto3" json:"portno,omitempty"`
	Dsepochnumber        uint64   `protobuf:"varint,2,opt,name=dsepochnumber,proto3" json:"dsepochnumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeGetGuardNodeNetworkInfoUpdate_Data) Reset() {
	*m = NodeGetGuardNodeNetworkInfoUpdate_Data{}
}
func (m *NodeGetGuardNodeNetworkInfoUpdate_Data) String() string { return proto.CompactTextString(m) }
func (*NodeGetGuardNodeNetworkInfoUpdate_Data) ProtoMessage()    {}
func (*NodeGetGuardNodeNetworkInfoUpdate_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{101, 0}
}
func (m *NodeGetGuardNodeNetworkInfoUpdate_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeGetGuardNodeNetworkInfoUpdate_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeGetGuardNodeNetworkInfoUpdate_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeGetGuardNodeNetworkInfoUpdate_Data.Merge(m, src)
}
func (m *NodeGetGuardNodeNetworkInfoUpdate_Data) XXX_Size() int {
	return m.Size()
}
func (m *NodeGetGuardNodeNetworkInfoUpdate_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeGetGuardNodeNetworkInfoUpdate_Data.DiscardUnknown(m)
}

var xxx_messageInfo_NodeGetGuardNodeNetworkInfoUpdate_Data proto.InternalMessageInfo

func (m *NodeGetGuardNodeNetworkInfoUpdate_Data) GetPortno() uint32 {
	if m != nil {
		return m.Portno
	}
	return 0
}

func (m *NodeGetGuardNodeNetworkInfoUpdate_Data) GetDsepochnumber() uint64 {
	if m != nil {
		return m.Dsepochnumber
	}
	return 0
}

type ProtoDSGuardUpdateStruct struct {
	Dsguardpubkey         *ByteArray `protobuf:"bytes,1,opt,name=dsguardpubkey,proto3" json:"dsguardpubkey,omitempty"`
	Dsguardnewnetworkinfo *ProtoPeer `protobuf:"bytes,2,opt,name=dsguardnewnetworkinfo,proto3" json:"dsguardnewnetworkinfo,omitempty"`
	Timestamp             uint64     `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}   `json:"-"`
	XXX_unrecognized      []byte     `json:"-"`
	XXX_sizecache         int32      `json:"-"`
}

func (m *ProtoDSGuardUpdateStruct) Reset()         { *m = ProtoDSGuardUpdateStruct{} }
func (m *ProtoDSGuardUpdateStruct) String() string { return proto.CompactTextString(m) }
func (*ProtoDSGuardUpdateStruct) ProtoMessage()    {}
func (*ProtoDSGuardUpdateStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{102}
}
func (m *ProtoDSGuardUpdateStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoDSGuardUpdateStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoDSGuardUpdateStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoDSGuardUpdateStruct.Merge(m, src)
}
func (m *ProtoDSGuardUpdateStruct) XXX_Size() int {
	return m.Size()
}
func (m *ProtoDSGuardUpdateStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoDSGuardUpdateStruct.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoDSGuardUpdateStruct proto.InternalMessageInfo

func (m *ProtoDSGuardUpdateStruct) GetDsguardpubkey() *ByteArray {
	if m != nil {
		return m.Dsguardpubkey
	}
	return nil
}

func (m *ProtoDSGuardUpdateStruct) GetDsguardnewnetworkinfo() *ProtoPeer {
	if m != nil {
		return m.Dsguardnewnetworkinfo
	}
	return nil
}

func (m *ProtoDSGuardUpdateStruct) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// From sending New DS guard node network info to requesing shard node
type NodeSetGuardNodeNetworkInfoUpdate struct {
	Data                 *NodeSetGuardNodeNetworkInfoUpdate_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Lookuppubkey         *ByteArray                              `protobuf:"bytes,2,opt,name=lookuppubkey,proto3" json:"lookuppubkey,omitempty"`
	Signature            *ByteArray                              `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *NodeSetGuardNodeNetworkInfoUpdate) Reset()         { *m = NodeSetGuardNodeNetworkInfoUpdate{} }
func (m *NodeSetGuardNodeNetworkInfoUpdate) String() string { return proto.CompactTextString(m) }
func (*NodeSetGuardNodeNetworkInfoUpdate) ProtoMessage()    {}
func (*NodeSetGuardNodeNetworkInfoUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{103}
}
func (m *NodeSetGuardNodeNetworkInfoUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeSetGuardNodeNetworkInfoUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeSetGuardNodeNetworkInfoUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSetGuardNodeNetworkInfoUpdate.Merge(m, src)
}
func (m *NodeSetGuardNodeNetworkInfoUpdate) XXX_Size() int {
	return m.Size()
}
func (m *NodeSetGuardNodeNetworkInfoUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSetGuardNodeNetworkInfoUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSetGuardNodeNetworkInfoUpdate proto.InternalMessageInfo

func (m *NodeSetGuardNodeNetworkInfoUpdate) GetData() *NodeSetGuardNodeNetworkInfoUpdate_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *NodeSetGuardNodeNetworkInfoUpdate) GetLookuppubkey() *ByteArray {
	if m != nil {
		return m.Lookuppubkey
	}
	return nil
}

func (m *NodeSetGuardNodeNetworkInfoUpdate) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type NodeSetGuardNodeNetworkInfoUpdate_Data struct {
	Dsguardupdatestruct  []*ProtoDSGuardUpdateStruct `protobuf:"bytes,1,rep,name=dsguardupdatestruct,proto3" json:"dsguardupdatestruct,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NodeSetGuardNodeNetworkInfoUpdate_Data) Reset() {
	*m = NodeSetGuardNodeNetworkInfoUpdate_Data{}
}
func (m *NodeSetGuardNodeNetworkInfoUpdate_Data) String() string { return proto.CompactTextString(m) }
func (*NodeSetGuardNodeNetworkInfoUpdate_Data) ProtoMessage()    {}
func (*NodeSetGuardNodeNetworkInfoUpdate_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{103, 0}
}
func (m *NodeSetGuardNodeNetworkInfoUpdate_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeSetGuardNodeNetworkInfoUpdate_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeSetGuardNodeNetworkInfoUpdate_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSetGuardNodeNetworkInfoUpdate_Data.Merge(m, src)
}
func (m *NodeSetGuardNodeNetworkInfoUpdate_Data) XXX_Size() int {
	return m.Size()
}
func (m *NodeSetGuardNodeNetworkInfoUpdate_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSetGuardNodeNetworkInfoUpdate_Data.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSetGuardNodeNetworkInfoUpdate_Data proto.InternalMessageInfo

func (m *NodeSetGuardNodeNetworkInfoUpdate_Data) GetDsguardupdatestruct() []*ProtoDSGuardUpdateStruct {
	if m != nil {
		return m.Dsguardupdatestruct
	}
	return nil
}

type SeedSetHistoricalDB struct {
	Data                 *SeedSetHistoricalDB_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SeedSetHistoricalDB) Reset()         { *m = SeedSetHistoricalDB{} }
func (m *SeedSetHistoricalDB) String() string { return proto.CompactTextString(m) }
func (*SeedSetHistoricalDB) ProtoMessage()    {}
func (*SeedSetHistoricalDB) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{104}
}
func (m *SeedSetHistoricalDB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeedSetHistoricalDB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SeedSetHistoricalDB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeedSetHistoricalDB.Merge(m, src)
}
func (m *SeedSetHistoricalDB) XXX_Size() int {
	return m.Size()
}
func (m *SeedSetHistoricalDB) XXX_DiscardUnknown() {
	xxx_messageInfo_SeedSetHistoricalDB.DiscardUnknown(m)
}

var xxx_messageInfo_SeedSetHistoricalDB proto.InternalMessageInfo

func (m *SeedSetHistoricalDB) GetData() *SeedSetHistoricalDB_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SeedSetHistoricalDB) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *SeedSetHistoricalDB) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type SeedSetHistoricalDB_Data struct {
	Code                 uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Path                 string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeedSetHistoricalDB_Data) Reset()         { *m = SeedSetHistoricalDB_Data{} }
func (m *SeedSetHistoricalDB_Data) String() string { return proto.CompactTextString(m) }
func (*SeedSetHistoricalDB_Data) ProtoMessage()    {}
func (*SeedSetHistoricalDB_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{104, 0}
}
func (m *SeedSetHistoricalDB_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeedSetHistoricalDB_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SeedSetHistoricalDB_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeedSetHistoricalDB_Data.Merge(m, src)
}
func (m *SeedSetHistoricalDB_Data) XXX_Size() int {
	return m.Size()
}
func (m *SeedSetHistoricalDB_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_SeedSetHistoricalDB_Data.DiscardUnknown(m)
}

var xxx_messageInfo_SeedSetHistoricalDB_Data proto.InternalMessageInfo

func (m *SeedSetHistoricalDB_Data) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SeedSetHistoricalDB_Data) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// For removing sender from local blacklist
type NodeRemoveFromBlacklist struct {
	Data                 *NodeRemoveFromBlacklist_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                    `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                    `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *NodeRemoveFromBlacklist) Reset()         { *m = NodeRemoveFromBlacklist{} }
func (m *NodeRemoveFromBlacklist) String() string { return proto.CompactTextString(m) }
func (*NodeRemoveFromBlacklist) ProtoMessage()    {}
func (*NodeRemoveFromBlacklist) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{105}
}
func (m *NodeRemoveFromBlacklist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeRemoveFromBlacklist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeRemoveFromBlacklist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeRemoveFromBlacklist.Merge(m, src)
}
func (m *NodeRemoveFromBlacklist) XXX_Size() int {
	return m.Size()
}
func (m *NodeRemoveFromBlacklist) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeRemoveFromBlacklist.DiscardUnknown(m)
}

var xxx_messageInfo_NodeRemoveFromBlacklist proto.InternalMessageInfo

func (m *NodeRemoveFromBlacklist) GetData() *NodeRemoveFromBlacklist_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *NodeRemoveFromBlacklist) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *NodeRemoveFromBlacklist) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type NodeRemoveFromBlacklist_Data struct {
	IpAddress            *ByteArray `protobuf:"bytes,1,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	Dsepochnumber        uint64     `protobuf:"varint,2,opt,name=dsepochnumber,proto3" json:"dsepochnumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *NodeRemoveFromBlacklist_Data) Reset()         { *m = NodeRemoveFromBlacklist_Data{} }
func (m *NodeRemoveFromBlacklist_Data) String() string { return proto.CompactTextString(m) }
func (*NodeRemoveFromBlacklist_Data) ProtoMessage()    {}
func (*NodeRemoveFromBlacklist_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{105, 0}
}
func (m *NodeRemoveFromBlacklist_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeRemoveFromBlacklist_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeRemoveFromBlacklist_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeRemoveFromBlacklist_Data.Merge(m, src)
}
func (m *NodeRemoveFromBlacklist_Data) XXX_Size() int {
	return m.Size()
}
func (m *NodeRemoveFromBlacklist_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeRemoveFromBlacklist_Data.DiscardUnknown(m)
}

var xxx_messageInfo_NodeRemoveFromBlacklist_Data proto.InternalMessageInfo

func (m *NodeRemoveFromBlacklist_Data) GetIpAddress() *ByteArray {
	if m != nil {
		return m.IpAddress
	}
	return nil
}

func (m *NodeRemoveFromBlacklist_Data) GetDsepochnumber() uint64 {
	if m != nil {
		return m.Dsepochnumber
	}
	return 0
}

// Holds cosigs and rewards structure for specific shard of specific epoch
type ProtoCosigsRewardsStructure struct {
	Epochnumber          uint64          `protobuf:"varint,1,opt,name=epochnumber,proto3" json:"epochnumber,omitempty"`
	Shardid              int32           `protobuf:"varint,2,opt,name=shardid,proto3" json:"shardid,omitempty"`
	Blockbase            *ProtoBlockBase `protobuf:"bytes,3,opt,name=blockbase,proto3" json:"blockbase,omitempty"`
	Rewards              *ByteArray      `protobuf:"bytes,4,opt,name=rewards,proto3" json:"rewards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ProtoCosigsRewardsStructure) Reset()         { *m = ProtoCosigsRewardsStructure{} }
func (m *ProtoCosigsRewardsStructure) String() string { return proto.CompactTextString(m) }
func (*ProtoCosigsRewardsStructure) ProtoMessage()    {}
func (*ProtoCosigsRewardsStructure) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{106}
}
func (m *ProtoCosigsRewardsStructure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoCosigsRewardsStructure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtoCosigsRewardsStructure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoCosigsRewardsStructure.Merge(m, src)
}
func (m *ProtoCosigsRewardsStructure) XXX_Size() int {
	return m.Size()
}
func (m *ProtoCosigsRewardsStructure) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoCosigsRewardsStructure.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoCosigsRewardsStructure proto.InternalMessageInfo

func (m *ProtoCosigsRewardsStructure) GetEpochnumber() uint64 {
	if m != nil {
		return m.Epochnumber
	}
	return 0
}

func (m *ProtoCosigsRewardsStructure) GetShardid() int32 {
	if m != nil {
		return m.Shardid
	}
	return 0
}

func (m *ProtoCosigsRewardsStructure) GetBlockbase() *ProtoBlockBase {
	if m != nil {
		return m.Blockbase
	}
	return nil
}

func (m *ProtoCosigsRewardsStructure) GetRewards() *ByteArray {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// From DS node for fetching cosig/rewards from Lookup
type LookupGetCosigsRewardsFromSeed struct {
	Data                 *LookupGetCosigsRewardsFromSeed_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                           `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                           `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *LookupGetCosigsRewardsFromSeed) Reset()         { *m = LookupGetCosigsRewardsFromSeed{} }
func (m *LookupGetCosigsRewardsFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupGetCosigsRewardsFromSeed) ProtoMessage()    {}
func (*LookupGetCosigsRewardsFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{107}
}
func (m *LookupGetCosigsRewardsFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetCosigsRewardsFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetCosigsRewardsFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetCosigsRewardsFromSeed.Merge(m, src)
}
func (m *LookupGetCosigsRewardsFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetCosigsRewardsFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetCosigsRewardsFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetCosigsRewardsFromSeed proto.InternalMessageInfo

func (m *LookupGetCosigsRewardsFromSeed) GetData() *LookupGetCosigsRewardsFromSeed_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupGetCosigsRewardsFromSeed) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupGetCosigsRewardsFromSeed) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupGetCosigsRewardsFromSeed_Data struct {
	Portno               uint32   `protobuf:"varint,1,opt,name=portno,proto3" json:"portno,omitempty"`
	Epochnumber          uint64   `protobuf:"varint,2,opt,name=epochnumber,proto3" json:"epochnumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupGetCosigsRewardsFromSeed_Data) Reset()         { *m = LookupGetCosigsRewardsFromSeed_Data{} }
func (m *LookupGetCosigsRewardsFromSeed_Data) String() string { return proto.CompactTextString(m) }
func (*LookupGetCosigsRewardsFromSeed_Data) ProtoMessage()    {}
func (*LookupGetCosigsRewardsFromSeed_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{107, 0}
}
func (m *LookupGetCosigsRewardsFromSeed_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetCosigsRewardsFromSeed_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetCosigsRewardsFromSeed_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetCosigsRewardsFromSeed_Data.Merge(m, src)
}
func (m *LookupGetCosigsRewardsFromSeed_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetCosigsRewardsFromSeed_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetCosigsRewardsFromSeed_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetCosigsRewardsFromSeed_Data proto.InternalMessageInfo

func (m *LookupGetCosigsRewardsFromSeed_Data) GetPortno() uint32 {
	if m != nil {
		return m.Portno
	}
	return 0
}

func (m *LookupGetCosigsRewardsFromSeed_Data) GetEpochnumber() uint64 {
	if m != nil {
		return m.Epochnumber
	}
	return 0
}

// Lookup set cosigs/rewards for ds node
type LookupSetCosigsRewardsFromSeed struct {
	Data                 *LookupSetCosigsRewardsFromSeed_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                           `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                           `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *LookupSetCosigsRewardsFromSeed) Reset()         { *m = LookupSetCosigsRewardsFromSeed{} }
func (m *LookupSetCosigsRewardsFromSeed) String() string { return proto.CompactTextString(m) }
func (*LookupSetCosigsRewardsFromSeed) ProtoMessage()    {}
func (*LookupSetCosigsRewardsFromSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{108}
}
func (m *LookupSetCosigsRewardsFromSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetCosigsRewardsFromSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetCosigsRewardsFromSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetCosigsRewardsFromSeed.Merge(m, src)
}
func (m *LookupSetCosigsRewardsFromSeed) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetCosigsRewardsFromSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetCosigsRewardsFromSeed.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetCosigsRewardsFromSeed proto.InternalMessageInfo

func (m *LookupSetCosigsRewardsFromSeed) GetData() *LookupSetCosigsRewardsFromSeed_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupSetCosigsRewardsFromSeed) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupSetCosigsRewardsFromSeed) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupSetCosigsRewardsFromSeed_Data struct {
	Cosigsrewards        []*ProtoCosigsRewardsStructure `protobuf:"bytes,1,rep,name=cosigsrewards,proto3" json:"cosigsrewards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *LookupSetCosigsRewardsFromSeed_Data) Reset()         { *m = LookupSetCosigsRewardsFromSeed_Data{} }
func (m *LookupSetCosigsRewardsFromSeed_Data) String() string { return proto.CompactTextString(m) }
func (*LookupSetCosigsRewardsFromSeed_Data) ProtoMessage()    {}
func (*LookupSetCosigsRewardsFromSeed_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{108, 0}
}
func (m *LookupSetCosigsRewardsFromSeed_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSetCosigsRewardsFromSeed_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupSetCosigsRewardsFromSeed_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSetCosigsRewardsFromSeed_Data.Merge(m, src)
}
func (m *LookupSetCosigsRewardsFromSeed_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupSetCosigsRewardsFromSeed_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSetCosigsRewardsFromSeed_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSetCosigsRewardsFromSeed_Data proto.InternalMessageInfo

func (m *LookupSetCosigsRewardsFromSeed_Data) GetCosigsrewards() []*ProtoCosigsRewardsStructure {
	if m != nil {
		return m.Cosigsrewards
	}
	return nil
}

// From seed node to level2lookup node.
type LookupGetVCFinalBlockFromL2L struct {
	Data                 *LookupGetVCFinalBlockFromL2L_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                         `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                         `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *LookupGetVCFinalBlockFromL2L) Reset()         { *m = LookupGetVCFinalBlockFromL2L{} }
func (m *LookupGetVCFinalBlockFromL2L) String() string { return proto.CompactTextString(m) }
func (*LookupGetVCFinalBlockFromL2L) ProtoMessage()    {}
func (*LookupGetVCFinalBlockFromL2L) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{109}
}
func (m *LookupGetVCFinalBlockFromL2L) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetVCFinalBlockFromL2L) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetVCFinalBlockFromL2L) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetVCFinalBlockFromL2L.Merge(m, src)
}
func (m *LookupGetVCFinalBlockFromL2L) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetVCFinalBlockFromL2L) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetVCFinalBlockFromL2L.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetVCFinalBlockFromL2L proto.InternalMessageInfo

func (m *LookupGetVCFinalBlockFromL2L) GetData() *LookupGetVCFinalBlockFromL2L_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupGetVCFinalBlockFromL2L) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupGetVCFinalBlockFromL2L) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupGetVCFinalBlockFromL2L_Data struct {
	Blocknum             uint64     `protobuf:"varint,1,opt,name=blocknum,proto3" json:"blocknum,omitempty"`
	Sender               *ProtoPeer `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *LookupGetVCFinalBlockFromL2L_Data) Reset()         { *m = LookupGetVCFinalBlockFromL2L_Data{} }
func (m *LookupGetVCFinalBlockFromL2L_Data) String() string { return proto.CompactTextString(m) }
func (*LookupGetVCFinalBlockFromL2L_Data) ProtoMessage()    {}
func (*LookupGetVCFinalBlockFromL2L_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{109, 0}
}
func (m *LookupGetVCFinalBlockFromL2L_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetVCFinalBlockFromL2L_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetVCFinalBlockFromL2L_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetVCFinalBlockFromL2L_Data.Merge(m, src)
}
func (m *LookupGetVCFinalBlockFromL2L_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetVCFinalBlockFromL2L_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetVCFinalBlockFromL2L_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetVCFinalBlockFromL2L_Data proto.InternalMessageInfo

func (m *LookupGetVCFinalBlockFromL2L_Data) GetBlocknum() uint64 {
	if m != nil {
		return m.Blocknum
	}
	return 0
}

func (m *LookupGetVCFinalBlockFromL2L_Data) GetSender() *ProtoPeer {
	if m != nil {
		return m.Sender
	}
	return nil
}

// From seed node to level2lookup node.
type LookupGetDSBlockFromL2L struct {
	Data                 *LookupGetDSBlockFromL2L_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                    `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                    `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *LookupGetDSBlockFromL2L) Reset()         { *m = LookupGetDSBlockFromL2L{} }
func (m *LookupGetDSBlockFromL2L) String() string { return proto.CompactTextString(m) }
func (*LookupGetDSBlockFromL2L) ProtoMessage()    {}
func (*LookupGetDSBlockFromL2L) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{110}
}
func (m *LookupGetDSBlockFromL2L) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetDSBlockFromL2L) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetDSBlockFromL2L) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetDSBlockFromL2L.Merge(m, src)
}
func (m *LookupGetDSBlockFromL2L) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetDSBlockFromL2L) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetDSBlockFromL2L.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetDSBlockFromL2L proto.InternalMessageInfo

func (m *LookupGetDSBlockFromL2L) GetData() *LookupGetDSBlockFromL2L_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupGetDSBlockFromL2L) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupGetDSBlockFromL2L) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupGetDSBlockFromL2L_Data struct {
	Blocknum             uint64     `protobuf:"varint,1,opt,name=blocknum,proto3" json:"blocknum,omitempty"`
	Sender               *ProtoPeer `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *LookupGetDSBlockFromL2L_Data) Reset()         { *m = LookupGetDSBlockFromL2L_Data{} }
func (m *LookupGetDSBlockFromL2L_Data) String() string { return proto.CompactTextString(m) }
func (*LookupGetDSBlockFromL2L_Data) ProtoMessage()    {}
func (*LookupGetDSBlockFromL2L_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{110, 0}
}
func (m *LookupGetDSBlockFromL2L_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetDSBlockFromL2L_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetDSBlockFromL2L_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetDSBlockFromL2L_Data.Merge(m, src)
}
func (m *LookupGetDSBlockFromL2L_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetDSBlockFromL2L_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetDSBlockFromL2L_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetDSBlockFromL2L_Data proto.InternalMessageInfo

func (m *LookupGetDSBlockFromL2L_Data) GetBlocknum() uint64 {
	if m != nil {
		return m.Blocknum
	}
	return 0
}

func (m *LookupGetDSBlockFromL2L_Data) GetSender() *ProtoPeer {
	if m != nil {
		return m.Sender
	}
	return nil
}

// From seed node to level2lookup node.
type LookupGetMBnForwardTxnFromL2L struct {
	Data                 *LookupGetMBnForwardTxnFromL2L_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                          `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                          `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *LookupGetMBnForwardTxnFromL2L) Reset()         { *m = LookupGetMBnForwardTxnFromL2L{} }
func (m *LookupGetMBnForwardTxnFromL2L) String() string { return proto.CompactTextString(m) }
func (*LookupGetMBnForwardTxnFromL2L) ProtoMessage()    {}
func (*LookupGetMBnForwardTxnFromL2L) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{111}
}
func (m *LookupGetMBnForwardTxnFromL2L) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetMBnForwardTxnFromL2L) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetMBnForwardTxnFromL2L) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetMBnForwardTxnFromL2L.Merge(m, src)
}
func (m *LookupGetMBnForwardTxnFromL2L) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetMBnForwardTxnFromL2L) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetMBnForwardTxnFromL2L.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetMBnForwardTxnFromL2L proto.InternalMessageInfo

func (m *LookupGetMBnForwardTxnFromL2L) GetData() *LookupGetMBnForwardTxnFromL2L_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupGetMBnForwardTxnFromL2L) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupGetMBnForwardTxnFromL2L) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupGetMBnForwardTxnFromL2L_Data struct {
	Blocknum             uint64     `protobuf:"varint,1,opt,name=blocknum,proto3" json:"blocknum,omitempty"`
	ShardId              uint32     `protobuf:"varint,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
	Sender               *ProtoPeer `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *LookupGetMBnForwardTxnFromL2L_Data) Reset()         { *m = LookupGetMBnForwardTxnFromL2L_Data{} }
func (m *LookupGetMBnForwardTxnFromL2L_Data) String() string { return proto.CompactTextString(m) }
func (*LookupGetMBnForwardTxnFromL2L_Data) ProtoMessage()    {}
func (*LookupGetMBnForwardTxnFromL2L_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{111, 0}
}
func (m *LookupGetMBnForwardTxnFromL2L_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetMBnForwardTxnFromL2L_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetMBnForwardTxnFromL2L_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetMBnForwardTxnFromL2L_Data.Merge(m, src)
}
func (m *LookupGetMBnForwardTxnFromL2L_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetMBnForwardTxnFromL2L_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetMBnForwardTxnFromL2L_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetMBnForwardTxnFromL2L_Data proto.InternalMessageInfo

func (m *LookupGetMBnForwardTxnFromL2L_Data) GetBlocknum() uint64 {
	if m != nil {
		return m.Blocknum
	}
	return 0
}

func (m *LookupGetMBnForwardTxnFromL2L_Data) GetShardId() uint32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *LookupGetMBnForwardTxnFromL2L_Data) GetSender() *ProtoPeer {
	if m != nil {
		return m.Sender
	}
	return nil
}

// From seed node to level2lookup node.
type LookupGetPendingTxnFromL2L struct {
	Data                 *LookupGetPendingTxnFromL2L_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pubkey               *ByteArray                       `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature            *ByteArray                       `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *LookupGetPendingTxnFromL2L) Reset()         { *m = LookupGetPendingTxnFromL2L{} }
func (m *LookupGetPendingTxnFromL2L) String() string { return proto.CompactTextString(m) }
func (*LookupGetPendingTxnFromL2L) ProtoMessage()    {}
func (*LookupGetPendingTxnFromL2L) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{112}
}
func (m *LookupGetPendingTxnFromL2L) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetPendingTxnFromL2L) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetPendingTxnFromL2L) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetPendingTxnFromL2L.Merge(m, src)
}
func (m *LookupGetPendingTxnFromL2L) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetPendingTxnFromL2L) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetPendingTxnFromL2L.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetPendingTxnFromL2L proto.InternalMessageInfo

func (m *LookupGetPendingTxnFromL2L) GetData() *LookupGetPendingTxnFromL2L_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LookupGetPendingTxnFromL2L) GetPubkey() *ByteArray {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *LookupGetPendingTxnFromL2L) GetSignature() *ByteArray {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LookupGetPendingTxnFromL2L_Data struct {
	Blocknum             uint64     `protobuf:"varint,1,opt,name=blocknum,proto3" json:"blocknum,omitempty"`
	ShardId              uint32     `protobuf:"varint,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
	Sender               *ProtoPeer `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *LookupGetPendingTxnFromL2L_Data) Reset()         { *m = LookupGetPendingTxnFromL2L_Data{} }
func (m *LookupGetPendingTxnFromL2L_Data) String() string { return proto.CompactTextString(m) }
func (*LookupGetPendingTxnFromL2L_Data) ProtoMessage()    {}
func (*LookupGetPendingTxnFromL2L_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f62b0d439c261dc, []int{112, 0}
}
func (m *LookupGetPendingTxnFromL2L_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupGetPendingTxnFromL2L_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LookupGetPendingTxnFromL2L_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupGetPendingTxnFromL2L_Data.Merge(m, src)
}
func (m *LookupGetPendingTxnFromL2L_Data) XXX_Size() int {
	return m.Size()
}
func (m *LookupGetPendingTxnFromL2L_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupGetPendingTxnFromL2L_Data.DiscardUnknown(m)
}

var xxx_messageInfo_LookupGetPendingTxnFromL2L_Data proto.InternalMessageInfo

func (m *LookupGetPendingTxnFromL2L_Data) GetBlocknum() uint64 {
	if m != nil {
		return m.Blocknum
	}
	return 0
}

func (m *LookupGetPendingTxnFromL2L_Data) GetShardId() uint32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *LookupGetPendingTxnFromL2L_Data) GetSender() *ProtoPeer {
	if m != nil {
		return m.Sender
	}
	return nil
}

func init() {
	proto.RegisterType((*ByteArray)(nil), "ZilliqaMessage.ByteArray")
	proto.RegisterType((*ProtoBlockLink)(nil), "ZilliqaMessage.ProtoBlockLink")
	proto.RegisterType((*ProtoBlockBase)(nil), "ZilliqaMessage.ProtoBlockBase")
	proto.RegisterType((*ProtoBlockBase_CoSignatures)(nil), "ZilliqaMessage.ProtoBlockBase.CoSignatures")
	proto.RegisterType((*ProtoBlockHeaderBase)(nil), "ZilliqaMessage.ProtoBlockHeaderBase")
	proto.RegisterType((*ProtoDSBlock)(nil), "ZilliqaMessage.ProtoDSBlock")
	proto.RegisterType((*ProtoDSBlock_DSBlockHashSet)(nil), "ZilliqaMessage.ProtoDSBlock.DSBlockHashSet")
	proto.RegisterType((*ProtoDSBlock_DSBlockHeader)(nil), "ZilliqaMessage.ProtoDSBlock.DSBlockHeader")
	proto.RegisterType((*ProtoDSBlock_DSBlockHeader_PowDSWinners)(nil), "ZilliqaMessage.ProtoDSBlock.DSBlockHeader.PowDSWinners")
	proto.RegisterType((*ProtoDSBlock_DSBlockHeader_Vote)(nil), "ZilliqaMessage.ProtoDSBlock.DSBlockHeader.Vote")
	proto.RegisterType((*ProtoDSBlock_DSBlockHeader_Proposal)(nil), "ZilliqaMessage.ProtoDSBlock.DSBlockHeader.Proposal")
	proto.RegisterType((*ProtoDSNode)(nil), "ZilliqaMessage.ProtoDSNode")
	proto.RegisterType((*ProtoDSCommittee)(nil), "ZilliqaMessage.ProtoDSCommittee")
	proto.RegisterType((*ProtoMicroBlock)(nil), "ZilliqaMessage.ProtoMicroBlock")
	proto.RegisterType((*ProtoMicroBlock_MicroBlockHeader)(nil), "ZilliqaMessage.ProtoMicroBlock.MicroBlockHeader")
	proto.RegisterType((*ProtoShardingStructure)(nil), "ZilliqaMessage.ProtoShardingStructure")
	proto.RegisterType((*ProtoShardingStructure_Member)(nil), "ZilliqaMessage.ProtoShardingStructure.Member")
	proto.RegisterType((*ProtoShardingStructure_Shard)(nil), "ZilliqaMessage.ProtoShardingStructure.Shard")
	proto.RegisterType((*ProtoMbInfo)(nil), "ZilliqaMessage.ProtoMbInfo")
	proto.RegisterType((*ProtoTxBlock)(nil), "ZilliqaMessage.ProtoTxBlock")
	proto.RegisterType((*ProtoTxBlock_TxBlockHashSet)(nil), "ZilliqaMessage.ProtoTxBlock.TxBlockHashSet")
	proto.RegisterType((*ProtoTxBlock_TxBlockHeader)(nil), "ZilliqaMessage.ProtoTxBlock.TxBlockHeader")
	proto.RegisterType((*ProtoVCBlock)(nil), "ZilliqaMessage.ProtoVCBlock")
	proto.RegisterType((*ProtoVCBlock_VCBlockHeader)(nil), "ZilliqaMessage.ProtoVCBlock.VCBlockHeader")
	proto.RegisterType((*ProtoFallbackBlock)(nil), "ZilliqaMessage.ProtoFallbackBlock")
	proto.RegisterType((*ProtoFallbackBlock_FallbackBlockHeader)(nil), "ZilliqaMessage.ProtoFallbackBlock.FallbackBlockHeader")
	proto.RegisterType((*ProtoDiagnosticDataNodes)(nil), "ZilliqaMessage.ProtoDiagnosticDataNodes")
	proto.RegisterType((*ProtoDiagnosticDataCoinbase)(nil), "ZilliqaMessage.ProtoDiagnosticDataCoinbase")
	proto.RegisterType((*ProtoMinerInfoDSComm)(nil), "ZilliqaMessage.ProtoMinerInfoDSComm")
	proto.RegisterType((*ProtoMinerInfoDSComm_Node)(nil), "ZilliqaMessage.ProtoMinerInfoDSComm.Node")
	proto.RegisterType((*ProtoMinerInfoShards)(nil), "ZilliqaMessage.ProtoMinerInfoShards")
	proto.RegisterType((*ProtoMinerInfoShards_Node)(nil), "ZilliqaMessage.ProtoMinerInfoShards.Node")
	proto.RegisterType((*ProtoMinerInfoShards_Shard)(nil), "ZilliqaMessage.ProtoMinerInfoShards.Shard")
	proto.RegisterType((*ProtoAccountBase)(nil), "ZilliqaMessage.ProtoAccountBase")
	proto.RegisterType((*ProtoAccount)(nil), "ZilliqaMessage.ProtoAccount")
	proto.RegisterType((*ProtoAccount_StorageData)(nil), "ZilliqaMessage.ProtoAccount.StorageData")
	proto.RegisterType((*ProtoAccount_StorageData2)(nil), "ZilliqaMessage.ProtoAccount.StorageData2")
	proto.RegisterType((*ProtoStateIndex)(nil), "ZilliqaMessage.ProtoStateIndex")
	proto.RegisterType((*ProtoStateData)(nil), "ZilliqaMessage.ProtoStateData")
	proto.RegisterType((*ProtoAccountStore)(nil), "ZilliqaMessage.ProtoAccountStore")
	proto.RegisterType((*ProtoAccountStore_AddressAccount)(nil), "ZilliqaMessage.ProtoAccountStore.AddressAccount")
	proto.RegisterType((*ProtoPeer)(nil), "ZilliqaMessage.ProtoPeer")
	proto.RegisterType((*ProtoPoWSolution)(nil), "ZilliqaMessage.ProtoPoWSolution")
	proto.RegisterType((*ProtoCommittee)(nil), "ZilliqaMessage.ProtoCommittee")
	proto.RegisterType((*ProtoShardingStructureWithPoWSolns)(nil), "ZilliqaMessage.ProtoShardingStructureWithPoWSolns")
	proto.RegisterType((*ProtoShardingStructureWithPoWSolns_Member)(nil), "ZilliqaMessage.ProtoShardingStructureWithPoWSolns.Member")
	proto.RegisterType((*ProtoShardingStructureWithPoWSolns_Shard)(nil), "ZilliqaMessage.ProtoShardingStructureWithPoWSolns.Shard")
	proto.RegisterType((*ProtoDSWinnerPoW)(nil), "ZilliqaMessage.ProtoDSWinnerPoW")
	proto.RegisterType((*ProtoTransactionCoreInfo)(nil), "ZilliqaMessage.ProtoTransactionCoreInfo")
	proto.RegisterType((*ProtoTransaction)(nil), "ZilliqaMessage.ProtoTransaction")
	proto.RegisterType((*ProtoTxnFileOffset)(nil), "ZilliqaMessage.ProtoTxnFileOffset")
	proto.RegisterType((*ProtoTransactionArray)(nil), "ZilliqaMessage.ProtoTransactionArray")
	proto.RegisterType((*ProtoTransactionReceipt)(nil), "ZilliqaMessage.ProtoTransactionReceipt")
	proto.RegisterType((*ProtoTransactionWithReceipt)(nil), "ZilliqaMessage.ProtoTransactionWithReceipt")
	proto.RegisterType((*ProtoBloomFilter)(nil), "ZilliqaMessage.ProtoBloomFilter")
	proto.RegisterType((*ProtoSWInfo)(nil), "ZilliqaMessage.ProtoSWInfo")
	proto.RegisterType((*ProtoFallbackBlockWShardingStructure)(nil), "ZilliqaMessage.ProtoFallbackBlockWShardingStructure")
	proto.RegisterType((*ProtoSingleDirectoryBlock)(nil), "ZilliqaMessage.ProtoSingleDirectoryBlock")
	proto.RegisterType((*PMHello)(nil), "ZilliqaMessage.PMHello")
	proto.RegisterType((*PMHello_Data)(nil), "ZilliqaMessage.PMHello.Data")
	proto.RegisterType((*GovernanceData)(nil), "ZilliqaMessage.GovernanceData")
	proto.RegisterType((*DSPoWSubmission)(nil), "ZilliqaMessage.DSPoWSubmission")
	proto.RegisterType((*DSPoWSubmission_Data)(nil), "ZilliqaMessage.DSPoWSubmission.Data")
	proto.RegisterType((*DSPoWPacketSubmission)(nil), "ZilliqaMessage.DSPoWPacketSubmission")
	proto.RegisterType((*DSPoWPacketSubmission_Data)(nil), "ZilliqaMessage.DSPoWPacketSubmission.Data")
	proto.RegisterType((*DSMicroBlockSubmission)(nil), "ZilliqaMessage.DSMicroBlockSubmission")
	proto.RegisterType((*DSMicroBlockSubmission_Data)(nil), "ZilliqaMessage.DSMicroBlockSubmission.Data")
	proto.RegisterType((*DSDSBlockAnnouncement)(nil), "ZilliqaMessage.DSDSBlockAnnouncement")
	proto.RegisterType((*DSFinalBlockAnnouncement)(nil), "ZilliqaMessage.DSFinalBlockAnnouncement")
	proto.RegisterType((*DSVCBlockAnnouncement)(nil), "ZilliqaMessage.DSVCBlockAnnouncement")
	proto.RegisterType((*DSMissingMicroBlocksErrorMsg)(nil), "ZilliqaMessage.DSMissingMicroBlocksErrorMsg")
	proto.RegisterType((*NodeDSBlock)(nil), "ZilliqaMessage.NodeDSBlock")
	proto.RegisterType((*NodeFinalBlock)(nil), "ZilliqaMessage.NodeFinalBlock")
	proto.RegisterType((*NodeVCFinalBlock)(nil), "ZilliqaMessage.NodeVCFinalBlock")
	proto.RegisterType((*NodeMBnForwardTransaction)(nil), "ZilliqaMessage.NodeMBnForwardTransaction")
	proto.RegisterType((*NodePendingTxn)(nil), "ZilliqaMessage.NodePendingTxn")
	proto.RegisterType((*NodePendingTxn_Data)(nil), "ZilliqaMessage.NodePendingTxn.Data")
	proto.RegisterType((*NodePendingTxn_Data_Pair)(nil), "ZilliqaMessage.NodePendingTxn.Data.Pair")
	proto.RegisterType((*NodeVCBlock)(nil), "ZilliqaMessage.NodeVCBlock")
	proto.RegisterType((*NodeForwardTxnBlock)(nil), "ZilliqaMessage.NodeForwardTxnBlock")
	proto.RegisterType((*NodeMicroBlockAnnouncement)(nil), "ZilliqaMessage.NodeMicroBlockAnnouncement")
	proto.RegisterType((*NodeFallbackBlockAnnouncement)(nil), "ZilliqaMessage.NodeFallbackBlockAnnouncement")
	proto.RegisterType((*NodeFallbackBlock)(nil), "ZilliqaMessage.NodeFallbackBlock")
	proto.RegisterType((*NodeMissingTxnsErrorMsg)(nil), "ZilliqaMessage.NodeMissingTxnsErrorMsg")
	proto.RegisterType((*LookupGetSeedPeers)(nil), "ZilliqaMessage.LookupGetSeedPeers")
	proto.RegisterType((*LookupSetSeedPeers)(nil), "ZilliqaMessage.LookupSetSeedPeers")
	proto.RegisterType((*LookupGetDSInfoFromSeed)(nil), "ZilliqaMessage.LookupGetDSInfoFromSeed")
	proto.RegisterType((*LookupSetDSInfoFromSeed)(nil), "ZilliqaMessage.LookupSetDSInfoFromSeed")
	proto.RegisterType((*LookupGetDSBlockFromSeed)(nil), "ZilliqaMessage.LookupGetDSBlockFromSeed")
	proto.RegisterType((*LookupSetDSBlockFromSeed)(nil), "ZilliqaMessage.LookupSetDSBlockFromSeed")
	proto.RegisterType((*LookupSetDSBlockFromSeed_Data)(nil), "ZilliqaMessage.LookupSetDSBlockFromSeed.Data")
	proto.RegisterType((*LookupSetMinerInfoFromSeed)(nil), "ZilliqaMessage.LookupSetMinerInfoFromSeed")
	proto.RegisterType((*LookupSetMinerInfoFromSeed_MinerInfo)(nil), "ZilliqaMessage.LookupSetMinerInfoFromSeed.MinerInfo")
	proto.RegisterType((*LookupSetMinerInfoFromSeed_Data)(nil), "ZilliqaMessage.LookupSetMinerInfoFromSeed.Data")
	proto.RegisterMapType((map[uint64]*LookupSetMinerInfoFromSeed_MinerInfo)(nil), "ZilliqaMessage.LookupSetMinerInfoFromSeed.Data.MinerinfoperdsEntry")
	proto.RegisterType((*LookupGetTxBlockFromSeed)(nil), "ZilliqaMessage.LookupGetTxBlockFromSeed")
	proto.RegisterType((*LookupSetTxBlockFromSeed)(nil), "ZilliqaMessage.LookupSetTxBlockFromSeed")
	proto.RegisterType((*LookupSetTxBlockFromSeed_Data)(nil), "ZilliqaMessage.LookupSetTxBlockFromSeed.Data")
	proto.RegisterType((*LookupGetStateDeltaFromSeed)(nil), "ZilliqaMessage.LookupGetStateDeltaFromSeed")
	proto.RegisterType((*LookupGetStateDeltasFromSeed)(nil), "ZilliqaMessage.LookupGetStateDeltasFromSeed")
	proto.RegisterType((*LookupSetStateDeltaFromSeed)(nil), "ZilliqaMessage.LookupSetStateDeltaFromSeed")
	proto.RegisterType((*LookupSetStateDeltaFromSeed_Data)(nil), "ZilliqaMessage.LookupSetStateDeltaFromSeed.Data")
	proto.RegisterType((*LookupSetStateDeltasFromSeed)(nil), "ZilliqaMessage.LookupSetStateDeltasFromSeed")
	proto.RegisterType((*LookupSetStateDeltasFromSeed_Data)(nil), "ZilliqaMessage.LookupSetStateDeltasFromSeed.Data")
	proto.RegisterType((*LookupGetStateFromSeed)(nil), "ZilliqaMessage.LookupGetStateFromSeed")
	proto.RegisterType((*LookupSetStateFromSeed)(nil), "ZilliqaMessage.LookupSetStateFromSeed")
	proto.RegisterType((*LookupSetLookupOffline)(nil), "ZilliqaMessage.LookupSetLookupOffline")
	proto.RegisterType((*LookupSetLookupOffline_Data)(nil), "ZilliqaMessage.LookupSetLookupOffline.Data")
	proto.RegisterType((*LookupSetLookupOnline)(nil), "ZilliqaMessage.LookupSetLookupOnline")
	proto.RegisterType((*LookupSetLookupOnline_Data)(nil), "ZilliqaMessage.LookupSetLookupOnline.Data")
	proto.RegisterType((*LookupGetOfflineLookups)(nil), "ZilliqaMessage.LookupGetOfflineLookups")
	proto.RegisterType((*LookupSetOfflineLookups)(nil), "ZilliqaMessage.LookupSetOfflineLookups")
	proto.RegisterType((*LookupRaiseStartPoW)(nil), "ZilliqaMessage.LookupRaiseStartPoW")
	proto.RegisterType((*LookupRaiseStartPoW_Data)(nil), "ZilliqaMessage.LookupRaiseStartPoW.Data")
	proto.RegisterType((*LookupGetStartPoWFromSeed)(nil), "ZilliqaMessage.LookupGetStartPoWFromSeed")
	proto.RegisterType((*LookupGetStartPoWFromSeed_Data)(nil), "ZilliqaMessage.LookupGetStartPoWFromSeed.Data")
	proto.RegisterType((*LookupSetStartPoWFromSeed)(nil), "ZilliqaMessage.LookupSetStartPoWFromSeed")
	proto.RegisterType((*LookupGetShardsFromSeed)(nil), "ZilliqaMessage.LookupGetShardsFromSeed")
	proto.RegisterType((*LookupSetShardsFromSeed)(nil), "ZilliqaMessage.LookupSetShardsFromSeed")
	proto.RegisterType((*LookupGetMicroBlockFromLookup)(nil), "ZilliqaMessage.LookupGetMicroBlockFromLookup")
	proto.RegisterType((*LookupSetMicroBlockFromLookup)(nil), "ZilliqaMessage.LookupSetMicroBlockFromLookup")
	proto.RegisterType((*LookupGetMicroBlockFromL2L)(nil), "ZilliqaMessage.LookupGetMicroBlockFromL2l")
	proto.RegisterType((*LookupGetMicroBlockFromL2L_Data)(nil), "ZilliqaMessage.LookupGetMicroBlockFromL2l.Data")
	proto.RegisterType((*LookupForwardTxnsFromSeed)(nil), "ZilliqaMessage.LookupForwardTxnsFromSeed")
	proto.RegisterType((*LookupGetTxnsFromLookup)(nil), "ZilliqaMessage.LookupGetTxnsFromLookup")
	proto.RegisterType((*LookupGetTxnsFromL2L)(nil), "ZilliqaMessage.LookupGetTxnsFromL2l")
	proto.RegisterType((*LookupGetTxnsFromL2L_Data)(nil), "ZilliqaMessage.LookupGetTxnsFromL2l.Data")
	proto.RegisterType((*LookupSetTxnsFromLookup)(nil), "ZilliqaMessage.LookupSetTxnsFromLookup")
	proto.RegisterType((*LookupGetDirectoryBlocksFromSeed)(nil), "ZilliqaMessage.LookupGetDirectoryBlocksFromSeed")
	proto.RegisterType((*LookupSetDirectoryBlocksFromSeed)(nil), "ZilliqaMessage.LookupSetDirectoryBlocksFromSeed")
	proto.RegisterType((*LookupSetDirectoryBlocksFromSeed_Data)(nil), "ZilliqaMessage.LookupSetDirectoryBlocksFromSeed.Data")
	proto.RegisterType((*ConsensusAnnouncement)(nil), "ZilliqaMessage.ConsensusAnnouncement")
	proto.RegisterType((*ConsensusAnnouncement_ConsensusInfo)(nil), "ZilliqaMessage.ConsensusAnnouncement.ConsensusInfo")
	proto.RegisterType((*ConsensusCommit)(nil), "ZilliqaMessage.ConsensusCommit")
	proto.RegisterType((*ConsensusCommit_ConsensusInfo)(nil), "ZilliqaMessage.ConsensusCommit.ConsensusInfo")
	proto.RegisterType((*ConsensusChallenge)(nil), "ZilliqaMessage.ConsensusChallenge")
	proto.RegisterType((*ConsensusChallenge_SubsetInfo)(nil), "ZilliqaMessage.ConsensusChallenge.SubsetInfo")
	proto.RegisterType((*ConsensusChallenge_ConsensusInfo)(nil), "ZilliqaMessage.ConsensusChallenge.ConsensusInfo")
	proto.RegisterType((*ConsensusResponse)(nil), "ZilliqaMessage.ConsensusResponse")
	proto.RegisterType((*ConsensusResponse_SubsetInfo)(nil), "ZilliqaMessage.ConsensusResponse.SubsetInfo")
	proto.RegisterType((*ConsensusResponse_ConsensusInfo)(nil), "ZilliqaMessage.ConsensusResponse.ConsensusInfo")
	proto.RegisterType((*ConsensusCollectiveSig)(nil), "ZilliqaMessage.ConsensusCollectiveSig")
	proto.RegisterType((*ConsensusCollectiveSig_ConsensusInfo)(nil), "ZilliqaMessage.ConsensusCollectiveSig.ConsensusInfo")
	proto.RegisterType((*ConsensusCommitFailure)(nil), "ZilliqaMessage.ConsensusCommitFailure")
	proto.RegisterType((*ConsensusCommitFailure_ConsensusInfo)(nil), "ZilliqaMessage.ConsensusCommitFailure.ConsensusInfo")
	proto.RegisterType((*ConsensusConsensusFailure)(nil), "ZilliqaMessage.ConsensusConsensusFailure")
	proto.RegisterType((*ConsensusConsensusFailure_ConsensusInfo)(nil), "ZilliqaMessage.ConsensusConsensusFailure.ConsensusInfo")
	proto.RegisterType((*LookupGetDSTxBlockFromSeed)(nil), "ZilliqaMessage.LookupGetDSTxBlockFromSeed")
	proto.RegisterType((*VCNodeSetDSTxBlockFromSeed)(nil), "ZilliqaMessage.VCNodeSetDSTxBlockFromSeed")
	proto.RegisterType((*VCNodeSetDSTxBlockFromSeed_Data)(nil), "ZilliqaMessage.VCNodeSetDSTxBlockFromSeed.Data")
	proto.RegisterType((*NodeSetShardNodeNetworkInfoUpdate)(nil), "ZilliqaMessage.NodeSetShardNodeNetworkInfoUpdate")
	proto.RegisterType((*NodeSetShardNodeNetworkInfoUpdate_Data)(nil), "ZilliqaMessage.NodeSetShardNodeNetworkInfoUpdate.Data")
	proto.RegisterType((*DSLookupSetDSGuardNetworkInfoUpdate)(nil), "ZilliqaMessage.DSLookupSetDSGuardNetworkInfoUpdate")
	proto.RegisterType((*DSLookupSetDSGuardNetworkInfoUpdate_Data)(nil), "ZilliqaMessage.DSLookupSetDSGuardNetworkInfoUpdate.Data")
	proto.RegisterType((*NodeGetGuardNodeNetworkInfoUpdate)(nil), "ZilliqaMessage.NodeGetGuardNodeNetworkInfoUpdate")
	proto.RegisterType((*NodeGetGuardNodeNetworkInfoUpdate_Data)(nil), "ZilliqaMessage.NodeGetGuardNodeNetworkInfoUpdate.Data")
	proto.RegisterType((*ProtoDSGuardUpdateStruct)(nil), "ZilliqaMessage.ProtoDSGuardUpdateStruct")
	proto.RegisterType((*NodeSetGuardNodeNetworkInfoUpdate)(nil), "ZilliqaMessage.NodeSetGuardNodeNetworkInfoUpdate")
	proto.RegisterType((*NodeSetGuardNodeNetworkInfoUpdate_Data)(nil), "ZilliqaMessage.NodeSetGuardNodeNetworkInfoUpdate.Data")
	proto.RegisterType((*SeedSetHistoricalDB)(nil), "ZilliqaMessage.SeedSetHistoricalDB")
	proto.RegisterType((*SeedSetHistoricalDB_Data)(nil), "ZilliqaMessage.SeedSetHistoricalDB.Data")
	proto.RegisterType((*NodeRemoveFromBlacklist)(nil), "ZilliqaMessage.NodeRemoveFromBlacklist")
	proto.RegisterType((*NodeRemoveFromBlacklist_Data)(nil), "ZilliqaMessage.NodeRemoveFromBlacklist.Data")
	proto.RegisterType((*ProtoCosigsRewardsStructure)(nil), "ZilliqaMessage.ProtoCosigsRewardsStructure")
	proto.RegisterType((*LookupGetCosigsRewardsFromSeed)(nil), "ZilliqaMessage.LookupGetCosigsRewardsFromSeed")
	proto.RegisterType((*LookupGetCosigsRewardsFromSeed_Data)(nil), "ZilliqaMessage.LookupGetCosigsRewardsFromSeed.Data")
	proto.RegisterType((*LookupSetCosigsRewardsFromSeed)(nil), "ZilliqaMessage.LookupSetCosigsRewardsFromSeed")
	proto.RegisterType((*LookupSetCosigsRewardsFromSeed_Data)(nil), "ZilliqaMessage.LookupSetCosigsRewardsFromSeed.Data")
	proto.RegisterType((*LookupGetVCFinalBlockFromL2L)(nil), "ZilliqaMessage.LookupGetVCFinalBlockFromL2l")
	proto.RegisterType((*LookupGetVCFinalBlockFromL2L_Data)(nil), "ZilliqaMessage.LookupGetVCFinalBlockFromL2l.Data")
	proto.RegisterType((*LookupGetDSBlockFromL2L)(nil), "ZilliqaMessage.LookupGetDSBlockFromL2l")
	proto.RegisterType((*LookupGetDSBlockFromL2L_Data)(nil), "ZilliqaMessage.LookupGetDSBlockFromL2l.Data")
	proto.RegisterType((*LookupGetMBnForwardTxnFromL2L)(nil), "ZilliqaMessage.LookupGetMBnForwardTxnFromL2l")
	proto.RegisterType((*LookupGetMBnForwardTxnFromL2L_Data)(nil), "ZilliqaMessage.LookupGetMBnForwardTxnFromL2l.Data")
	proto.RegisterType((*LookupGetPendingTxnFromL2L)(nil), "ZilliqaMessage.LookupGetPendingTxnFromL2l")
	proto.RegisterType((*LookupGetPendingTxnFromL2L_Data)(nil), "ZilliqaMessage.LookupGetPendingTxnFromL2l.Data")
}

func init() { proto.RegisterFile("ZilliqaMessage.proto", fileDescriptor_5f62b0d439c261dc) }

var fileDescriptor_5f62b0d439c261dc = []byte{
	// 6143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x7d, 0x5d, 0x8c, 0x1c, 0xd9,
	0x55, 0xb0, 0xab, 0xba, 0xa7, 0xbb, 0xe7, 0xcc, 0x8f, 0xed, 0xeb, 0x9f, 0xed, 0xed, 0x38, 0x93,
	0xf9, 0x2a, 0xfb, 0x6d, 0x9c, 0x5d, 0xef, 0xac, 0x3d, 0xf6, 0xee, 0xce, 0x26, 0xd9, 0x38, 0xf3,
	0x63, 0x7b, 0xbc, 0xb1, 0xbd, 0x93, 0xea, 0xdd, 0xb5, 0x76, 0xc5, 0x4a, 0x54, 0x77, 0xdd, 0xe9,
	0xa9, 0x4c, 0x75, 0x55, 0x53, 0x55, 0x3d, 0x33, 0xce, 0x03, 0xe2, 0x3f, 0xa0, 0x80, 0x82, 0x14,
	0xa1, 0x20, 0x1e, 0x22, 0x22, 0xf2, 0x90, 0x04, 0x14, 0xf1, 0x1b, 0x45, 0x42, 0x80, 0x42, 0x50,
	0x04, 0x24, 0x01, 0xc4, 0x53, 0x04, 0x8b, 0x44, 0xac, 0x20, 0x94, 0x10, 0x89, 0x88, 0x08, 0x44,
	0x1e, 0x40, 0xe8, 0xfe, 0x55, 0xdd, 0x5b, 0x55, 0xdd, 0xd5, 0x3d, 0x1e, 0x3c, 0x93, 0xf0, 0x34,
	0x5d, 0xa7, 0xce, 0xb9, 0x75, 0xef, 0x39, 0xe7, 0x9e, 0x73, 0xee, 0x39, 0xa7, 0x6a, 0xe0, 0xf4,
	0xeb, 0x8e, 0xeb, 0x3a, 0x3f, 0x66, 0xdd, 0xc6, 0x61, 0x68, 0x75, 0xf0, 0x42, 0x2f, 0xf0, 0x23,
	0x1f, 0xcd, 0xaa, 0xd0, 0xc6, 0x53, 0x1d, 0x27, 0xda, 0xea, 0xb7, 0x16, 0xda, 0x7e, 0xf7, 0xe9,
	0x8e, 0xdf, 0xf1, 0x9f, 0xa6, 0x68, 0xad, 0xfe, 0x26, 0xbd, 0xa2, 0x17, 0xf4, 0x17, 0x23, 0x37,
	0xde, 0x06, 0x93, 0x2b, 0xf7, 0x22, 0xbc, 0x1c, 0x04, 0xd6, 0x3d, 0x84, 0xa0, 0x6c, 0x5b, 0x91,
	0x55, 0xd7, 0xe6, 0xb5, 0xf3, 0xd3, 0x26, 0xfd, 0x6d, 0x7c, 0x59, 0x83, 0xd9, 0x0d, 0x82, 0xba,
	0xe2, 0xfa, 0xed, 0xed, 0x5b, 0x8e, 0xb7, 0x8d, 0x1a, 0x50, 0xdd, 0xc1, 0x41, 0xe8, 0xf8, 0x1e,
	0xc5, 0x9c, 0x59, 0x3f, 0x66, 0x0a, 0x00, 0x3a, 0x0b, 0x13, 0x8e, 0x67, 0xe3, 0xbd, 0xba, 0x3e,
	0xaf, 0x9d, 0x2f, 0xaf, 0x6b, 0x26, 0xbb, 0x24, 0x34, 0x76, 0xc8, 0xee, 0x94, 0xe8, 0x1d, 0xdd,
	0x14, 0x00, 0x34, 0x07, 0x93, 0x2d, 0x32, 0x78, 0x74, 0xaf, 0x87, 0xeb, 0x65, 0x3a, 0x62, 0xc9,
	0x4c, 0x40, 0xe8, 0x1c, 0xbf, 0xbf, 0x65, 0x85, 0x5b, 0xf5, 0x09, 0x3a, 0xb7, 0x04, 0xb0, 0x52,
	0x83, 0x8a, 0xef, 0x61, 0x7f, 0xf3, 0x52, 0xfc, 0x6b, 0x31, 0xfe, 0x75, 0x39, 0xfe, 0x75, 0xc5,
	0xf8, 0x94, 0x2e, 0x2f, 0x64, 0xc5, 0x0a, 0x53, 0x03, 0x6b, 0xa9, 0x81, 0xd1, 0x2a, 0x54, 0xda,
	0x7e, 0xe8, 0x74, 0x42, 0xba, 0x96, 0xa9, 0xc5, 0x27, 0x17, 0x52, 0x02, 0x50, 0x47, 0x5b, 0x58,
	0xf5, 0x9b, 0x4e, 0xc7, 0xb3, 0xa2, 0x7e, 0x80, 0x43, 0x93, 0x93, 0x92, 0x47, 0x44, 0x4e, 0x17,
	0x87, 0x91, 0xd5, 0xed, 0xb1, 0x95, 0x9b, 0x09, 0xa0, 0xf1, 0xcb, 0x1a, 0x4c, 0xcb, 0x64, 0xe8,
	0x49, 0x28, 0xb5, 0xc3, 0x4b, 0x74, 0x2e, 0x53, 0x8b, 0x8f, 0xa6, 0x1f, 0x18, 0x4b, 0xca, 0x24,
	0x58, 0x08, 0x81, 0xde, 0xba, 0x54, 0xd7, 0xe7, 0x4b, 0xe7, 0x6b, 0x2b, 0xfa, 0x09, 0xcd, 0xd4,
	0x5b, 0x97, 0xd8, 0x00, 0x8b, 0xf4, 0x49, 0x45, 0x03, 0x2c, 0xd2, 0x01, 0x16, 0xeb, 0x65, 0x69,
	0x80, 0x45, 0x23, 0x80, 0xd3, 0xc9, 0xba, 0xd6, 0xb1, 0x65, 0xe3, 0x80, 0xf2, 0xaa, 0x9e, 0x12,
	0x7a, 0x22, 0xf2, 0xc7, 0x60, 0xa6, 0xed, 0x77, 0xbb, 0x4e, 0x14, 0x61, 0x4c, 0x39, 0xa9, 0x53,
	0x4e, 0xaa, 0x40, 0xd4, 0x80, 0x5a, 0x2f, 0xc0, 0x3b, 0x14, 0xa1, 0x44, 0x11, 0xe2, 0x6b, 0xe3,
	0x77, 0x01, 0xa6, 0xe9, 0x43, 0xd7, 0x9a, 0xf4, 0xb1, 0x68, 0x05, 0x2a, 0x5b, 0xf4, 0xd1, 0x9c,
	0x13, 0x4f, 0xe4, 0xb2, 0x9e, 0x63, 0x2f, 0xf0, 0xbf, 0x6c, 0xb2, 0x26, 0xa7, 0x44, 0xef, 0xe1,
	0xc2, 0x6d, 0x59, 0x21, 0xe6, 0x12, 0x9c, 0x1b, 0x2e, 0x41, 0x33, 0x21, 0x68, 0xbc, 0x0e, 0xb3,
	0x62, 0x58, 0x2b, 0xdc, 0x6a, 0xe2, 0x08, 0x19, 0x30, 0x1d, 0x6e, 0x59, 0x81, 0xed, 0x78, 0x1d,
	0x49, 0x5f, 0x14, 0x18, 0x61, 0x45, 0x80, 0x43, 0x1c, 0xec, 0x60, 0x7b, 0xd3, 0xc1, 0xae, 0x2d,
	0x58, 0xa1, 0x00, 0x1b, 0x5f, 0xaa, 0xc1, 0x8c, 0x32, 0x67, 0x74, 0x07, 0x8e, 0x33, 0xbd, 0xa3,
	0x97, 0x74, 0xc6, 0x6c, 0xe1, 0x8f, 0x0d, 0x9e, 0x71, 0x22, 0x1b, 0x33, 0x4d, 0x4c, 0xe6, 0x6a,
	0x87, 0xb6, 0xb3, 0xb9, 0xe9, 0xb4, 0xfb, 0x6e, 0x74, 0x8f, 0x4e, 0x63, 0xc6, 0x54, 0x60, 0x68,
	0x0e, 0x40, 0xc2, 0x28, 0x51, 0x0c, 0x09, 0xa2, 0x08, 0xac, 0xac, 0x0a, 0x0c, 0xbd, 0x00, 0xd3,
	0x2e, 0x7d, 0x5a, 0xaf, 0xdf, 0xda, 0xc6, 0xf7, 0xe8, 0xa6, 0x1c, 0xaa, 0x6e, 0x0a, 0x3a, 0x3a,
	0x07, 0x35, 0x3a, 0x63, 0xaf, 0xdf, 0xad, 0x57, 0xa8, 0x35, 0x38, 0x66, 0xc6, 0x10, 0x72, 0x17,
	0xf7, 0xfc, 0xf6, 0x16, 0xb9, 0x5b, 0xe5, 0x56, 0x24, 0x86, 0xa0, 0x67, 0xa0, 0xd6, 0xb1, 0xc2,
	0x5e, 0xe0, 0xb4, 0x71, 0xbd, 0x56, 0xf4, 0xd8, 0x18, 0x15, 0x5d, 0x82, 0x4a, 0xb8, 0xeb, 0x78,
	0x9b, 0x7e, 0x7d, 0xb2, 0x88, 0x88, 0x23, 0xa2, 0x57, 0x60, 0xd2, 0x26, 0x3f, 0x3d, 0x1c, 0x84,
	0x75, 0x98, 0x2f, 0x9d, 0x9f, 0x5a, 0x7c, 0x6e, 0x74, 0x3d, 0x5c, 0xd8, 0xf0, 0x77, 0xd7, 0x9a,
	0x77, 0x19, 0xb9, 0x99, 0x8c, 0x84, 0xae, 0x42, 0x99, 0xf2, 0x74, 0x6a, 0x88, 0x51, 0x49, 0x8f,
	0xc8, 0x54, 0xd0, 0xa4, 0x84, 0xe8, 0x39, 0x32, 0xaf, 0x00, 0x77, 0xfd, 0x1d, 0x6c, 0xd7, 0xa7,
	0xe9, 0xbc, 0x86, 0xac, 0x26, 0xc1, 0x45, 0x1f, 0x80, 0xc9, 0x5e, 0xe0, 0xf7, 0xfc, 0xd0, 0x72,
	0xc3, 0xfa, 0x0c, 0x25, 0xbc, 0x3c, 0xce, 0x82, 0x38, 0xad, 0x99, 0x8c, 0xd2, 0xd8, 0x82, 0x69,
	0x79, 0x9d, 0xc4, 0xfc, 0x10, 0x7d, 0x28, 0xb6, 0x5f, 0x44, 0x0d, 0x9e, 0x84, 0xd2, 0x8e, 0xe5,
	0xf2, 0xbd, 0x39, 0x0c, 0x79, 0xc7, 0x72, 0x1b, 0x8b, 0x50, 0x7e, 0xd5, 0x8f, 0x30, 0x3a, 0x0d,
	0x13, 0x3b, 0x96, 0xdb, 0xc7, 0xdc, 0x0a, 0xb1, 0x0b, 0x02, 0x6d, 0xfb, 0x7d, 0x2f, 0xe2, 0x9a,
	0xce, 0x2e, 0x1a, 0x5f, 0xd6, 0xa0, 0x26, 0x66, 0x4d, 0xf4, 0x5d, 0xcc, 0xdb, 0xb1, 0x39, 0xb5,
	0x04, 0x41, 0x37, 0x89, 0x87, 0xda, 0xf1, 0x23, 0x1c, 0x52, 0x93, 0x3a, 0xb5, 0xf8, 0xf4, 0x18,
	0xbc, 0x21, 0x53, 0x33, 0x05, 0x3d, 0x7a, 0x09, 0xa0, 0xeb, 0x78, 0x38, 0x60, 0xa3, 0x95, 0xf6,
	0x37, 0x9a, 0x34, 0x44, 0xec, 0xc5, 0x9e, 0x8d, 0x7f, 0x3d, 0x67, 0xf8, 0x30, 0xc5, 0x87, 0xb8,
	0xe3, 0xdb, 0x54, 0xc1, 0xf9, 0x66, 0x2c, 0x64, 0x3e, 0x47, 0x44, 0x4f, 0x41, 0xb9, 0x87, 0x71,
	0x50, 0x2c, 0x00, 0x8a, 0x66, 0xb4, 0xe1, 0x04, 0x7f, 0xe0, 0xaa, 0xb0, 0xec, 0x43, 0xbc, 0xc2,
	0x33, 0x84, 0x9d, 0x9e, 0x6f, 0xc7, 0xec, 0x7c, 0xcb, 0x00, 0x06, 0x90, 0xd9, 0x9b, 0x02, 0xd7,
	0xf8, 0xb7, 0x09, 0x38, 0x4e, 0x6f, 0xdc, 0x76, 0xda, 0x01, 0x33, 0x74, 0x68, 0x3d, 0xe5, 0x0d,
	0x2e, 0xe6, 0x8e, 0x94, 0x10, 0x2c, 0x24, 0x3f, 0x53, 0x3e, 0x61, 0x0e, 0x20, 0x0a, 0x2c, 0x8f,
	0x6c, 0x23, 0x3e, 0xaf, 0x69, 0x53, 0x82, 0xa8, 0x3e, 0xa3, 0x34, 0xae, 0xcf, 0xf8, 0x7c, 0x19,
	0x4e, 0xa4, 0x1f, 0x7d, 0xe0, 0xa6, 0xbd, 0x01, 0x55, 0xe6, 0x72, 0x98, 0x73, 0xa1, 0xc1, 0x17,
	0x07, 0x10, 0x93, 0xdd, 0xb1, 0x42, 0xd7, 0xe9, 0x3a, 0x11, 0x8f, 0x35, 0xe2, 0x6b, 0x42, 0xd7,
	0xb1, 0xc2, 0x7e, 0x88, 0x6d, 0x6a, 0xcd, 0x89, 0x51, 0x15, 0x00, 0x74, 0x19, 0xaa, 0x01, 0xde,
	0xb5, 0x02, 0x3b, 0x2c, 0xb6, 0xe4, 0x02, 0x53, 0xf1, 0x0f, 0x95, 0x94, 0x7f, 0xc8, 0x9a, 0x70,
	0x5d, 0x32, 0xe1, 0x44, 0x0a, 0x7b, 0x81, 0xef, 0x47, 0x94, 0xb6, 0x46, 0x69, 0x25, 0x08, 0xaa,
	0x43, 0xc5, 0xeb, 0x77, 0xa3, 0xbd, 0x90, 0xda, 0x6a, 0x12, 0x0c, 0xf2, 0x6b, 0xf4, 0x6e, 0x98,
	0xa2, 0xbb, 0x82, 0x6b, 0x3a, 0x14, 0x4d, 0x56, 0xc6, 0xa6, 0x0e, 0x2f, 0x8c, 0xfd, 0xce, 0x14,
	0xe5, 0x8f, 0x04, 0x41, 0x8f, 0xc3, 0x6c, 0x18, 0x59, 0x11, 0xb6, 0xb1, 0x1b, 0x59, 0x74, 0x6a,
	0xd3, 0x74, 0x6a, 0x29, 0x28, 0x3a, 0x0f, 0xc7, 0x89, 0xca, 0x04, 0xb8, 0x8d, 0x9d, 0x1e, 0x5b,
	0xc3, 0x0c, 0x45, 0x4c, 0x83, 0x73, 0x02, 0xd2, 0x2b, 0xc9, 0x06, 0x8e, 0x7f, 0x3d, 0x6f, 0xfc,
	0x8b, 0x0e, 0x67, 0xa9, 0xf4, 0x9b, 0x3c, 0x98, 0x68, 0x46, 0x41, 0xbf, 0x4d, 0x22, 0xc2, 0x21,
	0x1b, 0x6c, 0x0d, 0x2a, 0x54, 0xee, 0x62, 0x7f, 0x5d, 0xc8, 0xd5, 0xa7, 0xcc, 0x88, 0x0b, 0x14,
	0x62, 0x72, 0xda, 0xc6, 0x27, 0x34, 0xa8, 0xdc, 0xc6, 0xdd, 0x16, 0x0e, 0xf6, 0x63, 0x41, 0x9e,
	0x81, 0x1a, 0x31, 0x0d, 0xd4, 0xaf, 0x16, 0x5a, 0x91, 0x18, 0x15, 0xcd, 0x03, 0x04, 0xb8, 0xd7,
	0x8f, 0xac, 0x88, 0xac, 0xab, 0xc4, 0xd5, 0x58, 0x82, 0x25, 0x01, 0x7c, 0x63, 0x03, 0x26, 0xe8,
	0x8c, 0xd1, 0x0d, 0xa8, 0x76, 0xe9, 0x44, 0xc3, 0xba, 0x46, 0x17, 0xfc, 0xd4, 0x88, 0x0b, 0x66,
	0xcb, 0x33, 0x05, 0xb5, 0xd1, 0xe6, 0x86, 0xf3, 0x76, 0xeb, 0x26, 0x99, 0xcc, 0x59, 0xa8, 0x74,
	0x5b, 0x52, 0x44, 0xc7, 0xaf, 0x08, 0x9c, 0xe9, 0x24, 0x0f, 0xe2, 0xf8, 0x95, 0xbc, 0x01, 0x4b,
	0xa9, 0x0d, 0x98, 0x4c, 0xdb, 0xf8, 0xbd, 0x0a, 0x0f, 0x69, 0x5f, 0xde, 0x1b, 0x27, 0xa4, 0xe5,
	0xd8, 0x0b, 0xfc, 0x6f, 0xca, 0x7c, 0x3d, 0x03, 0xd5, 0x6e, 0x8b, 0x70, 0x70, 0xb8, 0x4d, 0x65,
	0x0b, 0x33, 0x05, 0xee, 0x03, 0x5a, 0xb5, 0x1f, 0x87, 0x59, 0x31, 0x1b, 0x1e, 0x09, 0x3f, 0x06,
	0x33, 0x74, 0x4b, 0xc4, 0x5b, 0x98, 0x31, 0x4e, 0x05, 0xe6, 0x6c, 0x27, 0x3d, 0x77, 0x3b, 0xcd,
	0x01, 0xb0, 0x89, 0x4a, 0x47, 0x03, 0x09, 0xd2, 0xf8, 0x56, 0x09, 0x66, 0x14, 0x76, 0xfc, 0x2f,
	0x98, 0xd4, 0xc4, 0x6c, 0xea, 0x83, 0xcd, 0x66, 0x89, 0x47, 0xaa, 0x79, 0x66, 0xb3, 0xbc, 0x2f,
	0xb3, 0x39, 0x91, 0x35, 0x9b, 0xa9, 0xb8, 0x58, 0x93, 0xe2, 0x62, 0x11, 0x38, 0x56, 0x87, 0x04,
	0x8e, 0x69, 0xfd, 0x51, 0x02, 0xc7, 0xc4, 0xae, 0xd6, 0xa8, 0xe2, 0xea, 0x83, 0xec, 0xea, 0xe4,
	0x58, 0x76, 0x75, 0x5e, 0xb1, 0xab, 0x40, 0xe7, 0x5d, 0x92, 0x2d, 0x6b, 0xce, 0x71, 0x3c, 0x09,
	0x64, 0x96, 0x56, 0x26, 0xa1, 0xca, 0x0e, 0xf0, 0x17, 0x8d, 0x3f, 0x9a, 0xe0, 0xbb, 0xe6, 0xd5,
	0xd5, 0x71, 0x76, 0x0d, 0xc7, 0x5e, 0xe0, 0x7f, 0x0f, 0xf4, 0x20, 0xf8, 0xd9, 0x32, 0xcc, 0x28,
	0xe3, 0x1e, 0xb8, 0xfa, 0x5d, 0x84, 0x53, 0x3b, 0x0e, 0xde, 0x6d, 0x6f, 0x59, 0x5e, 0x07, 0xdb,
	0x21, 0x73, 0x93, 0x3e, 0xd7, 0xc4, 0xbc, 0x5b, 0xe8, 0x02, 0x9c, 0x4c, 0xc0, 0x02, 0x9f, 0x39,
	0xfc, 0xec, 0x0d, 0xf4, 0x04, 0x1c, 0x4f, 0x80, 0x74, 0xf3, 0xf1, 0x24, 0xcb, 0x31, 0x33, 0x7d,
	0x03, 0xbd, 0x06, 0x8d, 0xb6, 0xe5, 0xd9, 0x8e, 0x6d, 0x45, 0x98, 0x1d, 0xd9, 0x3c, 0x1c, 0xed,
	0xfa, 0xc1, 0x36, 0x35, 0xf1, 0x85, 0xc1, 0xc1, 0x10, 0x62, 0xf4, 0x12, 0x9c, 0x49, 0xdd, 0xe5,
	0xda, 0x56, 0x29, 0x1a, 0x35, 0x9f, 0x0e, 0xcd, 0xc1, 0xe4, 0x4e, 0x9b, 0x06, 0xfa, 0x38, 0xa0,
	0x9b, 0x62, 0x66, 0x5d, 0x33, 0x13, 0x10, 0x5a, 0x86, 0x99, 0x4d, 0x8b, 0x1c, 0x65, 0x19, 0x15,
	0xd1, 0xfa, 0xc2, 0x38, 0x54, 0xa5, 0x50, 0x36, 0xeb, 0xa4, 0xba, 0x59, 0xf3, 0x5c, 0xba, 0xf1,
	0x6b, 0x13, 0x80, 0xe8, 0x70, 0xd7, 0x2d, 0xd7, 0x6d, 0x59, 0xed, 0x6d, 0xa6, 0xc5, 0x77, 0x52,
	0x5a, 0xfc, 0x6c, 0xee, 0x14, 0x14, 0x9a, 0x05, 0xe5, 0xea, 0x40, 0x35, 0xfa, 0xdf, 0x4b, 0x70,
	0x2a, 0x67, 0xf4, 0x03, 0xd7, 0xeb, 0x0b, 0x70, 0x72, 0x93, 0x3f, 0x26, 0xad, 0xd5, 0xd9, 0x1b,
	0x24, 0xaa, 0x12, 0x40, 0x55, 0xa3, 0xd3, 0x60, 0xe2, 0x7e, 0x04, 0x48, 0xd2, 0x66, 0x53, 0x05,
	0x66, 0x9d, 0xd4, 0x44, 0x9e, 0x93, 0xba, 0x00, 0x27, 0x99, 0xac, 0xdb, 0xbe, 0x17, 0x62, 0x2f,
	0xec, 0x87, 0x8e, 0x4d, 0x15, 0x72, 0xc6, 0xcc, 0xde, 0x40, 0x37, 0x04, 0xb6, 0xbc, 0x29, 0xaa,
	0x45, 0xea, 0x9b, 0xa5, 0xc9, 0xe4, 0x4f, 0x6a, 0xe3, 0xe5, 0x4f, 0xea, 0x49, 0x08, 0x32, 0xc9,
	0x82, 0x42, 0xe9, 0x04, 0x10, 0x2b, 0x2c, 0xa4, 0xb2, 0x6c, 0x9f, 0xd0, 0xa0, 0xce, 0x74, 0xdd,
	0xb1, 0x3a, 0x9e, 0x1f, 0x46, 0x4e, 0x7b, 0xcd, 0x8a, 0x2c, 0xa2, 0xf7, 0x21, 0x7a, 0x6f, 0x1c,
	0x4d, 0x32, 0x99, 0x3f, 0x3e, 0x5a, 0x70, 0x25, 0xe2, 0x48, 0xb4, 0x02, 0x53, 0x76, 0x18, 0x67,
	0xfc, 0xb8, 0x52, 0xce, 0x0f, 0xd8, 0x6a, 0xf1, 0xf9, 0xd1, 0x94, 0x89, 0x8c, 0x5f, 0xaf, 0xc0,
	0x5b, 0x72, 0x26, 0xb8, 0xea, 0x3b, 0x1e, 0x55, 0xa8, 0xe7, 0x60, 0x92, 0x1c, 0x12, 0xd9, 0x41,
	0xbf, 0x30, 0x46, 0x4d, 0x70, 0x49, 0x98, 0x1a, 0x3a, 0x9d, 0x24, 0x41, 0x30, 0x3c, 0x4c, 0x15,
	0xa8, 0x68, 0x1e, 0xa6, 0x5c, 0xdf, 0xdf, 0xee, 0xf7, 0x18, 0x25, 0x4b, 0x91, 0xc9, 0x20, 0xe2,
	0x37, 0x23, 0x3f, 0xb2, 0x5c, 0xe6, 0xdc, 0x8b, 0xa3, 0x00, 0x19, 0x1b, 0x3d, 0x0f, 0x40, 0x96,
	0xc5, 0x69, 0x0b, 0x6d, 0xab, 0x84, 0x8c, 0x96, 0x61, 0x36, 0xb9, 0xc2, 0x56, 0x7b, 0xab, 0xd8,
	0x88, 0xa6, 0x08, 0xa8, 0x0a, 0xd2, 0x95, 0xf0, 0xe7, 0x57, 0x8b, 0x55, 0x50, 0x42, 0x47, 0xd7,
	0xe0, 0x44, 0x32, 0x18, 0xbb, 0x53, 0xac, 0xc5, 0x19, 0x12, 0xc2, 0x03, 0x22, 0x26, 0x3e, 0x87,
	0xc2, 0xb8, 0x43, 0x42, 0x26, 0xa4, 0xd2, 0xfa, 0x0b, 0x8f, 0x82, 0x12, 0x32, 0x11, 0x5b, 0xcb,
	0x72, 0x2d, 0xaf, 0x8d, 0x5d, 0xbc, 0x19, 0xf1, 0x4c, 0xdc, 0x30, 0xb1, 0x49, 0xd8, 0xe8, 0x26,
	0x20, 0xb7, 0xdf, 0xde, 0xbe, 0x67, 0x07, 0xd6, 0x2e, 0xcb, 0xe9, 0x91, 0x1d, 0x3c, 0x5d, 0x34,
	0x46, 0x0e, 0x11, 0xf1, 0xfc, 0x29, 0xa8, 0x65, 0xdb, 0x01, 0x3f, 0x4d, 0xe6, 0xdd, 0x32, 0xbe,
	0xa5, 0xf1, 0xf4, 0xfc, 0x6d, 0x12, 0x80, 0x91, 0x30, 0x9f, 0xed, 0x26, 0xb4, 0x9a, 0xa4, 0x5b,
	0xd8, 0xe9, 0xe8, 0x9d, 0x03, 0x92, 0x24, 0x0a, 0xd9, 0x82, 0x92, 0x7c, 0x41, 0x1f, 0x80, 0x59,
	0xfe, 0x13, 0x7f, 0x10, 0xb7, 0x23, 0x6c, 0xf3, 0x63, 0xc6, 0x18, 0x63, 0xa5, 0x06, 0x68, 0x3c,
	0x0f, 0xe5, 0x7d, 0xa6, 0xa7, 0x8c, 0x0f, 0xeb, 0xe9, 0xb5, 0x36, 0x85, 0xad, 0x49, 0x6c, 0x55,
	0x69, 0x60, 0x50, 0x98, 0xa2, 0x4a, 0x9d, 0x7b, 0xf7, 0x3f, 0xaf, 0x46, 0x4f, 0x9c, 0x48, 0xcf,
	0xc1, 0x24, 0x1b, 0xcd, 0xf9, 0x90, 0x48, 0x47, 0x26, 0x00, 0x74, 0x13, 0x80, 0x5e, 0xc8, 0x39,
	0xb0, 0x77, 0x8e, 0x34, 0x53, 0xca, 0x48, 0x89, 0xd8, 0xf8, 0xa2, 0xc6, 0x53, 0x6f, 0xcb, 0x2c,
	0xb8, 0x29, 0x28, 0xc8, 0x5c, 0x86, 0x2a, 0x57, 0xd8, 0x62, 0x6b, 0x27, 0x30, 0xd1, 0x59, 0x98,
	0xf0, 0x7c, 0x42, 0x22, 0x8e, 0x39, 0xec, 0x92, 0x78, 0x94, 0xb6, 0x6f, 0x63, 0xb9, 0x0c, 0x20,
	0xae, 0x89, 0x81, 0x0c, 0x23, 0x3f, 0xb0, 0x3a, 0xd4, 0xa1, 0x72, 0x0f, 0x2b, 0x83, 0xa4, 0x03,
	0xf1, 0xe7, 0x4a, 0x3c, 0xb4, 0xe7, 0x6b, 0x40, 0x57, 0xa0, 0x2c, 0xc5, 0x18, 0xf9, 0xae, 0x42,
	0x5a, 0xaf, 0x49, 0xb1, 0x11, 0x82, 0x32, 0x79, 0x3c, 0x3f, 0x4b, 0xd2, 0xdf, 0x68, 0x05, 0xaa,
	0xfc, 0x99, 0x3c, 0xd7, 0x7a, 0x7e, 0xd8, 0x60, 0x0b, 0x4d, 0x86, 0x4b, 0x5c, 0x8b, 0x29, 0x08,
	0xc9, 0x29, 0xd4, 0xeb, 0xd3, 0xfc, 0x80, 0xd3, 0xf1, 0xe8, 0x42, 0x6b, 0xa6, 0x04, 0x41, 0xd7,
	0xa0, 0xc6, 0x51, 0x17, 0xeb, 0x13, 0x43, 0x64, 0x99, 0xf3, 0x90, 0x45, 0x33, 0x26, 0x25, 0xdc,
	0x8c, 0x7c, 0x1b, 0xbb, 0x38, 0xc2, 0xf5, 0xca, 0x7c, 0xe9, 0xfc, 0xa4, 0x19, 0x5f, 0x93, 0x7b,
	0x8e, 0xe7, 0x44, 0xb4, 0x02, 0x5b, 0x65, 0x9c, 0x16, 0xd7, 0x8d, 0x77, 0xc3, 0x94, 0x34, 0x22,
	0x91, 0xfd, 0x36, 0xbe, 0x27, 0x9d, 0xbd, 0xc5, 0x65, 0x5c, 0xc2, 0x25, 0xfc, 0x99, 0x64, 0x25,
	0xdc, 0xc6, 0x15, 0x98, 0x96, 0xa7, 0x83, 0x4e, 0x24, 0x49, 0xfa, 0x49, 0x96, 0x89, 0x97, 0xa9,
	0x44, 0xe1, 0xf7, 0x1d, 0x3c, 0x11, 0xdb, 0x24, 0x01, 0xd3, 0x4d, 0x5a, 0xa8, 0x3d, 0x2d, 0x8a,
	0xbb, 0x1a, 0xcd, 0x9c, 0xb2, 0x0b, 0xe3, 0xe7, 0x45, 0x85, 0x98, 0x62, 0x8a, 0xf9, 0x0d, 0xd0,
	0xcd, 0xd3, 0x30, 0xb1, 0xe3, 0x59, 0x5d, 0xcc, 0x27, 0xc8, 0x2e, 0xc8, 0x4e, 0x72, 0xc2, 0x6e,
	0x3f, 0xb2, 0x5a, 0x2e, 0x53, 0xc0, 0x9a, 0x99, 0x00, 0xc8, 0xec, 0xe2, 0xd2, 0xf0, 0xa4, 0x49,
	0x7f, 0x27, 0x65, 0x80, 0x09, 0x3e, 0x0e, 0xb9, 0x30, 0xbe, 0xa4, 0xc1, 0x49, 0x59, 0x0c, 0x64,
	0xd9, 0x18, 0xbd, 0x08, 0x55, 0xec, 0x45, 0x81, 0x13, 0xe7, 0xe2, 0x2f, 0x0e, 0x13, 0x1d, 0xa5,
	0x59, 0x58, 0xb6, 0xed, 0x00, 0x87, 0x21, 0x87, 0x99, 0x62, 0x80, 0x46, 0x0b, 0x66, 0xd5, 0x5b,
	0x64, 0xad, 0x16, 0x83, 0x08, 0x59, 0xf0, 0x4b, 0xf4, 0x2c, 0x54, 0xad, 0xb6, 0x1c, 0x75, 0x9c,
	0x1b, 0xf6, 0x5c, 0x53, 0x20, 0x1b, 0x7b, 0x30, 0x49, 0x6f, 0x6c, 0x60, 0x1c, 0x90, 0xa0, 0xc7,
	0xe9, 0xc9, 0x0f, 0x18, 0x1e, 0xf4, 0xc4, 0xb8, 0xe8, 0x3c, 0xcc, 0xba, 0x4e, 0x18, 0x61, 0xaf,
	0xe7, 0x07, 0xd1, 0x96, 0x1f, 0x46, 0x71, 0xbe, 0x38, 0x05, 0x4f, 0xd2, 0x94, 0xc6, 0xf7, 0x84,
	0xa1, 0xd9, 0xf0, 0xef, 0x36, 0x7d, 0xb7, 0x1f, 0x71, 0x91, 0x31, 0xcb, 0xa0, 0xd1, 0x78, 0x9c,
	0xdb, 0x85, 0xb3, 0x50, 0x09, 0x70, 0xd8, 0x77, 0xe3, 0xf4, 0x18, 0xbb, 0x22, 0xec, 0xe8, 0x3a,
	0x7b, 0x52, 0x2e, 0x47, 0x5c, 0xa2, 0x73, 0x50, 0x63, 0x5e, 0xdf, 0xb1, 0xe3, 0x03, 0x68, 0x0c,
	0x51, 0xea, 0x7a, 0x13, 0xa3, 0xd7, 0xf5, 0x96, 0xa0, 0xda, 0xf1, 0x77, 0xa8, 0xf2, 0x56, 0xf2,
	0x0f, 0x42, 0x37, 0xfc, 0x1d, 0x1c, 0x78, 0xc4, 0xc6, 0xb1, 0x1d, 0xcf, 0xd1, 0xa5, 0xce, 0x80,
	0x6b, 0x5c, 0x7f, 0x93, 0xb2, 0xc6, 0xe5, 0x74, 0xae, 0x71, 0x98, 0x05, 0x15, 0x79, 0xc5, 0xdf,
	0x29, 0x81, 0x91, 0x1f, 0x25, 0xdf, 0x75, 0xa2, 0x2d, 0xc6, 0x51, 0x2f, 0x44, 0x1b, 0x29, 0xef,
	0xb5, 0x34, 0x5a, 0xa4, 0x2d, 0x8f, 0x91, 0xf2, 0x65, 0x7f, 0x77, 0x24, 0x73, 0xb8, 0xe8, 0x5d,
	0x50, 0xed, 0xf9, 0xbb, 0xa1, 0xef, 0x7a, 0x3c, 0x30, 0xce, 0xb7, 0xf1, 0x92, 0xaa, 0x99, 0x82,
	0x40, 0xca, 0xff, 0xfe, 0x88, 0xf0, 0xb6, 0xcd, 0xb4, 0x4c, 0x9e, 0xdf, 0x07, 0xe3, 0xd2, 0xb9,
	0xe0, 0x9f, 0xd4, 0xe2, 0xa2, 0x16, 0x2b, 0x61, 0x6e, 0xf8, 0x77, 0xf7, 0xc3, 0x44, 0x69, 0xad,
	0xfa, 0x98, 0x6b, 0x35, 0xbe, 0xa7, 0xf3, 0x73, 0xd9, 0xcb, 0x81, 0xe5, 0x85, 0x56, 0x9b, 0xdc,
	0x5d, 0xf5, 0x03, 0x4c, 0xb3, 0xd3, 0x83, 0x2d, 0x69, 0xec, 0xb0, 0x75, 0xd5, 0x61, 0x9f, 0x85,
	0x4a, 0xe4, 0xd3, 0x38, 0xb2, 0xc4, 0xf3, 0xd6, 0xf4, 0x8a, 0x04, 0xfc, 0x21, 0xf6, 0x92, 0x33,
	0x67, 0xe1, 0x61, 0x45, 0x41, 0x27, 0x4c, 0xb1, 0xba, 0xd4, 0x96, 0x15, 0xee, 0x4e, 0x8e, 0xa8,
	0x6c, 0xe9, 0xca, 0xe8, 0x5b, 0x5a, 0x4e, 0xc7, 0x56, 0x53, 0xe9, 0xd8, 0xd3, 0xdc, 0xfd, 0xd3,
	0xa2, 0xd1, 0xba, 0xc6, 0x03, 0x80, 0xd3, 0xdc, 0x7d, 0xd1, 0x14, 0xcd, 0xba, 0xce, 0x1c, 0x58,
	0x4e, 0xf5, 0x65, 0x49, 0xaa, 0xb9, 0x7c, 0x52, 0x48, 0x5e, 0xe2, 0x3a, 0xe5, 0x5d, 0x60, 0x79,
	0xbc, 0x3e, 0x4c, 0x78, 0x47, 0xaf, 0xd0, 0x7b, 0xa0, 0x2c, 0xed, 0x8f, 0xfc, 0xf0, 0x22, 0x47,
	0x7a, 0x26, 0xa5, 0x22, 0x26, 0x3c, 0x14, 0x2d, 0x3e, 0xc5, 0x9d, 0x39, 0x09, 0xae, 0xb1, 0xc4,
	0xb3, 0x49, 0x2f, 0xef, 0x79, 0xd7, 0x1d, 0x17, 0xbf, 0xb4, 0xb9, 0x19, 0xb2, 0x46, 0x14, 0x9f,
	0xfe, 0x72, 0xbc, 0x4d, 0xc7, 0xc5, 0x74, 0x37, 0xcc, 0x98, 0x0a, 0xcc, 0x78, 0x03, 0xce, 0xa4,
	0x27, 0xc5, 0x5a, 0xbc, 0xd6, 0x60, 0x3a, 0x4a, 0x60, 0x62, 0x2b, 0xcd, 0x17, 0xad, 0xc8, 0x54,
	0xa8, 0x8c, 0xbb, 0xf0, 0x48, 0x06, 0x83, 0xd5, 0xbd, 0x88, 0xc2, 0xf2, 0x12, 0x98, 0x70, 0x87,
	0x41, 0x7c, 0xa7, 0xd2, 0xee, 0x77, 0x3b, 0x56, 0x18, 0x6b, 0x2c, 0xbf, 0x96, 0x1c, 0xd0, 0xa7,
	0x34, 0x9e, 0x02, 0x90, 0x46, 0x26, 0x1b, 0x58, 0x8c, 0xbe, 0x02, 0x53, 0xd2, 0x44, 0x86, 0xc6,
	0x8e, 0xf2, 0xdc, 0x64, 0x22, 0xb4, 0x9c, 0xcc, 0x90, 0xc9, 0xf3, 0x1d, 0x85, 0xf4, 0x0c, 0x3d,
	0x5e, 0x8a, 0xf1, 0x59, 0x9d, 0x2b, 0xcf, 0x8a, 0xeb, 0xfb, 0xdd, 0xeb, 0x8e, 0x1b, 0xe1, 0x80,
	0x84, 0x29, 0xa1, 0xe5, 0x46, 0x5c, 0x1e, 0xf4, 0x37, 0xd1, 0xe5, 0x96, 0x13, 0xb1, 0xb8, 0x86,
	0xf9, 0xc9, 0xf8, 0x9a, 0x1e, 0x1f, 0x2c, 0x37, 0x92, 0x93, 0x0b, 0x09, 0x80, 0x36, 0x8e, 0x11,
	0x34, 0x7a, 0xb8, 0x28, 0xf3, 0xc6, 0x31, 0x01, 0x40, 0x57, 0xe0, 0x4c, 0x2f, 0xf0, 0xd9, 0x19,
	0x0b, 0xbb, 0xb8, 0x8b, 0x3d, 0x3e, 0xce, 0x04, 0xc5, 0xcc, 0xbf, 0x89, 0x16, 0xe1, 0xb4, 0xe3,
	0x85, 0x38, 0x48, 0x13, 0xd1, 0x5a, 0x83, 0x99, 0x7b, 0x8f, 0x04, 0xc6, 0x81, 0xe5, 0xd9, 0x7e,
	0x37, 0xc4, 0xd8, 0xe6, 0xfb, 0x51, 0x82, 0x90, 0x33, 0x40, 0x2f, 0xf0, 0x5b, 0x56, 0xcb, 0x71,
	0x9d, 0x88, 0x65, 0xb2, 0x34, 0x53, 0x06, 0x19, 0x5f, 0x29, 0xf1, 0x82, 0x5b, 0xf3, 0x2e, 0x35,
	0x69, 0x17, 0xe1, 0xd4, 0x87, 0x18, 0xbf, 0xbb, 0xd6, 0x07, 0xfd, 0x40, 0x35, 0x6f, 0x79, 0xb7,
	0x64, 0x0a, 0xc7, 0x4b, 0x28, 0x74, 0x95, 0x42, 0xba, 0x85, 0x2e, 0xc0, 0x49, 0x0e, 0xde, 0x74,
	0xf6, 0x04, 0x3e, 0xe3, 0x71, 0xf6, 0x06, 0x7a, 0x02, 0x4e, 0x70, 0x60, 0xbf, 0xd7, 0x09, 0x2c,
	0x1b, 0xf3, 0x8a, 0x4e, 0xd9, 0xcc, 0xc0, 0xd1, 0x63, 0x30, 0xc3, 0x61, 0x2c, 0x71, 0x45, 0x39,
	0x3e, 0x63, 0xaa, 0x40, 0xb4, 0x00, 0x28, 0x6c, 0x3b, 0xae, 0xab, 0x2e, 0x91, 0x25, 0x16, 0x73,
	0xee, 0x48, 0xf8, 0xf2, 0x02, 0xab, 0x0a, 0xbe, 0xbc, 0xbe, 0x27, 0xe0, 0x04, 0x83, 0x4a, 0xcb,
	0xa3, 0x45, 0x1d, 0x33, 0x03, 0x47, 0xe7, 0xe1, 0x38, 0x83, 0x25, 0x8b, 0x9b, 0x64, 0x99, 0xd5,
	0x14, 0x98, 0xb6, 0xb8, 0x51, 0x10, 0x5f, 0x1a, 0xb0, 0xb6, 0x31, 0x19, 0x66, 0xfc, 0xbe, 0x06,
	0x8f, 0x65, 0xd3, 0xd5, 0x77, 0xb3, 0x95, 0xeb, 0xf5, 0x24, 0x4d, 0x4b, 0x33, 0xc3, 0x7c, 0xb3,
	0x1a, 0xc5, 0xb9, 0x6f, 0x53, 0x25, 0x44, 0x2b, 0x50, 0x13, 0x5d, 0x76, 0x7c, 0xc7, 0x8e, 0x9a,
	0x9d, 0x8c, 0xe9, 0x8c, 0x8f, 0xe8, 0xf0, 0x28, 0x43, 0x72, 0xbc, 0x8e, 0x8b, 0xd7, 0x9c, 0x00,
	0xb7, 0x23, 0x3f, 0xb8, 0xc7, 0x12, 0xf4, 0x4b, 0x50, 0xe5, 0xe5, 0x2a, 0x3e, 0xcb, 0x73, 0xc3,
	0xba, 0x75, 0xd6, 0x8f, 0x99, 0x02, 0x9d, 0x50, 0xee, 0xb4, 0x19, 0xe5, 0xb0, 0x18, 0x5f, 0x54,
	0x90, 0x8e, 0x99, 0x02, 0x1d, 0x6d, 0xc1, 0x29, 0x65, 0x99, 0xbb, 0x74, 0xae, 0xdc, 0x3f, 0x5c,
	0x29, 0xe6, 0x52, 0x96, 0xe5, 0xeb, 0xc7, 0xcc, 0xbc, 0x21, 0x57, 0x4e, 0xc0, 0xac, 0x2d, 0xd6,
	0x4b, 0xe1, 0xc6, 0x5f, 0x6b, 0x50, 0xdd, 0xb8, 0xbd, 0x8e, 0x5d, 0x97, 0x6c, 0xc7, 0xa4, 0xe9,
	0x37, 0x6f, 0xfa, 0x0c, 0x6d, 0x81, 0x06, 0xcf, 0x14, 0x53, 0xf5, 0x67, 0xfa, 0xe8, 0xfe, 0xac,
	0xf1, 0x1a, 0x94, 0xe9, 0xf1, 0x70, 0x1f, 0x01, 0xd6, 0x1c, 0x40, 0x72, 0x6a, 0xe1, 0x3b, 0x5f,
	0x82, 0x18, 0x77, 0x60, 0x56, 0x0d, 0xf4, 0x0b, 0xfb, 0xbd, 0xce, 0xc1, 0xe4, 0x8e, 0x1f, 0x61,
	0x76, 0x8a, 0x64, 0x03, 0x26, 0x00, 0xe3, 0x4f, 0xcb, 0x70, 0x7c, 0xad, 0x49, 0xe2, 0xb5, 0x7e,
	0xab, 0xeb, 0x84, 0x74, 0x23, 0x2d, 0x29, 0x9c, 0xca, 0x54, 0x45, 0x52, 0xe8, 0x07, 0xc2, 0xb1,
	0x3f, 0x2c, 0x71, 0x96, 0xcd, 0xc3, 0x94, 0x28, 0xa7, 0xb6, 0x78, 0x1d, 0xa9, 0x6c, 0xca, 0x20,
	0xb2, 0xcd, 0x93, 0xee, 0x4d, 0x17, 0xef, 0x60, 0x97, 0xaf, 0x2a, 0x0d, 0x46, 0x57, 0x61, 0x26,
	0x24, 0xd3, 0x8c, 0x22, 0x1c, 0xd0, 0x06, 0xb0, 0xc2, 0x98, 0x44, 0xc5, 0x47, 0xab, 0x70, 0x3c,
	0x01, 0xf4, 0x5b, 0xef, 0x1f, 0x25, 0x9a, 0x4c, 0x53, 0x24, 0xc7, 0xca, 0x09, 0xf9, 0x58, 0xc9,
	0x3a, 0x68, 0xfb, 0x6e, 0x24, 0xda, 0x6c, 0x2b, 0xf4, 0x7c, 0xaf, 0x02, 0xe5, 0x43, 0x66, 0x95,
	0xde, 0x8f, 0x0f, 0x99, 0x0d, 0xe9, 0x90, 0xc9, 0x0c, 0x62, 0xfe, 0x11, 0x73, 0x72, 0x5f, 0x47,
	0x4c, 0x18, 0xeb, 0x88, 0x69, 0xfc, 0xaa, 0x0e, 0x67, 0xa8, 0x56, 0x6c, 0x58, 0xed, 0x6d, 0x1c,
	0x49, 0xaa, 0xf4, 0x5e, 0x45, 0x95, 0x9e, 0xc8, 0x55, 0xa5, 0x34, 0x91, 0xac, 0x50, 0xc9, 0x0e,
	0xd2, 0x47, 0xdd, 0x41, 0xfb, 0x8d, 0x42, 0x1b, 0x4d, 0xae, 0x82, 0xef, 0x87, 0x13, 0x76, 0xb8,
	0xe1, 0xef, 0x26, 0x33, 0x12, 0xe1, 0xe3, 0xdb, 0x0a, 0xb6, 0x82, 0x99, 0x21, 0x34, 0xfe, 0x4b,
	0x87, 0xb3, 0x6b, 0xcd, 0xa4, 0x5b, 0x4e, 0xe2, 0xcd, 0x55, 0x85, 0x37, 0x4f, 0x66, 0xc7, 0xce,
	0xa3, 0x3a, 0x2c, 0xe6, 0xfc, 0x81, 0xc6, 0xb9, 0xf3, 0x38, 0xcc, 0x76, 0xc9, 0xbc, 0x92, 0x37,
	0x19, 0x98, 0xc9, 0x49, 0x41, 0xc9, 0x46, 0x16, 0x8d, 0x70, 0x2d, 0xde, 0x7b, 0x59, 0x36, 0x65,
	0x10, 0x5a, 0x86, 0xa9, 0x84, 0x46, 0xa4, 0xac, 0xde, 0x56, 0xd0, 0xf3, 0x68, 0xca, 0x34, 0x2c,
	0x31, 0x2b, 0xba, 0x6c, 0x42, 0xda, 0xe1, 0x4f, 0x13, 0xb3, 0x31, 0xc8, 0xf8, 0x27, 0x8d, 0xa8,
	0x26, 0x77, 0x68, 0xcb, 0x9e, 0xe7, 0xf7, 0xbd, 0x36, 0x8d, 0xfa, 0xd0, 0xb3, 0x63, 0xf9, 0xc2,
	0xc4, 0x13, 0xde, 0xc9, 0x78, 0xe9, 0xc5, 0xf1, 0x0f, 0xe8, 0x89, 0xc7, 0x26, 0x27, 0x15, 0xd1,
	0x34, 0x4d, 0x4e, 0xca, 0x9c, 0x0f, 0x83, 0x4a, 0x8a, 0xf1, 0xe9, 0xdd, 0x54, 0xa8, 0x8c, 0x8f,
	0x69, 0x50, 0x5f, 0x6b, 0x5e, 0x77, 0x3c, 0xcb, 0xcd, 0x5d, 0x6a, 0xb4, 0x57, 0xbc, 0x54, 0xde,
	0x4c, 0x63, 0x0a, 0x64, 0x74, 0x15, 0x20, 0xe1, 0x36, 0x5f, 0x6c, 0xa1, 0x80, 0x24, 0x12, 0xe3,
	0x16, 0x61, 0x3e, 0x8f, 0x09, 0x94, 0x19, 0x5d, 0x4e, 0xc2, 0x89, 0x42, 0xd7, 0x28, 0x30, 0x8d,
	0x1d, 0x38, 0x47, 0x36, 0x45, 0x18, 0x3a, 0x5e, 0x27, 0x79, 0x60, 0x78, 0x2d, 0x08, 0xfc, 0xe0,
	0x76, 0xd8, 0x21, 0x36, 0x91, 0xf5, 0xb4, 0xf1, 0xe2, 0xd0, 0xb4, 0x19, 0x5f, 0x93, 0x7b, 0x71,
	0xa7, 0x26, 0xef, 0x7d, 0x92, 0xfb, 0x34, 0x25, 0x9f, 0x5b, 0xca, 0xf8, 0xdc, 0x7f, 0xd0, 0x60,
	0xea, 0x8e, 0x6f, 0x63, 0xf1, 0xd6, 0x86, 0x54, 0x96, 0xd6, 0xd4, 0xb2, 0xb4, 0xa4, 0x53, 0xfa,
	0x38, 0x3a, 0xb5, 0x04, 0x35, 0xbe, 0x48, 0x21, 0xff, 0xa1, 0xe1, 0x95, 0x19, 0x63, 0x2b, 0x31,
	0x63, 0x79, 0x9f, 0x31, 0xe3, 0x57, 0x35, 0x98, 0x25, 0xeb, 0x4b, 0xb4, 0x87, 0xb8, 0xa7, 0xa4,
	0xaf, 0x29, 0x71, 0xc4, 0x2a, 0x90, 0x6c, 0x3f, 0xb9, 0x9f, 0x80, 0xb9, 0x61, 0x19, 0x24, 0x6b,
	0x5e, 0x69, 0x1c, 0xcd, 0x9b, 0x03, 0x48, 0x76, 0x31, 0xaf, 0xc7, 0x48, 0x10, 0x22, 0x4e, 0xce,
	0xf3, 0x90, 0x96, 0x29, 0x66, 0xcc, 0xf8, 0xda, 0xf8, 0x8e, 0x06, 0x27, 0xc8, 0x72, 0x5e, 0x5d,
	0xfd, 0x01, 0x5a, 0x90, 0xac, 0x01, 0x13, 0xe3, 0x68, 0x80, 0xf1, 0x49, 0x0d, 0x1e, 0x25, 0xcb,
	0xbd, 0xbd, 0xe2, 0x5d, 0xf7, 0x83, 0x5d, 0x2b, 0xb0, 0xe5, 0x4c, 0x8f, 0xba, 0x85, 0xb5, 0xb1,
	0xb7, 0x30, 0x89, 0x81, 0xa2, 0x3d, 0x2f, 0xdc, 0x75, 0xa2, 0xad, 0x24, 0x9b, 0x50, 0x90, 0x2a,
	0x4e, 0x53, 0x18, 0xff, 0xad, 0x33, 0x0d, 0xdb, 0xc0, 0x1e, 0xd1, 0xb8, 0x97, 0xf7, 0x3c, 0xf4,
	0x9c, 0xe2, 0xfd, 0xde, 0x9e, 0x1e, 0x4c, 0xc5, 0x3e, 0x90, 0x18, 0xf3, 0xfb, 0xc2, 0x85, 0xdd,
	0x82, 0x69, 0x62, 0x15, 0xda, 0xbe, 0x8d, 0x7b, 0x96, 0x13, 0x70, 0xe7, 0x7e, 0x7e, 0x84, 0x29,
	0x2c, 0x6c, 0x58, 0x4e, 0x60, 0x2a, 0xd4, 0x23, 0x38, 0xba, 0x7a, 0xaa, 0x93, 0x36, 0xb1, 0x17,
	0x89, 0x07, 0x2f, 0x8f, 0x5a, 0x95, 0xbd, 0x02, 0x65, 0x32, 0x09, 0x32, 0x68, 0xb4, 0xe7, 0xc9,
	0xa5, 0x31, 0x7e, 0xa9, 0x94, 0x0e, 0x67, 0x58, 0xe6, 0xd0, 0xb8, 0xc6, 0x2c, 0x98, 0x68, 0x37,
	0x7c, 0x36, 0x6d, 0x7e, 0x87, 0x2b, 0x5b, 0x6c, 0x81, 0x7f, 0x43, 0x87, 0x53, 0xd4, 0x52, 0x70,
	0x45, 0xdb, 0xf3, 0xd8, 0x78, 0x29, 0x1e, 0x68, 0x59, 0x1e, 0xa8, 0x4d, 0xe9, 0x7a, 0xa6, 0x29,
	0xfd, 0x20, 0x79, 0x94, 0x49, 0xfe, 0x4d, 0xec, 0x27, 0xf9, 0xa7, 0x2a, 0x5a, 0x65, 0x8c, 0x74,
	0xe6, 0x1b, 0xd0, 0xa0, 0x1b, 0x32, 0xde, 0x50, 0x8a, 0xeb, 0x7b, 0xd0, 0x1d, 0x69, 0xfc, 0x28,
	0xbc, 0x95, 0xca, 0x40, 0x3e, 0x24, 0xa7, 0x9e, 0x90, 0x9b, 0x91, 0x18, 0x76, 0xee, 0x51, 0xf0,
	0x8d, 0x37, 0xe0, 0x64, 0xe6, 0x09, 0x07, 0x97, 0xe7, 0x30, 0x42, 0x78, 0x84, 0xf1, 0x87, 0x7a,
	0xf2, 0x97, 0xf7, 0xbc, 0xc4, 0x85, 0x9f, 0x83, 0x49, 0xae, 0xc6, 0xb1, 0x0f, 0x4f, 0x00, 0x0f,
	0xe4, 0xc4, 0xaf, 0x00, 0xba, 0x45, 0x0f, 0x48, 0x37, 0x70, 0xd4, 0xc4, 0xd8, 0xde, 0xc0, 0x38,
	0x08, 0x53, 0x54, 0x5a, 0x86, 0xea, 0x4b, 0x9a, 0x20, 0x6b, 0xca, 0x64, 0xcb, 0x30, 0x1b, 0xf7,
	0x6a, 0x86, 0x18, 0xdb, 0x23, 0x94, 0xcf, 0x52, 0x04, 0x0f, 0x33, 0x78, 0x37, 0xee, 0xc2, 0x23,
	0xf1, 0xda, 0xd7, 0x9a, 0x37, 0xbd, 0x4d, 0xff, 0x7a, 0xe0, 0x77, 0xc9, 0x72, 0x8a, 0x18, 0x40,
	0x2b, 0xd6, 0x9e, 0x13, 0x39, 0x96, 0x6b, 0xb3, 0x7c, 0x76, 0xcd, 0x4c, 0x00, 0xc6, 0x3f, 0x6b,
	0x62, 0xe4, 0x66, 0x66, 0xe4, 0x54, 0xa7, 0x9c, 0xb6, 0x8f, 0x4e, 0xb9, 0x87, 0xc9, 0x24, 0x75,
	0xa5, 0xe5, 0xf4, 0x4a, 0x7f, 0x4b, 0x83, 0xba, 0xc4, 0x43, 0xaa, 0xd7, 0xf1, 0x52, 0x69, 0x03,
	0xdd, 0x6e, 0x6c, 0xdd, 0xb8, 0xf9, 0x93, 0x40, 0xc8, 0x80, 0xe9, 0x2d, 0xa7, 0xb3, 0x95, 0x32,
	0x80, 0x0a, 0xac, 0x48, 0x83, 0xd1, 0x13, 0x70, 0xc2, 0xf1, 0xda, 0x6e, 0xdf, 0xc6, 0xb4, 0x2b,
	0x9d, 0x16, 0x6a, 0xd8, 0x3c, 0x33, 0x70, 0xe3, 0x6f, 0x75, 0x31, 0xdd, 0x66, 0x76, 0xba, 0xcb,
	0x8a, 0xeb, 0xcd, 0xbc, 0x5e, 0x32, 0x88, 0xee, 0xb0, 0x8e, 0x9e, 0x3f, 0xa7, 0x25, 0xb9, 0xa1,
	0x03, 0x60, 0xf3, 0x12, 0xd4, 0xb8, 0xdf, 0x19, 0x1e, 0x6b, 0x8b, 0x20, 0x3d, 0xc6, 0x36, 0xbe,
	0x5d, 0x86, 0x46, 0xcc, 0x9c, 0xb8, 0x99, 0x29, 0x66, 0xeb, 0xaa, 0xc2, 0xd6, 0xa7, 0x07, 0xb2,
	0x35, 0x43, 0x79, 0x58, 0x8c, 0xfd, 0x4d, 0x0d, 0x26, 0xe3, 0xc9, 0xa0, 0x3b, 0x70, 0x3c, 0xd6,
	0x1f, 0xb6, 0x07, 0x87, 0xb6, 0x45, 0xa7, 0xba, 0xe2, 0xcc, 0x34, 0xb1, 0x32, 0x5e, 0xfc, 0x02,
	0xd7, 0x08, 0xe3, 0xb1, 0xe6, 0x30, 0x33, 0x4d, 0xdc, 0xf8, 0x8e, 0x50, 0x83, 0x6d, 0x98, 0x8d,
	0xef, 0xf5, 0x70, 0xd2, 0x60, 0xb0, 0x3a, 0x26, 0xc7, 0x17, 0x6e, 0x2b, 0xa3, 0x5c, 0xf3, 0xa2,
	0xe0, 0x9e, 0x99, 0x1a, 0xba, 0xb1, 0x0b, 0xa7, 0x72, 0xd0, 0xe4, 0xd6, 0xa2, 0x32, 0x6b, 0x2d,
	0x7a, 0x51, 0x34, 0xea, 0xe8, 0xf9, 0x89, 0xed, 0x21, 0x93, 0x89, 0x21, 0xbc, 0xbd, 0xe7, 0x5d,
	0xfa, 0x92, 0x66, 0xfc, 0x84, 0x6c, 0x70, 0xf8, 0x71, 0xe2, 0xe1, 0x1a, 0x1c, 0xd5, 0x88, 0xa4,
	0xa7, 0x30, 0xaa, 0x11, 0x49, 0xd1, 0xfd, 0xf0, 0x18, 0x11, 0x7e, 0xb2, 0x1b, 0x6e, 0x44, 0xc4,
	0x39, 0x30, 0xc6, 0x36, 0x5e, 0x83, 0xb7, 0x24, 0x71, 0x08, 0x6d, 0x24, 0x23, 0xe7, 0xbf, 0x98,
	0xad, 0x0d, 0xe9, 0xd5, 0x28, 0x36, 0xb7, 0xda, 0x00, 0x79, 0x65, 0x6b, 0x03, 0x3f, 0xa3, 0xc1,
	0xb9, 0x9c, 0xb1, 0xc3, 0x87, 0xac, 0x36, 0x1f, 0xd3, 0xc5, 0x12, 0x9b, 0xb9, 0x4b, 0x5c, 0x53,
	0x34, 0xe7, 0xe2, 0x40, 0xcd, 0xc9, 0x92, 0x1e, 0x96, 0xf2, 0xac, 0x70, 0xdd, 0x29, 0x10, 0x8e,
	0x74, 0xc0, 0xd7, 0xd3, 0x07, 0x7c, 0xe3, 0x8b, 0xba, 0x10, 0x4e, 0x33, 0x5f, 0x38, 0xd7, 0x14,
	0xb6, 0x5c, 0x1a, 0x81, 0x2d, 0xe1, 0x61, 0xf3, 0xc5, 0x3b, 0xd0, 0x3d, 0x95, 0x4a, 0xe6, 0x96,
	0xb2, 0xc9, 0xdc, 0x25, 0x38, 0xab, 0xea, 0xf7, 0xa8, 0x61, 0x2c, 0x89, 0xe3, 0xcf, 0xaa, 0x1c,
	0x8c, 0x49, 0x5f, 0x80, 0x69, 0xde, 0x90, 0x18, 0x46, 0x7e, 0x80, 0x8b, 0x0f, 0x4b, 0x0a, 0xfa,
	0x43, 0x8d, 0xe3, 0x3f, 0xac, 0x4b, 0xab, 0x60, 0x3f, 0x5e, 0xda, 0xdc, 0x74, 0x1d, 0x0f, 0x17,
	0x15, 0x13, 0xf2, 0xa9, 0x0e, 0x4b, 0x6f, 0xde, 0xc7, 0xf5, 0xa6, 0x0e, 0xd5, 0x6e, 0xd8, 0x91,
	0x8a, 0x08, 0xe2, 0xb2, 0xd0, 0xd4, 0xfd, 0xac, 0x0e, 0x67, 0xd2, 0x6b, 0xf2, 0x28, 0x23, 0x0a,
	0x2a, 0x4e, 0xb9, 0x44, 0x3f, 0xb8, 0x7c, 0x78, 0x5e, 0x3a, 0xd9, 0x71, 0xa1, 0xb2, 0xeb, 0xe2,
	0xa3, 0xed, 0xe7, 0xe5, 0xb3, 0x5b, 0x8a, 0xf6, 0x69, 0x98, 0x90, 0xdf, 0xb1, 0x18, 0xb2, 0x1a,
	0x86, 0xf7, 0x50, 0x77, 0xc1, 0x4f, 0xeb, 0x70, 0x8a, 0x4d, 0xd4, 0xb4, 0x9c, 0x10, 0x37, 0x23,
	0x2b, 0x88, 0x36, 0xfc, 0xbb, 0xe8, 0x3d, 0x8a, 0xe4, 0xcf, 0xe7, 0x4b, 0x5e, 0x21, 0x39, 0x6c,
	0x7f, 0x32, 0x58, 0xee, 0xa9, 0x32, 0xb8, 0x9e, 0x29, 0x83, 0x1b, 0xbf, 0xa2, 0xc3, 0xa3, 0xb2,
	0x31, 0xa4, 0x0b, 0x92, 0x0e, 0xdf, 0x32, 0x2f, 0x16, 0xf2, 0x79, 0x91, 0x43, 0x78, 0x58, 0x1c,
	0x59, 0xe7, 0x1c, 0x29, 0x4a, 0x47, 0x14, 0xf3, 0xe5, 0x33, 0x9a, 0xe0, 0x4b, 0x33, 0x87, 0x2f,
	0xc5, 0xed, 0x05, 0x0f, 0x53, 0x93, 0xe5, 0xdd, 0xcb, 0x8e, 0x3d, 0x23, 0x3b, 0xb4, 0xbf, 0x90,
	0x77, 0x6f, 0x8a, 0x56, 0xae, 0x09, 0x69, 0xfb, 0xab, 0x09, 0x3d, 0x54, 0x36, 0x34, 0xe1, 0xad,
	0x31, 0x1b, 0x92, 0x9c, 0x27, 0x59, 0x0e, 0x03, 0xa3, 0xb3, 0x50, 0x21, 0x8b, 0xf6, 0x7c, 0xce,
	0x08, 0x7e, 0xa5, 0x14, 0xfc, 0x74, 0xb5, 0xe0, 0x67, 0xfc, 0x95, 0x26, 0x46, 0x6d, 0x0e, 0x18,
	0x35, 0x55, 0x7f, 0xd6, 0xf6, 0x51, 0x7f, 0x7e, 0x98, 0x5c, 0xfa, 0x05, 0x5d, 0x64, 0x1f, 0xb2,
	0x6c, 0x5a, 0x74, 0x47, 0xcb, 0x3e, 0xe4, 0x51, 0x1e, 0xd6, 0x96, 0x7f, 0x17, 0xdf, 0xf2, 0xfb,
	0x11, 0xee, 0x9f, 0xc4, 0x9b, 0x3c, 0xa9, 0x44, 0x24, 0xfa, 0xdf, 0x84, 0x93, 0x54, 0x8f, 0x53,
	0x0d, 0xc0, 0x64, 0x6a, 0xff, 0xbf, 0xa8, 0x06, 0xc0, 0x5f, 0x65, 0xce, 0xd0, 0xa3, 0xdb, 0x30,
	0x6b, 0x87, 0xca, 0x88, 0xfa, 0x38, 0x23, 0xa6, 0x88, 0x8d, 0x8e, 0xb4, 0xf5, 0xc5, 0xe4, 0x0b,
	0xb4, 0x3d, 0xf9, 0x80, 0x8b, 0xae, 0x7c, 0xc0, 0x45, 0xc9, 0x99, 0x97, 0x52, 0x39, 0x73, 0xe3,
	0xe3, 0x3a, 0x9c, 0xce, 0x3e, 0x69, 0xd1, 0x45, 0x2f, 0x28, 0x0a, 0xf3, 0xce, 0x81, 0x0a, 0x23,
	0xd1, 0x1c, 0x96, 0xaa, 0xbc, 0x5c, 0xa0, 0x2a, 0xfb, 0xe3, 0xcc, 0x9b, 0xb2, 0x09, 0xcd, 0xca,
	0x20, 0xf7, 0x63, 0x39, 0x2f, 0xa4, 0x2a, 0x4b, 0x85, 0xa5, 0x50, 0xb5, 0xa4, 0x94, 0x30, 0xad,
	0xb4, 0x2f, 0xa6, 0x95, 0xc7, 0xb0, 0x17, 0x3f, 0xa5, 0xc1, 0x7c, 0x92, 0xb1, 0x56, 0xfa, 0x40,
	0x93, 0xad, 0x32, 0x64, 0xf3, 0xd1, 0x97, 0xde, 0xa4, 0x4a, 0x8b, 0xb8, 0xce, 0xcd, 0x43, 0x97,
	0x06, 0xe4, 0xa1, 0xbf, 0xac, 0x8b, 0x49, 0x34, 0x07, 0x4f, 0xe2, 0xa6, 0xa2, 0x89, 0xcf, 0x0c,
	0xce, 0x47, 0xe7, 0xd3, 0x1f, 0x96, 0x56, 0x6e, 0x27, 0x59, 0x81, 0x98, 0x57, 0x5a, 0x8a, 0x57,
	0x37, 0x60, 0xd2, 0x76, 0x02, 0xee, 0x61, 0x86, 0xbd, 0x1b, 0x9b, 0xd7, 0xae, 0x6b, 0x26, 0xb4,
	0xc6, 0x17, 0x2a, 0x70, 0x66, 0x55, 0xf4, 0x21, 0x28, 0xd5, 0xbe, 0xd7, 0x60, 0x26, 0x69, 0x50,
	0x20, 0xb2, 0x60, 0x6c, 0xcc, 0x7c, 0xf1, 0x30, 0x97, 0x3a, 0x81, 0xd2, 0xfc, 0xa3, 0x3a, 0xd2,
	0x43, 0x2d, 0xbf, 0x2c, 0x27, 0xad, 0x33, 0xe5, 0x7c, 0xc3, 0x9a, 0xdb, 0xc6, 0x25, 0xf7, 0x28,
	0xdf, 0x52, 0x2a, 0xab, 0x13, 0xf9, 0x07, 0xc0, 0xc1, 0x95, 0xd9, 0xf5, 0x63, 0x4a, 0xe3, 0xc3,
	0x8b, 0x00, 0x9b, 0x8e, 0x67, 0xb9, 0x6c, 0xb4, 0x4a, 0xfe, 0xa1, 0x62, 0x50, 0xcb, 0x15, 0x19,
	0x2b, 0xa1, 0x26, 0x8b, 0x13, 0xf5, 0xf6, 0xea, 0xa0, 0xc5, 0xe5, 0xb4, 0x49, 0xc9, 0x6d, 0xd4,
	0xaf, 0xa4, 0xcb, 0xaf, 0xb5, 0xfc, 0xc4, 0xeb, 0xd0, 0xd2, 0xf0, 0xfa, 0xb1, 0x74, 0xcf, 0xf9,
	0x32, 0xcc, 0xd2, 0x79, 0x26, 0x42, 0x2b, 0xec, 0x18, 0x4d, 0x11, 0x34, 0x7e, 0x49, 0x83, 0x19,
	0x45, 0x8d, 0xd2, 0x6d, 0x34, 0x5a, 0xb6, 0x8d, 0xa6, 0x30, 0x8e, 0x57, 0xbf, 0x59, 0x5c, 0x4a,
	0x7f, 0xb3, 0xb8, 0x01, 0x35, 0xf6, 0xa5, 0x10, 0xf1, 0x8e, 0xa5, 0x19, 0x5f, 0xaf, 0xcc, 0xc2,
	0xb4, 0x25, 0xad, 0xd9, 0xf8, 0x66, 0x09, 0x8e, 0xc7, 0xf3, 0x63, 0x85, 0x46, 0xd4, 0xcc, 0xdf,
	0x34, 0x4f, 0x0d, 0xdc, 0x34, 0x8c, 0xee, 0xc8, 0x6c, 0x97, 0xc6, 0x47, 0xf5, 0x43, 0x61, 0x3a,
	0x51, 0x9c, 0xe4, 0xc5, 0x56, 0x33, 0xbe, 0x46, 0xef, 0x26, 0x4f, 0x27, 0x2c, 0xea, 0xf9, 0xce,
	0x28, 0xef, 0xce, 0xc9, 0xd8, 0x68, 0x15, 0x8e, 0x4b, 0x97, 0x71, 0x3b, 0xf4, 0xf0, 0x1e, 0xa3,
	0x14, 0x85, 0xf1, 0xe1, 0x09, 0x40, 0x89, 0xb8, 0xb6, 0x2c, 0xd7, 0xc5, 0x5e, 0x07, 0xa3, 0x57,
	0xf3, 0x25, 0x7d, 0x71, 0xb0, 0xa4, 0x05, 0xe9, 0xd1, 0x11, 0xf6, 0xd7, 0x34, 0x80, 0x66, 0xbf,
	0x15, 0xe2, 0x88, 0x4a, 0xfa, 0x1a, 0x9c, 0xb0, 0x3a, 0x9d, 0x00, 0x77, 0xac, 0x08, 0xdb, 0xfc,
	0x15, 0x96, 0xc2, 0xac, 0x65, 0x86, 0x04, 0x5d, 0x85, 0x99, 0x04, 0x36, 0xd2, 0x42, 0x54, 0x7c,
	0xb2, 0x9e, 0xb6, 0x60, 0xd6, 0x08, 0xeb, 0x89, 0x71, 0x1b, 0x6f, 0x1e, 0x2d, 0x8b, 0x81, 0x6e,
	0x03, 0x84, 0x94, 0xbd, 0xfc, 0xeb, 0x5f, 0xa5, 0xe1, 0xa6, 0x20, 0x56, 0x90, 0x44, 0x26, 0xa6,
	0x34, 0x80, 0xf1, 0xfd, 0x12, 0x9c, 0x8c, 0xb1, 0x4d, 0x1c, 0xf6, 0xc8, 0x6f, 0x62, 0xc0, 0xf3,
	0x14, 0xf1, 0xe9, 0x81, 0xcf, 0x11, 0x94, 0x47, 0x47, 0x0f, 0x57, 0x15, 0x35, 0x7c, 0x06, 0x6a,
	0x01, 0x9f, 0x62, 0xb1, 0xfa, 0xc5, 0xa8, 0x8d, 0xbf, 0xd7, 0x8e, 0x96, 0xe5, 0xba, 0x95, 0x23,
	0xfc, 0x0b, 0xc5, 0x42, 0x19, 0x20, 0xfb, 0xaf, 0x95, 0xe0, 0xac, 0xe4, 0x34, 0x5c, 0x17, 0xb7,
	0x23, 0x67, 0x07, 0x37, 0x9d, 0x0e, 0x7a, 0x3d, 0x5f, 0x01, 0xae, 0x0c, 0xf1, 0x39, 0x12, 0xf9,
	0xd1, 0xd1, 0x82, 0x6f, 0x1f, 0xb1, 0xdd, 0x7b, 0x95, 0xf0, 0x55, 0x70, 0x2a, 0x74, 0x3a, 0xc5,
	0xce, 0x47, 0xc5, 0x47, 0x0d, 0xa8, 0xb4, 0x9c, 0xa8, 0x6b, 0xf5, 0xe8, 0xa7, 0x4a, 0xd8, 0xbf,
	0x08, 0xe0, 0x10, 0xe3, 0x17, 0x55, 0x79, 0x12, 0xc3, 0x79, 0xdd, 0x72, 0x5c, 0x12, 0xb1, 0xee,
	0x43, 0x9e, 0x12, 0xf9, 0xd1, 0x91, 0xe7, 0x67, 0x8e, 0xd8, 0x86, 0x6c, 0x40, 0x0d, 0x07, 0x81,
	0x1f, 0x74, 0xc3, 0x8e, 0xf8, 0x72, 0xa8, 0xb8, 0x36, 0xfe, 0x43, 0x87, 0x47, 0x25, 0x7e, 0xf2,
	0x1f, 0x42, 0x22, 0x6f, 0xe4, 0x4b, 0xe4, 0xb9, 0x21, 0x12, 0x51, 0x47, 0x38, 0x3a, 0x42, 0x39,
	0x62, 0x41, 0xb5, 0xf1, 0x75, 0x4d, 0xca, 0x3e, 0xae, 0x35, 0xd3, 0xdd, 0x20, 0xb4, 0xbd, 0x3e,
	0x5b, 0x03, 0x56, 0x81, 0xe8, 0x71, 0x98, 0xb5, 0xc3, 0x9c, 0x3a, 0x70, 0x0a, 0x4a, 0x46, 0x8b,
	0xf6, 0xe4, 0xd1, 0xd8, 0x17, 0x12, 0x55, 0x20, 0x19, 0x2d, 0xda, 0x53, 0x46, 0x63, 0xef, 0x32,
	0xa7, 0xa0, 0xa9, 0x54, 0xfa, 0x44, 0x36, 0x95, 0xae, 0x43, 0xe3, 0xd5, 0x55, 0x72, 0x6e, 0x6a,
	0xe6, 0x2d, 0xad, 0x20, 0xb1, 0x3a, 0x98, 0xf2, 0xb0, 0xf2, 0x12, 0x1f, 0xe2, 0x79, 0x09, 0xb9,
	0xd1, 0x4d, 0x1b, 0xa7, 0xd1, 0x4d, 0xe9, 0x6e, 0xd1, 0xc7, 0xea, 0x6e, 0xf9, 0x68, 0x09, 0xfe,
	0x1f, 0xe7, 0x07, 0xad, 0x2e, 0x90, 0xdf, 0x77, 0xd8, 0x07, 0x21, 0x89, 0x12, 0xbf, 0xd2, 0xb3,
	0xad, 0x08, 0xa3, 0x17, 0x15, 0x96, 0x3e, 0x9b, 0x77, 0x84, 0x1d, 0x3a, 0xc0, 0x81, 0xbc, 0x0e,
	0xf0, 0x4d, 0xd1, 0x11, 0x44, 0x75, 0x37, 0xdb, 0xbe, 0xae, 0x02, 0xe9, 0xbb, 0xa0, 0xe2, 0x4b,
	0x65, 0xa3, 0x8a, 0x32, 0x4d, 0x81, 0x9a, 0xf0, 0x48, 0x0c, 0xf2, 0xf0, 0xae, 0xfc, 0x79, 0xcd,
	0x01, 0x12, 0x8e, 0x3f, 0x90, 0x64, 0x0e, 0xa2, 0x54, 0xff, 0xf5, 0x4e, 0x39, 0xf5, 0xaf, 0x77,
	0x8c, 0x8f, 0x94, 0xe0, 0xed, 0x6b, 0x4d, 0xa9, 0xa7, 0xf3, 0x46, 0x9f, 0xb0, 0x35, 0x23, 0x93,
	0x5b, 0x8a, 0x4c, 0x96, 0xb2, 0xf9, 0x89, 0xc2, 0x21, 0x0e, 0x44, 0x2a, 0x6f, 0x8e, 0x27, 0x95,
	0xab, 0x04, 0xab, 0x43, 0xa6, 0x33, 0xaa, 0x4c, 0x54, 0x7c, 0xf4, 0x12, 0x9c, 0xe1, 0x80, 0x71,
	0xe5, 0x91, 0x4f, 0x57, 0x20, 0x8d, 0x4f, 0xea, 0x6c, 0x7f, 0xdc, 0xc0, 0x11, 0x63, 0xe2, 0x7e,
	0xf7, 0xc7, 0xd0, 0x01, 0x0e, 0xcb, 0xf2, 0xac, 0x15, 0xe4, 0xe9, 0x33, 0x32, 0xd5, 0x73, 0x64,
	0x6a, 0xfc, 0x65, 0xfc, 0xfd, 0x56, 0xa6, 0x68, 0x6c, 0x4d, 0xac, 0x48, 0x99, 0x15, 0xb8, 0x76,
	0x50, 0x02, 0xd7, 0x0f, 0x42, 0xe0, 0xe9, 0xff, 0x7c, 0x65, 0x7c, 0x45, 0x8f, 0x0d, 0xe2, 0x83,
	0x09, 0xbc, 0x39, 0xaa, 0xc0, 0xe3, 0x0f, 0x9e, 0x8e, 0x2a, 0x76, 0x05, 0x7d, 0xff, 0xc2, 0x6f,
	0x71, 0xe1, 0xbf, 0x0e, 0xa7, 0x38, 0xa3, 0xfa, 0x74, 0x6e, 0x21, 0x15, 0xdc, 0xa0, 0x97, 0xac,
	0x06, 0x09, 0xda, 0xcc, 0x1b, 0xc4, 0xf8, 0x57, 0x0d, 0x4e, 0x11, 0xd7, 0xda, 0xc4, 0xd1, 0xba,
	0x13, 0x46, 0x7e, 0xe0, 0xb4, 0x2d, 0x77, 0x6d, 0xa5, 0xa8, 0xf5, 0x23, 0x87, 0xe4, 0xb0, 0xb6,
	0xc8, 0x02, 0xe7, 0x92, 0x78, 0x49, 0x4b, 0x4b, 0x5e, 0xd2, 0x22, 0xb0, 0x9e, 0x15, 0x6d, 0x89,
	0x6f, 0x1a, 0x92, 0xdf, 0xc6, 0xe7, 0x74, 0xf6, 0xb2, 0x8c, 0x49, 0xff, 0xb7, 0x11, 0x09, 0x2d,
	0x56, 0x5c, 0xab, 0xbd, 0x4d, 0xc2, 0x17, 0xf4, 0x3e, 0x65, 0xd5, 0x17, 0xf2, 0xb4, 0x26, 0x87,
	0xec, 0xb0, 0x56, 0x8e, 0xf9, 0xca, 0xe9, 0x87, 0xfe, 0x96, 0xc7, 0xf8, 0xd0, 0x1f, 0xc7, 0x1d,
	0xd1, 0x7a, 0x7c, 0x55, 0x7c, 0x59, 0x69, 0x95, 0xfe, 0x63, 0x3a, 0x93, 0xfd, 0x3b, 0x82, 0xe4,
	0x73, 0x2d, 0xc5, 0xaf, 0xaa, 0xd5, 0xd5, 0xff, 0x3c, 0x33, 0x91, 0xbc, 0x8a, 0xf6, 0x40, 0xff,
	0x60, 0x62, 0x5f, 0xff, 0x46, 0xc1, 0xf8, 0xb8, 0x0e, 0x73, 0x71, 0xdc, 0xad, 0x2c, 0x29, 0x0e,
	0x50, 0x6f, 0x28, 0x6a, 0x70, 0x79, 0x60, 0x21, 0x37, 0x97, 0xfa, 0xb0, 0x5b, 0xdf, 0x06, 0xb9,
	0x8a, 0xc2, 0xb7, 0x2a, 0x8d, 0xdf, 0x8e, 0x39, 0xd3, 0x7c, 0x20, 0xce, 0x34, 0x8f, 0x18, 0x67,
	0xc4, 0xc7, 0x63, 0x3e, 0x40, 0x0e, 0xb3, 0x64, 0x5e, 0x42, 0x69, 0x98, 0x05, 0xcd, 0xff, 0x7f,
	0x18, 0xf9, 0xca, 0x6e, 0xaa, 0x23, 0x18, 0x9f, 0xd6, 0xa5, 0x06, 0x71, 0xf9, 0xf5, 0x68, 0xd1,
	0x13, 0x30, 0x52, 0x0f, 0x72, 0x3e, 0xed, 0x61, 0xb1, 0xeb, 0x95, 0x11, 0x7a, 0xb3, 0x2f, 0x41,
	0x85, 0x7d, 0xe3, 0xaf, 0xd8, 0xc9, 0x73, 0x44, 0xe3, 0x13, 0xba, 0xf2, 0xce, 0x9c, 0xc2, 0xa5,
	0x02, 0xbb, 0x3b, 0x80, 0xec, 0x87, 0x8c, 0x41, 0x7f, 0xa6, 0xcb, 0x5d, 0x5b, 0xc9, 0xbb, 0xe7,
	0x7b, 0x9e, 0x60, 0xd3, 0x75, 0x85, 0x4d, 0x8b, 0x83, 0x3b, 0x92, 0x72, 0x88, 0x0f, 0x8b, 0x59,
	0xfe, 0x08, 0xcc, 0x12, 0xfe, 0xe1, 0xa6, 0xf8, 0x40, 0x80, 0xb8, 0x94, 0xd8, 0x58, 0x1a, 0x95,
	0x8d, 0x7f, 0x2c, 0x77, 0x75, 0x25, 0x6f, 0x9b, 0x8f, 0xdb, 0xd5, 0x95, 0xa1, 0xfc, 0xbf, 0xc2,
	0xc0, 0x95, 0xc7, 0xbe, 0xfb, 0x8d, 0x39, 0xed, 0x3f, 0xbf, 0x31, 0xa7, 0x7d, 0xfa, 0xfe, 0x9c,
	0xf6, 0x85, 0xfb, 0x73, 0xda, 0x9f, 0xdf, 0x9f, 0xd3, 0xfe, 0xe6, 0xfe, 0x9c, 0xf6, 0xf5, 0xfb,
	0x73, 0xda, 0x3f, 0xde, 0x9f, 0xd3, 0xbe, 0x7b, 0x7f, 0x4e, 0x6b, 0x55, 0xe8, 0x7f, 0x01, 0xbe,
	0xfc, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x9a, 0x20, 0x95, 0x5c, 0x78, 0x00, 0x00,
}

func (this *ByteArray) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ByteArray)
	if !ok {
		that2, ok := that.(ByteArray)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoBlockLink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoBlockLink)
	if !ok {
		that2, ok := that.(ProtoBlockLink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Oneof1 == nil {
		if this.Oneof1 != nil {
			return false
		}
	} else if this.Oneof1 == nil {
		return false
	} else if !this.Oneof1.Equal(that1.Oneof1) {
		return false
	}
	if that1.Oneof2 == nil {
		if this.Oneof2 != nil {
			return false
		}
	} else if this.Oneof2 == nil {
		return false
	} else if !this.Oneof2.Equal(that1.Oneof2) {
		return false
	}
	if that1.Oneof3 == nil {
		if this.Oneof3 != nil {
			return false
		}
	} else if this.Oneof3 == nil {
		return false
	} else if !this.Oneof3.Equal(that1.Oneof3) {
		return false
	}
	if that1.Oneof4 == nil {
		if this.Oneof4 != nil {
			return false
		}
	} else if this.Oneof4 == nil {
		return false
	} else if !this.Oneof4.Equal(that1.Oneof4) {
		return false
	}
	if !bytes.Equal(this.Blockhash, that1.Blockhash) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoBlockLink_Version) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoBlockLink_Version)
	if !ok {
		that2, ok := that.(ProtoBlockLink_Version)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *ProtoBlockLink_Index) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoBlockLink_Index)
	if !ok {
		that2, ok := that.(ProtoBlockLink_Index)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	return true
}
func (this *ProtoBlockLink_Dsindex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoBlockLink_Dsindex)
	if !ok {
		that2, ok := that.(ProtoBlockLink_Dsindex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Dsindex != that1.Dsindex {
		return false
	}
	return true
}
func (this *ProtoBlockLink_Blocktype) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoBlockLink_Blocktype)
	if !ok {
		that2, ok := that.(ProtoBlockLink_Blocktype)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Blocktype != that1.Blocktype {
		return false
	}
	return true
}
func (this *ProtoBlockBase) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoBlockBase)
	if !ok {
		that2, ok := that.(ProtoBlockBase)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Blockhash, that1.Blockhash) {
		return false
	}
	if !this.Cosigs.Equal(that1.Cosigs) {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoBlockBase_CoSignatures) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoBlockBase_CoSignatures)
	if !ok {
		that2, ok := that.(ProtoBlockBase_CoSignatures)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cs1.Equal(that1.Cs1) {
		return false
	}
	if len(this.B1) != len(that1.B1) {
		return false
	}
	for i := range this.B1 {
		if this.B1[i] != that1.B1[i] {
			return false
		}
	}
	if !this.Cs2.Equal(that1.Cs2) {
		return false
	}
	if len(this.B2) != len(that1.B2) {
		return false
	}
	for i := range this.B2 {
		if this.B2[i] != that1.B2[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoBlockHeaderBase) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoBlockHeaderBase)
	if !ok {
		that2, ok := that.(ProtoBlockHeaderBase)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !bytes.Equal(this.Committeehash, that1.Committeehash) {
		return false
	}
	if !bytes.Equal(this.Prevhash, that1.Prevhash) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoDSBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoDSBlock)
	if !ok {
		that2, ok := that.(ProtoDSBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if !this.Blockbase.Equal(that1.Blockbase) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoDSBlock_DSBlockHashSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoDSBlock_DSBlockHashSet)
	if !ok {
		that2, ok := that.(ProtoDSBlock_DSBlockHashSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Shardinghash, that1.Shardinghash) {
		return false
	}
	if !bytes.Equal(this.Reservedfield, that1.Reservedfield) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoDSBlock_DSBlockHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoDSBlock_DSBlockHeader)
	if !ok {
		that2, ok := that.(ProtoDSBlock_DSBlockHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Blockheaderbase.Equal(that1.Blockheaderbase) {
		return false
	}
	if this.Dsdifficulty != that1.Dsdifficulty {
		return false
	}
	if this.Difficulty != that1.Difficulty {
		return false
	}
	if !bytes.Equal(this.Prevhash, that1.Prevhash) {
		return false
	}
	if !this.Leaderpubkey.Equal(that1.Leaderpubkey) {
		return false
	}
	if that1.Oneof6 == nil {
		if this.Oneof6 != nil {
			return false
		}
	} else if this.Oneof6 == nil {
		return false
	} else if !this.Oneof6.Equal(that1.Oneof6) {
		return false
	}
	if that1.Oneof7 == nil {
		if this.Oneof7 != nil {
			return false
		}
	} else if this.Oneof7 == nil {
		return false
	} else if !this.Oneof7.Equal(that1.Oneof7) {
		return false
	}
	if !this.Gasprice.Equal(that1.Gasprice) {
		return false
	}
	if !this.Swinfo.Equal(that1.Swinfo) {
		return false
	}
	if len(this.Dswinners) != len(that1.Dswinners) {
		return false
	}
	for i := range this.Dswinners {
		if !this.Dswinners[i].Equal(that1.Dswinners[i]) {
			return false
		}
	}
	if !this.Hash.Equal(that1.Hash) {
		return false
	}
	if len(this.Dsremoved) != len(that1.Dsremoved) {
		return false
	}
	for i := range this.Dsremoved {
		if !this.Dsremoved[i].Equal(that1.Dsremoved[i]) {
			return false
		}
	}
	if len(this.Proposals) != len(that1.Proposals) {
		return false
	}
	for i := range this.Proposals {
		if !this.Proposals[i].Equal(that1.Proposals[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoDSBlock_DSBlockHeader_Blocknum) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoDSBlock_DSBlockHeader_Blocknum)
	if !ok {
		that2, ok := that.(ProtoDSBlock_DSBlockHeader_Blocknum)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Blocknum != that1.Blocknum {
		return false
	}
	return true
}
func (this *ProtoDSBlock_DSBlockHeader_Epochnum) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoDSBlock_DSBlockHeader_Epochnum)
	if !ok {
		that2, ok := that.(ProtoDSBlock_DSBlockHeader_Epochnum)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Epochnum != that1.Epochnum {
		return false
	}
	return true
}
func (this *ProtoDSBlock_DSBlockHeader_PowDSWinners) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoDSBlock_DSBlockHeader_PowDSWinners)
	if !ok {
		that2, ok := that.(ProtoDSBlock_DSBlockHeader_PowDSWinners)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	if !this.Val.Equal(that1.Val) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoDSBlock_DSBlockHeader_Vote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoDSBlock_DSBlockHeader_Vote)
	if !ok {
		that2, ok := that.(ProtoDSBlock_DSBlockHeader_Vote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoDSBlock_DSBlockHeader_Proposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoDSBlock_DSBlockHeader_Proposal)
	if !ok {
		that2, ok := that.(ProtoDSBlock_DSBlockHeader_Proposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Proposalid != that1.Proposalid {
		return false
	}
	if len(this.Dsvotes) != len(that1.Dsvotes) {
		return false
	}
	for i := range this.Dsvotes {
		if !this.Dsvotes[i].Equal(that1.Dsvotes[i]) {
			return false
		}
	}
	if len(this.Minervotes) != len(that1.Minervotes) {
		return false
	}
	for i := range this.Minervotes {
		if !this.Minervotes[i].Equal(that1.Minervotes[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoDSNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoDSNode)
	if !ok {
		that2, ok := that.(ProtoDSNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoDSCommittee) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoDSCommittee)
	if !ok {
		that2, ok := that.(ProtoDSCommittee)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if len(this.Dsnodes) != len(that1.Dsnodes) {
		return false
	}
	for i := range this.Dsnodes {
		if !this.Dsnodes[i].Equal(that1.Dsnodes[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoMicroBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoMicroBlock)
	if !ok {
		that2, ok := that.(ProtoMicroBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if len(this.Tranhashes) != len(that1.Tranhashes) {
		return false
	}
	for i := range this.Tranhashes {
		if !bytes.Equal(this.Tranhashes[i], that1.Tranhashes[i]) {
			return false
		}
	}
	if !this.Blockbase.Equal(that1.Blockbase) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoMicroBlock_MicroBlockHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoMicroBlock_MicroBlockHeader)
	if !ok {
		that2, ok := that.(ProtoMicroBlock_MicroBlockHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Blockheaderbase.Equal(that1.Blockheaderbase) {
		return false
	}
	if that1.Oneof2 == nil {
		if this.Oneof2 != nil {
			return false
		}
	} else if this.Oneof2 == nil {
		return false
	} else if !this.Oneof2.Equal(that1.Oneof2) {
		return false
	}
	if this.Gaslimit != that1.Gaslimit {
		return false
	}
	if that1.Oneof4 == nil {
		if this.Oneof4 != nil {
			return false
		}
	} else if this.Oneof4 == nil {
		return false
	} else if !this.Oneof4.Equal(that1.Oneof4) {
		return false
	}
	if !this.Rewards.Equal(that1.Rewards) {
		return false
	}
	if !bytes.Equal(this.Prevhash, that1.Prevhash) {
		return false
	}
	if that1.Oneof7 == nil {
		if this.Oneof7 != nil {
			return false
		}
	} else if this.Oneof7 == nil {
		return false
	} else if !this.Oneof7.Equal(that1.Oneof7) {
		return false
	}
	if !bytes.Equal(this.Txroothash, that1.Txroothash) {
		return false
	}
	if that1.Oneof9 == nil {
		if this.Oneof9 != nil {
			return false
		}
	} else if this.Oneof9 == nil {
		return false
	} else if !this.Oneof9.Equal(that1.Oneof9) {
		return false
	}
	if !this.Minerpubkey.Equal(that1.Minerpubkey) {
		return false
	}
	if this.Dsblocknum != that1.Dsblocknum {
		return false
	}
	if !bytes.Equal(this.Statedeltahash, that1.Statedeltahash) {
		return false
	}
	if !bytes.Equal(this.Tranreceipthash, that1.Tranreceipthash) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoMicroBlock_MicroBlockHeader_Shardid) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoMicroBlock_MicroBlockHeader_Shardid)
	if !ok {
		that2, ok := that.(ProtoMicroBlock_MicroBlockHeader_Shardid)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Shardid != that1.Shardid {
		return false
	}
	return true
}
func (this *ProtoMicroBlock_MicroBlockHeader_Gasused) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoMicroBlock_MicroBlockHeader_Gasused)
	if !ok {
		that2, ok := that.(ProtoMicroBlock_MicroBlockHeader_Gasused)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gasused != that1.Gasused {
		return false
	}
	return true
}
func (this *ProtoMicroBlock_MicroBlockHeader_Epochnum) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoMicroBlock_MicroBlockHeader_Epochnum)
	if !ok {
		that2, ok := that.(ProtoMicroBlock_MicroBlockHeader_Epochnum)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Epochnum != that1.Epochnum {
		return false
	}
	return true
}
func (this *ProtoMicroBlock_MicroBlockHeader_Numtxs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoMicroBlock_MicroBlockHeader_Numtxs)
	if !ok {
		that2, ok := that.(ProtoMicroBlock_MicroBlockHeader_Numtxs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Numtxs != that1.Numtxs {
		return false
	}
	return true
}
func (this *ProtoShardingStructure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoShardingStructure)
	if !ok {
		that2, ok := that.(ProtoShardingStructure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if len(this.Shards) != len(that1.Shards) {
		return false
	}
	for i := range this.Shards {
		if !this.Shards[i].Equal(that1.Shards[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoShardingStructure_Member) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoShardingStructure_Member)
	if !ok {
		that2, ok := that.(ProtoShardingStructure_Member)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Peerinfo.Equal(that1.Peerinfo) {
		return false
	}
	if that1.Oneof3 == nil {
		if this.Oneof3 != nil {
			return false
		}
	} else if this.Oneof3 == nil {
		return false
	} else if !this.Oneof3.Equal(that1.Oneof3) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoShardingStructure_Member_Reputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoShardingStructure_Member_Reputation)
	if !ok {
		that2, ok := that.(ProtoShardingStructure_Member_Reputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Reputation != that1.Reputation {
		return false
	}
	return true
}
func (this *ProtoShardingStructure_Shard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoShardingStructure_Shard)
	if !ok {
		that2, ok := that.(ProtoShardingStructure_Shard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoMbInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoMbInfo)
	if !ok {
		that2, ok := that.(ProtoMbInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Mbhash, that1.Mbhash) {
		return false
	}
	if !bytes.Equal(this.Txroot, that1.Txroot) {
		return false
	}
	if that1.Oneof3 == nil {
		if this.Oneof3 != nil {
			return false
		}
	} else if this.Oneof3 == nil {
		return false
	} else if !this.Oneof3.Equal(that1.Oneof3) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoMbInfo_Shardid) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoMbInfo_Shardid)
	if !ok {
		that2, ok := that.(ProtoMbInfo_Shardid)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Shardid != that1.Shardid {
		return false
	}
	return true
}
func (this *ProtoTxBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoTxBlock)
	if !ok {
		that2, ok := that.(ProtoTxBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if len(this.Mbinfos) != len(that1.Mbinfos) {
		return false
	}
	for i := range this.Mbinfos {
		if !this.Mbinfos[i].Equal(that1.Mbinfos[i]) {
			return false
		}
	}
	if !this.Blockbase.Equal(that1.Blockbase) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoTxBlock_TxBlockHashSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoTxBlock_TxBlockHashSet)
	if !ok {
		that2, ok := that.(ProtoTxBlock_TxBlockHashSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Stateroothash, that1.Stateroothash) {
		return false
	}
	if !bytes.Equal(this.Statedeltahash, that1.Statedeltahash) {
		return false
	}
	if !bytes.Equal(this.Mbinfohash, that1.Mbinfohash) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoTxBlock_TxBlockHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoTxBlock_TxBlockHeader)
	if !ok {
		that2, ok := that.(ProtoTxBlock_TxBlockHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Blockheaderbase.Equal(that1.Blockheaderbase) {
		return false
	}
	if this.Gaslimit != that1.Gaslimit {
		return false
	}
	if that1.Oneof3 == nil {
		if this.Oneof3 != nil {
			return false
		}
	} else if this.Oneof3 == nil {
		return false
	} else if !this.Oneof3.Equal(that1.Oneof3) {
		return false
	}
	if !this.Rewards.Equal(that1.Rewards) {
		return false
	}
	if !bytes.Equal(this.Prevhash, that1.Prevhash) {
		return false
	}
	if that1.Oneof6 == nil {
		if this.Oneof6 != nil {
			return false
		}
	} else if this.Oneof6 == nil {
		return false
	} else if !this.Oneof6.Equal(that1.Oneof6) {
		return false
	}
	if !this.Hash.Equal(that1.Hash) {
		return false
	}
	if that1.Oneof8 == nil {
		if this.Oneof8 != nil {
			return false
		}
	} else if this.Oneof8 == nil {
		return false
	} else if !this.Oneof8.Equal(that1.Oneof8) {
		return false
	}
	if !this.Minerpubkey.Equal(that1.Minerpubkey) {
		return false
	}
	if that1.Oneof10 == nil {
		if this.Oneof10 != nil {
			return false
		}
	} else if this.Oneof10 == nil {
		return false
	} else if !this.Oneof10.Equal(that1.Oneof10) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoTxBlock_TxBlockHeader_Gasused) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoTxBlock_TxBlockHeader_Gasused)
	if !ok {
		that2, ok := that.(ProtoTxBlock_TxBlockHeader_Gasused)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gasused != that1.Gasused {
		return false
	}
	return true
}
func (this *ProtoTxBlock_TxBlockHeader_Blocknum) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoTxBlock_TxBlockHeader_Blocknum)
	if !ok {
		that2, ok := that.(ProtoTxBlock_TxBlockHeader_Blocknum)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Blocknum != that1.Blocknum {
		return false
	}
	return true
}
func (this *ProtoTxBlock_TxBlockHeader_Numtxs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoTxBlock_TxBlockHeader_Numtxs)
	if !ok {
		that2, ok := that.(ProtoTxBlock_TxBlockHeader_Numtxs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Numtxs != that1.Numtxs {
		return false
	}
	return true
}
func (this *ProtoTxBlock_TxBlockHeader_Dsblocknum) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoTxBlock_TxBlockHeader_Dsblocknum)
	if !ok {
		that2, ok := that.(ProtoTxBlock_TxBlockHeader_Dsblocknum)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Dsblocknum != that1.Dsblocknum {
		return false
	}
	return true
}
func (this *ProtoVCBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoVCBlock)
	if !ok {
		that2, ok := that.(ProtoVCBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if !this.Blockbase.Equal(that1.Blockbase) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoVCBlock_VCBlockHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoVCBlock_VCBlockHeader)
	if !ok {
		that2, ok := that.(ProtoVCBlock_VCBlockHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Blockheaderbase.Equal(that1.Blockheaderbase) {
		return false
	}
	if this.Viewchangedsepochno != that1.Viewchangedsepochno {
		return false
	}
	if this.Viewchangeepochno != that1.Viewchangeepochno {
		return false
	}
	if that1.Oneof4 == nil {
		if this.Oneof4 != nil {
			return false
		}
	} else if this.Oneof4 == nil {
		return false
	} else if !this.Oneof4.Equal(that1.Oneof4) {
		return false
	}
	if !this.Candidateleadernetworkinfo.Equal(that1.Candidateleadernetworkinfo) {
		return false
	}
	if !this.Candidateleaderpubkey.Equal(that1.Candidateleaderpubkey) {
		return false
	}
	if that1.Oneof7 == nil {
		if this.Oneof7 != nil {
			return false
		}
	} else if this.Oneof7 == nil {
		return false
	} else if !this.Oneof7.Equal(that1.Oneof7) {
		return false
	}
	if len(this.Faultyleaders) != len(that1.Faultyleaders) {
		return false
	}
	for i := range this.Faultyleaders {
		if !this.Faultyleaders[i].Equal(that1.Faultyleaders[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Prevhash, that1.Prevhash) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoVCBlock_VCBlockHeader_Viewchangestate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoVCBlock_VCBlockHeader_Viewchangestate)
	if !ok {
		that2, ok := that.(ProtoVCBlock_VCBlockHeader_Viewchangestate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Viewchangestate != that1.Viewchangestate {
		return false
	}
	return true
}
func (this *ProtoVCBlock_VCBlockHeader_Vccounter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoVCBlock_VCBlockHeader_Vccounter)
	if !ok {
		that2, ok := that.(ProtoVCBlock_VCBlockHeader_Vccounter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Vccounter != that1.Vccounter {
		return false
	}
	return true
}
func (this *ProtoFallbackBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoFallbackBlock)
	if !ok {
		that2, ok := that.(ProtoFallbackBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if !this.Blockbase.Equal(that1.Blockbase) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoFallbackBlock_FallbackBlockHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoFallbackBlock_FallbackBlockHeader)
	if !ok {
		that2, ok := that.(ProtoFallbackBlock_FallbackBlockHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Blockheaderbase.Equal(that1.Blockheaderbase) {
		return false
	}
	if this.Fallbackdsepochno != that1.Fallbackdsepochno {
		return false
	}
	if this.Fallbackepochno != that1.Fallbackepochno {
		return false
	}
	if this.Fallbackstate != that1.Fallbackstate {
		return false
	}
	if !bytes.Equal(this.Stateroothash, that1.Stateroothash) {
		return false
	}
	if this.Leaderconsensusid != that1.Leaderconsensusid {
		return false
	}
	if !this.Leadernetworkinfo.Equal(that1.Leadernetworkinfo) {
		return false
	}
	if !this.Leaderpubkey.Equal(that1.Leaderpubkey) {
		return false
	}
	if this.Shardid != that1.Shardid {
		return false
	}
	if !bytes.Equal(this.Prevhash, that1.Prevhash) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoDiagnosticDataNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoDiagnosticDataNodes)
	if !ok {
		that2, ok := that.(ProtoDiagnosticDataNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Shards.Equal(that1.Shards) {
		return false
	}
	if !this.Dscommittee.Equal(that1.Dscommittee) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoDiagnosticDataCoinbase) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoDiagnosticDataCoinbase)
	if !ok {
		that2, ok := that.(ProtoDiagnosticDataCoinbase)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Nodecount.Equal(that1.Nodecount) {
		return false
	}
	if !this.Sigcount.Equal(that1.Sigcount) {
		return false
	}
	if this.Lookupcount != that1.Lookupcount {
		return false
	}
	if !this.Totalreward.Equal(that1.Totalreward) {
		return false
	}
	if !this.Basereward.Equal(that1.Basereward) {
		return false
	}
	if !this.Baserewardeach.Equal(that1.Baserewardeach) {
		return false
	}
	if !this.Lookupreward.Equal(that1.Lookupreward) {
		return false
	}
	if !this.Rewardeachlookup.Equal(that1.Rewardeachlookup) {
		return false
	}
	if !this.Nodereward.Equal(that1.Nodereward) {
		return false
	}
	if !this.Rewardeach.Equal(that1.Rewardeach) {
		return false
	}
	if !this.Balanceleft.Equal(that1.Balanceleft) {
		return false
	}
	if !this.Luckydrawwinnerkey.Equal(that1.Luckydrawwinnerkey) {
		return false
	}
	if !bytes.Equal(this.Luckydrawwinneraddr, that1.Luckydrawwinneraddr) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoMinerInfoDSComm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoMinerInfoDSComm)
	if !ok {
		that2, ok := that.(ProtoMinerInfoDSComm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Dsnodes) != len(that1.Dsnodes) {
		return false
	}
	for i := range this.Dsnodes {
		if !this.Dsnodes[i].Equal(that1.Dsnodes[i]) {
			return false
		}
	}
	if len(this.Dsnodesejected) != len(that1.Dsnodesejected) {
		return false
	}
	for i := range this.Dsnodesejected {
		if !this.Dsnodesejected[i].Equal(that1.Dsnodesejected[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoMinerInfoDSComm_Node) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoMinerInfoDSComm_Node)
	if !ok {
		that2, ok := that.(ProtoMinerInfoDSComm_Node)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoMinerInfoShards) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoMinerInfoShards)
	if !ok {
		that2, ok := that.(ProtoMinerInfoShards)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Shards) != len(that1.Shards) {
		return false
	}
	for i := range this.Shards {
		if !this.Shards[i].Equal(that1.Shards[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoMinerInfoShards_Node) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoMinerInfoShards_Node)
	if !ok {
		that2, ok := that.(ProtoMinerInfoShards_Node)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoMinerInfoShards_Shard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoMinerInfoShards_Shard)
	if !ok {
		that2, ok := that.(ProtoMinerInfoShards_Shard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Shardsize != that1.Shardsize {
		return false
	}
	if len(this.Shardnodes) != len(that1.Shardnodes) {
		return false
	}
	for i := range this.Shardnodes {
		if !this.Shardnodes[i].Equal(that1.Shardnodes[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoAccountBase) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoAccountBase)
	if !ok {
		that2, ok := that.(ProtoAccountBase)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !this.Balance.Equal(that1.Balance) {
		return false
	}
	if that1.Oneof3 == nil {
		if this.Oneof3 != nil {
			return false
		}
	} else if this.Oneof3 == nil {
		return false
	} else if !this.Oneof3.Equal(that1.Oneof3) {
		return false
	}
	if !bytes.Equal(this.Codehash, that1.Codehash) {
		return false
	}
	if !bytes.Equal(this.Storageroot, that1.Storageroot) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoAccountBase_Nonce) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoAccountBase_Nonce)
	if !ok {
		that2, ok := that.(ProtoAccountBase_Nonce)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	return true
}
func (this *ProtoAccount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoAccount)
	if !ok {
		that2, ok := that.(ProtoAccount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Base.Equal(that1.Base) {
		return false
	}
	if !bytes.Equal(this.Code, that1.Code) {
		return false
	}
	if len(this.Storage) != len(that1.Storage) {
		return false
	}
	for i := range this.Storage {
		if !this.Storage[i].Equal(that1.Storage[i]) {
			return false
		}
	}
	if this.Numbersign != that1.Numbersign {
		return false
	}
	if len(this.Storage2) != len(that1.Storage2) {
		return false
	}
	for i := range this.Storage2 {
		if !this.Storage2[i].Equal(that1.Storage2[i]) {
			return false
		}
	}
	if len(this.Todelete) != len(that1.Todelete) {
		return false
	}
	for i := range this.Todelete {
		if this.Todelete[i] != that1.Todelete[i] {
			return false
		}
	}
	if !bytes.Equal(this.Initdata, that1.Initdata) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoAccount_StorageData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoAccount_StorageData)
	if !ok {
		that2, ok := that.(ProtoAccount_StorageData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Keyhash, that1.Keyhash) {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoAccount_StorageData2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoAccount_StorageData2)
	if !ok {
		that2, ok := that.(ProtoAccount_StorageData2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoStateIndex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoStateIndex)
	if !ok {
		that2, ok := that.(ProtoStateIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Index) != len(that1.Index) {
		return false
	}
	for i := range this.Index {
		if !bytes.Equal(this.Index[i], that1.Index[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoStateData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoStateData)
	if !ok {
		that2, ok := that.(ProtoStateData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Vname != that1.Vname {
		return false
	}
	if this.Ismutable != that1.Ismutable {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoAccountStore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoAccountStore)
	if !ok {
		that2, ok := that.(ProtoAccountStore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Entries) != len(that1.Entries) {
		return false
	}
	for i := range this.Entries {
		if !this.Entries[i].Equal(that1.Entries[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoAccountStore_AddressAccount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoAccountStore_AddressAccount)
	if !ok {
		that2, ok := that.(ProtoAccountStore_AddressAccount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoPeer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoPeer)
	if !ok {
		that2, ok := that.(ProtoPeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipaddress.Equal(that1.Ipaddress) {
		return false
	}
	if that1.Oneof2 == nil {
		if this.Oneof2 != nil {
			return false
		}
	} else if this.Oneof2 == nil {
		return false
	} else if !this.Oneof2.Equal(that1.Oneof2) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoPeer_Listenporthost) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoPeer_Listenporthost)
	if !ok {
		that2, ok := that.(ProtoPeer_Listenporthost)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Listenporthost != that1.Listenporthost {
		return false
	}
	return true
}
func (this *ProtoPoWSolution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoPoWSolution)
	if !ok {
		that2, ok := that.(ProtoPoWSolution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if !bytes.Equal(this.Result, that1.Result) {
		return false
	}
	if !bytes.Equal(this.Mixhash, that1.Mixhash) {
		return false
	}
	if that1.Oneof4 == nil {
		if this.Oneof4 != nil {
			return false
		}
	} else if this.Oneof4 == nil {
		return false
	} else if !this.Oneof4.Equal(that1.Oneof4) {
		return false
	}
	if !this.Gasprice.Equal(that1.Gasprice) {
		return false
	}
	if !this.Govdata.Equal(that1.Govdata) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoPoWSolution_Lookupid) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoPoWSolution_Lookupid)
	if !ok {
		that2, ok := that.(ProtoPoWSolution_Lookupid)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Lookupid != that1.Lookupid {
		return false
	}
	return true
}
func (this *ProtoCommittee) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoCommittee)
	if !ok {
		that2, ok := that.(ProtoCommittee)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoShardingStructureWithPoWSolns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoShardingStructureWithPoWSolns)
	if !ok {
		that2, ok := that.(ProtoShardingStructureWithPoWSolns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Shards) != len(that1.Shards) {
		return false
	}
	for i := range this.Shards {
		if !this.Shards[i].Equal(that1.Shards[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoShardingStructureWithPoWSolns_Member) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoShardingStructureWithPoWSolns_Member)
	if !ok {
		that2, ok := that.(ProtoShardingStructureWithPoWSolns_Member)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Peerinfo.Equal(that1.Peerinfo) {
		return false
	}
	if that1.Oneof3 == nil {
		if this.Oneof3 != nil {
			return false
		}
	} else if this.Oneof3 == nil {
		return false
	} else if !this.Oneof3.Equal(that1.Oneof3) {
		return false
	}
	if !this.Powsoln.Equal(that1.Powsoln) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoShardingStructureWithPoWSolns_Member_Reputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoShardingStructureWithPoWSolns_Member_Reputation)
	if !ok {
		that2, ok := that.(ProtoShardingStructureWithPoWSolns_Member_Reputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Reputation != that1.Reputation {
		return false
	}
	return true
}
func (this *ProtoShardingStructureWithPoWSolns_Shard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoShardingStructureWithPoWSolns_Shard)
	if !ok {
		that2, ok := that.(ProtoShardingStructureWithPoWSolns_Shard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoDSWinnerPoW) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoDSWinnerPoW)
	if !ok {
		that2, ok := that.(ProtoDSWinnerPoW)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Powsoln.Equal(that1.Powsoln) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoTransactionCoreInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoTransactionCoreInfo)
	if !ok {
		that2, ok := that.(ProtoTransactionCoreInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if that1.Oneof2 == nil {
		if this.Oneof2 != nil {
			return false
		}
	} else if this.Oneof2 == nil {
		return false
	} else if !this.Oneof2.Equal(that1.Oneof2) {
		return false
	}
	if !bytes.Equal(this.Toaddr, that1.Toaddr) {
		return false
	}
	if !this.Senderpubkey.Equal(that1.Senderpubkey) {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	if !this.Gasprice.Equal(that1.Gasprice) {
		return false
	}
	if this.Gaslimit != that1.Gaslimit {
		return false
	}
	if that1.Oneof8 == nil {
		if this.Oneof8 != nil {
			return false
		}
	} else if this.Oneof8 == nil {
		return false
	} else if !this.Oneof8.Equal(that1.Oneof8) {
		return false
	}
	if that1.Oneof9 == nil {
		if this.Oneof9 != nil {
			return false
		}
	} else if this.Oneof9 == nil {
		return false
	} else if !this.Oneof9.Equal(that1.Oneof9) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoTransactionCoreInfo_Nonce) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoTransactionCoreInfo_Nonce)
	if !ok {
		that2, ok := that.(ProtoTransactionCoreInfo_Nonce)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	return true
}
func (this *ProtoTransactionCoreInfo_Code) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoTransactionCoreInfo_Code)
	if !ok {
		that2, ok := that.(ProtoTransactionCoreInfo_Code)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Code, that1.Code) {
		return false
	}
	return true
}
func (this *ProtoTransactionCoreInfo_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoTransactionCoreInfo_Data)
	if !ok {
		that2, ok := that.(ProtoTransactionCoreInfo_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *ProtoTransaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoTransaction)
	if !ok {
		that2, ok := that.(ProtoTransaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Tranid, that1.Tranid) {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoTxnFileOffset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoTxnFileOffset)
	if !ok {
		that2, ok := that.(ProtoTxnFileOffset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Offsetinfile) != len(that1.Offsetinfile) {
		return false
	}
	for i := range this.Offsetinfile {
		if this.Offsetinfile[i] != that1.Offsetinfile[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoTransactionArray) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoTransactionArray)
	if !ok {
		that2, ok := that.(ProtoTransactionArray)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Transactions) != len(that1.Transactions) {
		return false
	}
	for i := range this.Transactions {
		if !this.Transactions[i].Equal(that1.Transactions[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoTransactionReceipt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoTransactionReceipt)
	if !ok {
		that2, ok := that.(ProtoTransactionReceipt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Receipt, that1.Receipt) {
		return false
	}
	if that1.Oneof2 == nil {
		if this.Oneof2 != nil {
			return false
		}
	} else if this.Oneof2 == nil {
		return false
	} else if !this.Oneof2.Equal(that1.Oneof2) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoTransactionReceipt_Cumgas) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoTransactionReceipt_Cumgas)
	if !ok {
		that2, ok := that.(ProtoTransactionReceipt_Cumgas)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cumgas != that1.Cumgas {
		return false
	}
	return true
}
func (this *ProtoTransactionWithReceipt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoTransactionWithReceipt)
	if !ok {
		that2, ok := that.(ProtoTransactionWithReceipt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Transaction.Equal(that1.Transaction) {
		return false
	}
	if !this.Receipt.Equal(that1.Receipt) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoBloomFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoBloomFilter)
	if !ok {
		that2, ok := that.(ProtoBloomFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Salt) != len(that1.Salt) {
		return false
	}
	for i := range this.Salt {
		if this.Salt[i] != that1.Salt[i] {
			return false
		}
	}
	if !bytes.Equal(this.Bittable, that1.Bittable) {
		return false
	}
	if this.Saltcount != that1.Saltcount {
		return false
	}
	if this.Tablesize != that1.Tablesize {
		return false
	}
	if this.Projectedelementcount != that1.Projectedelementcount {
		return false
	}
	if this.Insertedelementcount != that1.Insertedelementcount {
		return false
	}
	if this.Randomseed != that1.Randomseed {
		return false
	}
	if this.Probability != that1.Probability {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoSWInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoSWInfo)
	if !ok {
		that2, ok := that.(ProtoSWInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Zilliqamajorversion != that1.Zilliqamajorversion {
		return false
	}
	if this.Zilliqaminorversion != that1.Zilliqaminorversion {
		return false
	}
	if this.Zilliqafixversion != that1.Zilliqafixversion {
		return false
	}
	if this.Zilliqaupgradeds != that1.Zilliqaupgradeds {
		return false
	}
	if this.Zilliqacommit != that1.Zilliqacommit {
		return false
	}
	if this.Scillamajorversion != that1.Scillamajorversion {
		return false
	}
	if this.Scillaminorversion != that1.Scillaminorversion {
		return false
	}
	if this.Scillafixversion != that1.Scillafixversion {
		return false
	}
	if this.Scillaupgradeds != that1.Scillaupgradeds {
		return false
	}
	if this.Scillacommit != that1.Scillacommit {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoFallbackBlockWShardingStructure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoFallbackBlockWShardingStructure)
	if !ok {
		that2, ok := that.(ProtoFallbackBlockWShardingStructure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fallbackblock.Equal(that1.Fallbackblock) {
		return false
	}
	if !this.Sharding.Equal(that1.Sharding) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoSingleDirectoryBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoSingleDirectoryBlock)
	if !ok {
		that2, ok := that.(ProtoSingleDirectoryBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Directoryblock == nil {
		if this.Directoryblock != nil {
			return false
		}
	} else if this.Directoryblock == nil {
		return false
	} else if !this.Directoryblock.Equal(that1.Directoryblock) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoSingleDirectoryBlock_Dsblock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoSingleDirectoryBlock_Dsblock)
	if !ok {
		that2, ok := that.(ProtoSingleDirectoryBlock_Dsblock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Dsblock.Equal(that1.Dsblock) {
		return false
	}
	return true
}
func (this *ProtoSingleDirectoryBlock_Vcblock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoSingleDirectoryBlock_Vcblock)
	if !ok {
		that2, ok := that.(ProtoSingleDirectoryBlock_Vcblock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vcblock.Equal(that1.Vcblock) {
		return false
	}
	return true
}
func (this *ProtoSingleDirectoryBlock_Fallbackblockwshard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoSingleDirectoryBlock_Fallbackblockwshard)
	if !ok {
		that2, ok := that.(ProtoSingleDirectoryBlock_Fallbackblockwshard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fallbackblockwshard.Equal(that1.Fallbackblockwshard) {
		return false
	}
	return true
}
func (this *PMHello) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PMHello)
	if !ok {
		that2, ok := that.(PMHello)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PMHello_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PMHello_Data)
	if !ok {
		that2, ok := that.(PMHello_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if this.Listenport != that1.Listenport {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GovernanceData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GovernanceData)
	if !ok {
		that2, ok := that.(GovernanceData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Proposalid != that1.Proposalid {
		return false
	}
	if this.Votevalue != that1.Votevalue {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DSPoWSubmission) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DSPoWSubmission)
	if !ok {
		that2, ok := that.(DSPoWSubmission)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DSPoWSubmission_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DSPoWSubmission_Data)
	if !ok {
		that2, ok := that.(DSPoWSubmission_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Blocknumber != that1.Blocknumber {
		return false
	}
	if this.Difficultylevel != that1.Difficultylevel {
		return false
	}
	if !this.Submitterpeer.Equal(that1.Submitterpeer) {
		return false
	}
	if !this.SubmitterpubKey.Equal(that1.SubmitterpubKey) {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Resultinghash != that1.Resultinghash {
		return false
	}
	if this.Mixhash != that1.Mixhash {
		return false
	}
	if this.Lookupid != that1.Lookupid {
		return false
	}
	if !this.Gasprice.Equal(that1.Gasprice) {
		return false
	}
	if !this.Govdata.Equal(that1.Govdata) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DSPoWPacketSubmission) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DSPoWPacketSubmission)
	if !ok {
		that2, ok := that.(DSPoWPacketSubmission)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DSPoWPacketSubmission_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DSPoWPacketSubmission_Data)
	if !ok {
		that2, ok := that.(DSPoWPacketSubmission_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DsPowSubmissions) != len(that1.DsPowSubmissions) {
		return false
	}
	for i := range this.DsPowSubmissions {
		if !this.DsPowSubmissions[i].Equal(that1.DsPowSubmissions[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DSMicroBlockSubmission) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DSMicroBlockSubmission)
	if !ok {
		that2, ok := that.(DSMicroBlockSubmission)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DSMicroBlockSubmission_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DSMicroBlockSubmission_Data)
	if !ok {
		that2, ok := that.(DSMicroBlockSubmission_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Microblocktype != that1.Microblocktype {
		return false
	}
	if this.Epochnumber != that1.Epochnumber {
		return false
	}
	if len(this.Microblocks) != len(that1.Microblocks) {
		return false
	}
	for i := range this.Microblocks {
		if !this.Microblocks[i].Equal(that1.Microblocks[i]) {
			return false
		}
	}
	if len(this.Statedeltas) != len(that1.Statedeltas) {
		return false
	}
	for i := range this.Statedeltas {
		if !bytes.Equal(this.Statedeltas[i], that1.Statedeltas[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DSDSBlockAnnouncement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DSDSBlockAnnouncement)
	if !ok {
		that2, ok := that.(DSDSBlockAnnouncement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Dsblock.Equal(that1.Dsblock) {
		return false
	}
	if !this.Sharding.Equal(that1.Sharding) {
		return false
	}
	if len(this.Dswinnerpows) != len(that1.Dswinnerpows) {
		return false
	}
	for i := range this.Dswinnerpows {
		if !this.Dswinnerpows[i].Equal(that1.Dswinnerpows[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DSFinalBlockAnnouncement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DSFinalBlockAnnouncement)
	if !ok {
		that2, ok := that.(DSFinalBlockAnnouncement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Txblock.Equal(that1.Txblock) {
		return false
	}
	if !this.Microblock.Equal(that1.Microblock) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DSVCBlockAnnouncement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DSVCBlockAnnouncement)
	if !ok {
		that2, ok := that.(DSVCBlockAnnouncement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vcblock.Equal(that1.Vcblock) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DSMissingMicroBlocksErrorMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DSMissingMicroBlocksErrorMsg)
	if !ok {
		that2, ok := that.(DSMissingMicroBlocksErrorMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Mbhashes) != len(that1.Mbhashes) {
		return false
	}
	for i := range this.Mbhashes {
		if !bytes.Equal(this.Mbhashes[i], that1.Mbhashes[i]) {
			return false
		}
	}
	if this.Epochnum != that1.Epochnum {
		return false
	}
	if this.Listenport != that1.Listenport {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeDSBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeDSBlock)
	if !ok {
		that2, ok := that.(NodeDSBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Shardid != that1.Shardid {
		return false
	}
	if !this.Dsblock.Equal(that1.Dsblock) {
		return false
	}
	if len(this.Vcblocks) != len(that1.Vcblocks) {
		return false
	}
	for i := range this.Vcblocks {
		if !this.Vcblocks[i].Equal(that1.Vcblocks[i]) {
			return false
		}
	}
	if !this.Sharding.Equal(that1.Sharding) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeFinalBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeFinalBlock)
	if !ok {
		that2, ok := that.(NodeFinalBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Dsblocknumber != that1.Dsblocknumber {
		return false
	}
	if this.Consensusid != that1.Consensusid {
		return false
	}
	if !this.Txblock.Equal(that1.Txblock) {
		return false
	}
	if !bytes.Equal(this.Statedelta, that1.Statedelta) {
		return false
	}
	if len(this.Shardids) != len(that1.Shardids) {
		return false
	}
	for i := range this.Shardids {
		if this.Shardids[i] != that1.Shardids[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeVCFinalBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeVCFinalBlock)
	if !ok {
		that2, ok := that.(NodeVCFinalBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Dsblocknumber != that1.Dsblocknumber {
		return false
	}
	if this.Consensusid != that1.Consensusid {
		return false
	}
	if !this.Txblock.Equal(that1.Txblock) {
		return false
	}
	if !bytes.Equal(this.Statedelta, that1.Statedelta) {
		return false
	}
	if len(this.Vcblocks) != len(that1.Vcblocks) {
		return false
	}
	for i := range this.Vcblocks {
		if !this.Vcblocks[i].Equal(that1.Vcblocks[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeMBnForwardTransaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeMBnForwardTransaction)
	if !ok {
		that2, ok := that.(NodeMBnForwardTransaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Microblock.Equal(that1.Microblock) {
		return false
	}
	if len(this.Txnswithreceipt) != len(that1.Txnswithreceipt) {
		return false
	}
	for i := range this.Txnswithreceipt {
		if !this.Txnswithreceipt[i].Equal(that1.Txnswithreceipt[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodePendingTxn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodePendingTxn)
	if !ok {
		that2, ok := that.(NodePendingTxn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodePendingTxn_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodePendingTxn_Data)
	if !ok {
		that2, ok := that.(NodePendingTxn_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Hashcodepair) != len(that1.Hashcodepair) {
		return false
	}
	for i := range this.Hashcodepair {
		if !this.Hashcodepair[i].Equal(that1.Hashcodepair[i]) {
			return false
		}
	}
	if this.Epochnumber != that1.Epochnumber {
		return false
	}
	if this.Shardid != that1.Shardid {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodePendingTxn_Data_Pair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodePendingTxn_Data_Pair)
	if !ok {
		that2, ok := that.(NodePendingTxn_Data_Pair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Txnhash, that1.Txnhash) {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeVCBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeVCBlock)
	if !ok {
		that2, ok := that.(NodeVCBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vcblock.Equal(that1.Vcblock) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeForwardTxnBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeForwardTxnBlock)
	if !ok {
		that2, ok := that.(NodeForwardTxnBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Epochnumber != that1.Epochnumber {
		return false
	}
	if this.Dsblocknum != that1.Dsblocknum {
		return false
	}
	if this.Shardid != that1.Shardid {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if len(this.Transactions) != len(that1.Transactions) {
		return false
	}
	for i := range this.Transactions {
		if !this.Transactions[i].Equal(that1.Transactions[i]) {
			return false
		}
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeMicroBlockAnnouncement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeMicroBlockAnnouncement)
	if !ok {
		that2, ok := that.(NodeMicroBlockAnnouncement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Microblock.Equal(that1.Microblock) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeFallbackBlockAnnouncement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeFallbackBlockAnnouncement)
	if !ok {
		that2, ok := that.(NodeFallbackBlockAnnouncement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fallbackblock.Equal(that1.Fallbackblock) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeFallbackBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeFallbackBlock)
	if !ok {
		that2, ok := that.(NodeFallbackBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fallbackblock.Equal(that1.Fallbackblock) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeMissingTxnsErrorMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeMissingTxnsErrorMsg)
	if !ok {
		that2, ok := that.(NodeMissingTxnsErrorMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Txnhashes) != len(that1.Txnhashes) {
		return false
	}
	for i := range this.Txnhashes {
		if !bytes.Equal(this.Txnhashes[i], that1.Txnhashes[i]) {
			return false
		}
	}
	if this.Epochnum != that1.Epochnum {
		return false
	}
	if this.Listenport != that1.Listenport {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetSeedPeers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetSeedPeers)
	if !ok {
		that2, ok := that.(LookupGetSeedPeers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Listenport != that1.Listenport {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetSeedPeers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetSeedPeers)
	if !ok {
		that2, ok := that.(LookupSetSeedPeers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Candidateseeds) != len(that1.Candidateseeds) {
		return false
	}
	for i := range this.Candidateseeds {
		if !this.Candidateseeds[i].Equal(that1.Candidateseeds[i]) {
			return false
		}
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetDSInfoFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetDSInfoFromSeed)
	if !ok {
		that2, ok := that.(LookupGetDSInfoFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Listenport != that1.Listenport {
		return false
	}
	if this.Initialds != that1.Initialds {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetDSInfoFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetDSInfoFromSeed)
	if !ok {
		that2, ok := that.(LookupSetDSInfoFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Dscommittee.Equal(that1.Dscommittee) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if this.Initialds != that1.Initialds {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetDSBlockFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetDSBlockFromSeed)
	if !ok {
		that2, ok := that.(LookupGetDSBlockFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Lowblocknum != that1.Lowblocknum {
		return false
	}
	if this.Highblocknum != that1.Highblocknum {
		return false
	}
	if this.Listenport != that1.Listenport {
		return false
	}
	if this.Includeminerinfo != that1.Includeminerinfo {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetDSBlockFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetDSBlockFromSeed)
	if !ok {
		that2, ok := that.(LookupSetDSBlockFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetDSBlockFromSeed_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetDSBlockFromSeed_Data)
	if !ok {
		that2, ok := that.(LookupSetDSBlockFromSeed_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Lowblocknum != that1.Lowblocknum {
		return false
	}
	if this.Highblocknum != that1.Highblocknum {
		return false
	}
	if len(this.Dsblocks) != len(that1.Dsblocks) {
		return false
	}
	for i := range this.Dsblocks {
		if !this.Dsblocks[i].Equal(that1.Dsblocks[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetMinerInfoFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetMinerInfoFromSeed)
	if !ok {
		that2, ok := that.(LookupSetMinerInfoFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetMinerInfoFromSeed_MinerInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetMinerInfoFromSeed_MinerInfo)
	if !ok {
		that2, ok := that.(LookupSetMinerInfoFromSeed_MinerInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Minerinfodscomm.Equal(that1.Minerinfodscomm) {
		return false
	}
	if !this.Minerinfoshards.Equal(that1.Minerinfoshards) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetMinerInfoFromSeed_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetMinerInfoFromSeed_Data)
	if !ok {
		that2, ok := that.(LookupSetMinerInfoFromSeed_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Minerinfoperds) != len(that1.Minerinfoperds) {
		return false
	}
	for i := range this.Minerinfoperds {
		if !this.Minerinfoperds[i].Equal(that1.Minerinfoperds[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetTxBlockFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetTxBlockFromSeed)
	if !ok {
		that2, ok := that.(LookupGetTxBlockFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Lowblocknum != that1.Lowblocknum {
		return false
	}
	if this.Highblocknum != that1.Highblocknum {
		return false
	}
	if this.Listenport != that1.Listenport {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetTxBlockFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetTxBlockFromSeed)
	if !ok {
		that2, ok := that.(LookupSetTxBlockFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetTxBlockFromSeed_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetTxBlockFromSeed_Data)
	if !ok {
		that2, ok := that.(LookupSetTxBlockFromSeed_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Lowblocknum != that1.Lowblocknum {
		return false
	}
	if this.Highblocknum != that1.Highblocknum {
		return false
	}
	if len(this.Txblocks) != len(that1.Txblocks) {
		return false
	}
	for i := range this.Txblocks {
		if !this.Txblocks[i].Equal(that1.Txblocks[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetStateDeltaFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetStateDeltaFromSeed)
	if !ok {
		that2, ok := that.(LookupGetStateDeltaFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Blocknum != that1.Blocknum {
		return false
	}
	if this.Listenport != that1.Listenport {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetStateDeltasFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetStateDeltasFromSeed)
	if !ok {
		that2, ok := that.(LookupGetStateDeltasFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Lowblocknum != that1.Lowblocknum {
		return false
	}
	if this.Highblocknum != that1.Highblocknum {
		return false
	}
	if this.Listenport != that1.Listenport {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetStateDeltaFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetStateDeltaFromSeed)
	if !ok {
		that2, ok := that.(LookupSetStateDeltaFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetStateDeltaFromSeed_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetStateDeltaFromSeed_Data)
	if !ok {
		that2, ok := that.(LookupSetStateDeltaFromSeed_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Blocknum != that1.Blocknum {
		return false
	}
	if !bytes.Equal(this.Statedelta, that1.Statedelta) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetStateDeltasFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetStateDeltasFromSeed)
	if !ok {
		that2, ok := that.(LookupSetStateDeltasFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetStateDeltasFromSeed_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetStateDeltasFromSeed_Data)
	if !ok {
		that2, ok := that.(LookupSetStateDeltasFromSeed_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Lowblocknum != that1.Lowblocknum {
		return false
	}
	if this.Highblocknum != that1.Highblocknum {
		return false
	}
	if len(this.Statedeltas) != len(that1.Statedeltas) {
		return false
	}
	for i := range this.Statedeltas {
		if !bytes.Equal(this.Statedeltas[i], that1.Statedeltas[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetStateFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetStateFromSeed)
	if !ok {
		that2, ok := that.(LookupGetStateFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Listenport != that1.Listenport {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetStateFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetStateFromSeed)
	if !ok {
		that2, ok := that.(LookupSetStateFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Accountstore.Equal(that1.Accountstore) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetLookupOffline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetLookupOffline)
	if !ok {
		that2, ok := that.(LookupSetLookupOffline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetLookupOffline_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetLookupOffline_Data)
	if !ok {
		that2, ok := that.(LookupSetLookupOffline_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Msgtype != that1.Msgtype {
		return false
	}
	if this.Listenport != that1.Listenport {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetLookupOnline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetLookupOnline)
	if !ok {
		that2, ok := that.(LookupSetLookupOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetLookupOnline_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetLookupOnline_Data)
	if !ok {
		that2, ok := that.(LookupSetLookupOnline_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Msgtype != that1.Msgtype {
		return false
	}
	if this.Listenport != that1.Listenport {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetOfflineLookups) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetOfflineLookups)
	if !ok {
		that2, ok := that.(LookupGetOfflineLookups)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Listenport != that1.Listenport {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetOfflineLookups) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetOfflineLookups)
	if !ok {
		that2, ok := that.(LookupSetOfflineLookups)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupRaiseStartPoW) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupRaiseStartPoW)
	if !ok {
		that2, ok := that.(LookupRaiseStartPoW)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupRaiseStartPoW_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupRaiseStartPoW_Data)
	if !ok {
		that2, ok := that.(LookupRaiseStartPoW_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Msgtype != that1.Msgtype {
		return false
	}
	if this.Blocknumber != that1.Blocknumber {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetStartPoWFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetStartPoWFromSeed)
	if !ok {
		that2, ok := that.(LookupGetStartPoWFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetStartPoWFromSeed_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetStartPoWFromSeed_Data)
	if !ok {
		that2, ok := that.(LookupGetStartPoWFromSeed_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Listenport != that1.Listenport {
		return false
	}
	if this.Blocknumber != that1.Blocknumber {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetStartPoWFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetStartPoWFromSeed)
	if !ok {
		that2, ok := that.(LookupSetStartPoWFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Blocknumber != that1.Blocknumber {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetShardsFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetShardsFromSeed)
	if !ok {
		that2, ok := that.(LookupGetShardsFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Listenport != that1.Listenport {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetShardsFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetShardsFromSeed)
	if !ok {
		that2, ok := that.(LookupSetShardsFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sharding.Equal(that1.Sharding) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetMicroBlockFromLookup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetMicroBlockFromLookup)
	if !ok {
		that2, ok := that.(LookupGetMicroBlockFromLookup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Portno != that1.Portno {
		return false
	}
	if len(this.Mbhashes) != len(that1.Mbhashes) {
		return false
	}
	for i := range this.Mbhashes {
		if !bytes.Equal(this.Mbhashes[i], that1.Mbhashes[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetMicroBlockFromLookup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetMicroBlockFromLookup)
	if !ok {
		that2, ok := that.(LookupSetMicroBlockFromLookup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Microblocks) != len(that1.Microblocks) {
		return false
	}
	for i := range this.Microblocks {
		if !this.Microblocks[i].Equal(that1.Microblocks[i]) {
			return false
		}
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetMicroBlockFromL2L) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetMicroBlockFromL2L)
	if !ok {
		that2, ok := that.(LookupGetMicroBlockFromL2L)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetMicroBlockFromL2L_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetMicroBlockFromL2L_Data)
	if !ok {
		that2, ok := that.(LookupGetMicroBlockFromL2L_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Portno != that1.Portno {
		return false
	}
	if len(this.Mbhashes) != len(that1.Mbhashes) {
		return false
	}
	for i := range this.Mbhashes {
		if !bytes.Equal(this.Mbhashes[i], that1.Mbhashes[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupForwardTxnsFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupForwardTxnsFromSeed)
	if !ok {
		that2, ok := that.(LookupForwardTxnsFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Shardtransactions.Equal(that1.Shardtransactions) {
		return false
	}
	if !this.Dstransactions.Equal(that1.Dstransactions) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetTxnsFromLookup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetTxnsFromLookup)
	if !ok {
		that2, ok := that.(LookupGetTxnsFromLookup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Portno != that1.Portno {
		return false
	}
	if !bytes.Equal(this.Mbhash, that1.Mbhash) {
		return false
	}
	if len(this.Txnhashes) != len(that1.Txnhashes) {
		return false
	}
	for i := range this.Txnhashes {
		if !bytes.Equal(this.Txnhashes[i], that1.Txnhashes[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetTxnsFromL2L) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetTxnsFromL2L)
	if !ok {
		that2, ok := that.(LookupGetTxnsFromL2L)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetTxnsFromL2L_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetTxnsFromL2L_Data)
	if !ok {
		that2, ok := that.(LookupGetTxnsFromL2L_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Portno != that1.Portno {
		return false
	}
	if !bytes.Equal(this.Mbhash, that1.Mbhash) {
		return false
	}
	if len(this.Txnhashes) != len(that1.Txnhashes) {
		return false
	}
	for i := range this.Txnhashes {
		if !bytes.Equal(this.Txnhashes[i], that1.Txnhashes[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetTxnsFromLookup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetTxnsFromLookup)
	if !ok {
		that2, ok := that.(LookupSetTxnsFromLookup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Mbhash, that1.Mbhash) {
		return false
	}
	if len(this.Transactions) != len(that1.Transactions) {
		return false
	}
	for i := range this.Transactions {
		if !this.Transactions[i].Equal(that1.Transactions[i]) {
			return false
		}
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetDirectoryBlocksFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetDirectoryBlocksFromSeed)
	if !ok {
		that2, ok := that.(LookupGetDirectoryBlocksFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Portno != that1.Portno {
		return false
	}
	if this.Indexnum != that1.Indexnum {
		return false
	}
	if this.Includeminerinfo != that1.Includeminerinfo {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetDirectoryBlocksFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetDirectoryBlocksFromSeed)
	if !ok {
		that2, ok := that.(LookupSetDirectoryBlocksFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetDirectoryBlocksFromSeed_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetDirectoryBlocksFromSeed_Data)
	if !ok {
		that2, ok := that.(LookupSetDirectoryBlocksFromSeed_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Indexnum != that1.Indexnum {
		return false
	}
	if len(this.Dirblocks) != len(that1.Dirblocks) {
		return false
	}
	for i := range this.Dirblocks {
		if !this.Dirblocks[i].Equal(that1.Dirblocks[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConsensusAnnouncement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusAnnouncement)
	if !ok {
		that2, ok := that.(ConsensusAnnouncement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Consensusinfo.Equal(that1.Consensusinfo) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if that1.Announcement == nil {
		if this.Announcement != nil {
			return false
		}
	} else if this.Announcement == nil {
		return false
	} else if !this.Announcement.Equal(that1.Announcement) {
		return false
	}
	if !this.Finalsignature.Equal(that1.Finalsignature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConsensusAnnouncement_Dsblock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusAnnouncement_Dsblock)
	if !ok {
		that2, ok := that.(ConsensusAnnouncement_Dsblock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Dsblock.Equal(that1.Dsblock) {
		return false
	}
	return true
}
func (this *ConsensusAnnouncement_Microblock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusAnnouncement_Microblock)
	if !ok {
		that2, ok := that.(ConsensusAnnouncement_Microblock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Microblock.Equal(that1.Microblock) {
		return false
	}
	return true
}
func (this *ConsensusAnnouncement_Finalblock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusAnnouncement_Finalblock)
	if !ok {
		that2, ok := that.(ConsensusAnnouncement_Finalblock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Finalblock.Equal(that1.Finalblock) {
		return false
	}
	return true
}
func (this *ConsensusAnnouncement_Vcblock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusAnnouncement_Vcblock)
	if !ok {
		that2, ok := that.(ConsensusAnnouncement_Vcblock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vcblock.Equal(that1.Vcblock) {
		return false
	}
	return true
}
func (this *ConsensusAnnouncement_Fallbackblock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusAnnouncement_Fallbackblock)
	if !ok {
		that2, ok := that.(ConsensusAnnouncement_Fallbackblock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fallbackblock.Equal(that1.Fallbackblock) {
		return false
	}
	return true
}
func (this *ConsensusAnnouncement_ConsensusInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusAnnouncement_ConsensusInfo)
	if !ok {
		that2, ok := that.(ConsensusAnnouncement_ConsensusInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Consensusid != that1.Consensusid {
		return false
	}
	if this.Blocknumber != that1.Blocknumber {
		return false
	}
	if !bytes.Equal(this.Blockhash, that1.Blockhash) {
		return false
	}
	if this.Leaderid != that1.Leaderid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConsensusCommit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusCommit)
	if !ok {
		that2, ok := that.(ConsensusCommit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Consensusinfo.Equal(that1.Consensusinfo) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConsensusCommit_ConsensusInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusCommit_ConsensusInfo)
	if !ok {
		that2, ok := that.(ConsensusCommit_ConsensusInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Consensusid != that1.Consensusid {
		return false
	}
	if this.Blocknumber != that1.Blocknumber {
		return false
	}
	if !bytes.Equal(this.Blockhash, that1.Blockhash) {
		return false
	}
	if this.Backupid != that1.Backupid {
		return false
	}
	if !this.Commitpoint.Equal(that1.Commitpoint) {
		return false
	}
	if !this.Commitpointhash.Equal(that1.Commitpointhash) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConsensusChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusChallenge)
	if !ok {
		that2, ok := that.(ConsensusChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Consensusinfo.Equal(that1.Consensusinfo) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConsensusChallenge_SubsetInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusChallenge_SubsetInfo)
	if !ok {
		that2, ok := that.(ConsensusChallenge_SubsetInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aggregatedcommit.Equal(that1.Aggregatedcommit) {
		return false
	}
	if !this.Aggregatedkey.Equal(that1.Aggregatedkey) {
		return false
	}
	if !this.Challenge.Equal(that1.Challenge) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConsensusChallenge_ConsensusInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusChallenge_ConsensusInfo)
	if !ok {
		that2, ok := that.(ConsensusChallenge_ConsensusInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Consensusid != that1.Consensusid {
		return false
	}
	if this.Blocknumber != that1.Blocknumber {
		return false
	}
	if !bytes.Equal(this.Blockhash, that1.Blockhash) {
		return false
	}
	if this.Leaderid != that1.Leaderid {
		return false
	}
	if len(this.Subsetinfo) != len(that1.Subsetinfo) {
		return false
	}
	for i := range this.Subsetinfo {
		if !this.Subsetinfo[i].Equal(that1.Subsetinfo[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConsensusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusResponse)
	if !ok {
		that2, ok := that.(ConsensusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Consensusinfo.Equal(that1.Consensusinfo) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConsensusResponse_SubsetInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusResponse_SubsetInfo)
	if !ok {
		that2, ok := that.(ConsensusResponse_SubsetInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Response.Equal(that1.Response) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConsensusResponse_ConsensusInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusResponse_ConsensusInfo)
	if !ok {
		that2, ok := that.(ConsensusResponse_ConsensusInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Consensusid != that1.Consensusid {
		return false
	}
	if this.Blocknumber != that1.Blocknumber {
		return false
	}
	if !bytes.Equal(this.Blockhash, that1.Blockhash) {
		return false
	}
	if this.Backupid != that1.Backupid {
		return false
	}
	if len(this.Subsetinfo) != len(that1.Subsetinfo) {
		return false
	}
	for i := range this.Subsetinfo {
		if !this.Subsetinfo[i].Equal(that1.Subsetinfo[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConsensusCollectiveSig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusCollectiveSig)
	if !ok {
		that2, ok := that.(ConsensusCollectiveSig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Consensusinfo.Equal(that1.Consensusinfo) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConsensusCollectiveSig_ConsensusInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusCollectiveSig_ConsensusInfo)
	if !ok {
		that2, ok := that.(ConsensusCollectiveSig_ConsensusInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Consensusid != that1.Consensusid {
		return false
	}
	if this.Blocknumber != that1.Blocknumber {
		return false
	}
	if !bytes.Equal(this.Blockhash, that1.Blockhash) {
		return false
	}
	if this.Leaderid != that1.Leaderid {
		return false
	}
	if !this.Collectivesig.Equal(that1.Collectivesig) {
		return false
	}
	if len(this.Bitmap) != len(that1.Bitmap) {
		return false
	}
	for i := range this.Bitmap {
		if this.Bitmap[i] != that1.Bitmap[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConsensusCommitFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusCommitFailure)
	if !ok {
		that2, ok := that.(ConsensusCommitFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Consensusinfo.Equal(that1.Consensusinfo) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConsensusCommitFailure_ConsensusInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusCommitFailure_ConsensusInfo)
	if !ok {
		that2, ok := that.(ConsensusCommitFailure_ConsensusInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Consensusid != that1.Consensusid {
		return false
	}
	if this.Blocknumber != that1.Blocknumber {
		return false
	}
	if !bytes.Equal(this.Blockhash, that1.Blockhash) {
		return false
	}
	if this.Backupid != that1.Backupid {
		return false
	}
	if !bytes.Equal(this.Errormsg, that1.Errormsg) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConsensusConsensusFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusConsensusFailure)
	if !ok {
		that2, ok := that.(ConsensusConsensusFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Consensusinfo.Equal(that1.Consensusinfo) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConsensusConsensusFailure_ConsensusInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusConsensusFailure_ConsensusInfo)
	if !ok {
		that2, ok := that.(ConsensusConsensusFailure_ConsensusInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Consensusid != that1.Consensusid {
		return false
	}
	if this.Blocknumber != that1.Blocknumber {
		return false
	}
	if !bytes.Equal(this.Blockhash, that1.Blockhash) {
		return false
	}
	if this.Leaderid != that1.Leaderid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetDSTxBlockFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetDSTxBlockFromSeed)
	if !ok {
		that2, ok := that.(LookupGetDSTxBlockFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Dslowblocknum != that1.Dslowblocknum {
		return false
	}
	if this.Dshighblocknum != that1.Dshighblocknum {
		return false
	}
	if this.Txlowblocknum != that1.Txlowblocknum {
		return false
	}
	if this.Txhighblocknum != that1.Txhighblocknum {
		return false
	}
	if this.Listenport != that1.Listenport {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VCNodeSetDSTxBlockFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VCNodeSetDSTxBlockFromSeed)
	if !ok {
		that2, ok := that.(VCNodeSetDSTxBlockFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VCNodeSetDSTxBlockFromSeed_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VCNodeSetDSTxBlockFromSeed_Data)
	if !ok {
		that2, ok := that.(VCNodeSetDSTxBlockFromSeed_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Dsblocks) != len(that1.Dsblocks) {
		return false
	}
	for i := range this.Dsblocks {
		if !this.Dsblocks[i].Equal(that1.Dsblocks[i]) {
			return false
		}
	}
	if len(this.Txblocks) != len(that1.Txblocks) {
		return false
	}
	for i := range this.Txblocks {
		if !this.Txblocks[i].Equal(that1.Txblocks[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeSetShardNodeNetworkInfoUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeSetShardNodeNetworkInfoUpdate)
	if !ok {
		that2, ok := that.(NodeSetShardNodeNetworkInfoUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeSetShardNodeNetworkInfoUpdate_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeSetShardNodeNetworkInfoUpdate_Data)
	if !ok {
		that2, ok := that.(NodeSetShardNodeNetworkInfoUpdate_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Dsepochnumber != that1.Dsepochnumber {
		return false
	}
	if !this.Shardnodepubkey.Equal(that1.Shardnodepubkey) {
		return false
	}
	if !this.Shardnodenewnetworkinfo.Equal(that1.Shardnodenewnetworkinfo) {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DSLookupSetDSGuardNetworkInfoUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DSLookupSetDSGuardNetworkInfoUpdate)
	if !ok {
		that2, ok := that.(DSLookupSetDSGuardNetworkInfoUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DSLookupSetDSGuardNetworkInfoUpdate_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DSLookupSetDSGuardNetworkInfoUpdate_Data)
	if !ok {
		that2, ok := that.(DSLookupSetDSGuardNetworkInfoUpdate_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Dsepochnumber != that1.Dsepochnumber {
		return false
	}
	if !this.Dsguardpubkey.Equal(that1.Dsguardpubkey) {
		return false
	}
	if !this.Dsguardnewnetworkinfo.Equal(that1.Dsguardnewnetworkinfo) {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeGetGuardNodeNetworkInfoUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeGetGuardNodeNetworkInfoUpdate)
	if !ok {
		that2, ok := that.(NodeGetGuardNodeNetworkInfoUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeGetGuardNodeNetworkInfoUpdate_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeGetGuardNodeNetworkInfoUpdate_Data)
	if !ok {
		that2, ok := that.(NodeGetGuardNodeNetworkInfoUpdate_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Portno != that1.Portno {
		return false
	}
	if this.Dsepochnumber != that1.Dsepochnumber {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoDSGuardUpdateStruct) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoDSGuardUpdateStruct)
	if !ok {
		that2, ok := that.(ProtoDSGuardUpdateStruct)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Dsguardpubkey.Equal(that1.Dsguardpubkey) {
		return false
	}
	if !this.Dsguardnewnetworkinfo.Equal(that1.Dsguardnewnetworkinfo) {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeSetGuardNodeNetworkInfoUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeSetGuardNodeNetworkInfoUpdate)
	if !ok {
		that2, ok := that.(NodeSetGuardNodeNetworkInfoUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Lookuppubkey.Equal(that1.Lookuppubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeSetGuardNodeNetworkInfoUpdate_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeSetGuardNodeNetworkInfoUpdate_Data)
	if !ok {
		that2, ok := that.(NodeSetGuardNodeNetworkInfoUpdate_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Dsguardupdatestruct) != len(that1.Dsguardupdatestruct) {
		return false
	}
	for i := range this.Dsguardupdatestruct {
		if !this.Dsguardupdatestruct[i].Equal(that1.Dsguardupdatestruct[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SeedSetHistoricalDB) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SeedSetHistoricalDB)
	if !ok {
		that2, ok := that.(SeedSetHistoricalDB)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SeedSetHistoricalDB_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SeedSetHistoricalDB_Data)
	if !ok {
		that2, ok := that.(SeedSetHistoricalDB_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeRemoveFromBlacklist) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeRemoveFromBlacklist)
	if !ok {
		that2, ok := that.(NodeRemoveFromBlacklist)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeRemoveFromBlacklist_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeRemoveFromBlacklist_Data)
	if !ok {
		that2, ok := that.(NodeRemoveFromBlacklist_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpAddress.Equal(that1.IpAddress) {
		return false
	}
	if this.Dsepochnumber != that1.Dsepochnumber {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProtoCosigsRewardsStructure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoCosigsRewardsStructure)
	if !ok {
		that2, ok := that.(ProtoCosigsRewardsStructure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Epochnumber != that1.Epochnumber {
		return false
	}
	if this.Shardid != that1.Shardid {
		return false
	}
	if !this.Blockbase.Equal(that1.Blockbase) {
		return false
	}
	if !this.Rewards.Equal(that1.Rewards) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetCosigsRewardsFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetCosigsRewardsFromSeed)
	if !ok {
		that2, ok := that.(LookupGetCosigsRewardsFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetCosigsRewardsFromSeed_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetCosigsRewardsFromSeed_Data)
	if !ok {
		that2, ok := that.(LookupGetCosigsRewardsFromSeed_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Portno != that1.Portno {
		return false
	}
	if this.Epochnumber != that1.Epochnumber {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetCosigsRewardsFromSeed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetCosigsRewardsFromSeed)
	if !ok {
		that2, ok := that.(LookupSetCosigsRewardsFromSeed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupSetCosigsRewardsFromSeed_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupSetCosigsRewardsFromSeed_Data)
	if !ok {
		that2, ok := that.(LookupSetCosigsRewardsFromSeed_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Cosigsrewards) != len(that1.Cosigsrewards) {
		return false
	}
	for i := range this.Cosigsrewards {
		if !this.Cosigsrewards[i].Equal(that1.Cosigsrewards[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetVCFinalBlockFromL2L) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetVCFinalBlockFromL2L)
	if !ok {
		that2, ok := that.(LookupGetVCFinalBlockFromL2L)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetVCFinalBlockFromL2L_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetVCFinalBlockFromL2L_Data)
	if !ok {
		that2, ok := that.(LookupGetVCFinalBlockFromL2L_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Blocknum != that1.Blocknum {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetDSBlockFromL2L) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetDSBlockFromL2L)
	if !ok {
		that2, ok := that.(LookupGetDSBlockFromL2L)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetDSBlockFromL2L_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetDSBlockFromL2L_Data)
	if !ok {
		that2, ok := that.(LookupGetDSBlockFromL2L_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Blocknum != that1.Blocknum {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetMBnForwardTxnFromL2L) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetMBnForwardTxnFromL2L)
	if !ok {
		that2, ok := that.(LookupGetMBnForwardTxnFromL2L)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetMBnForwardTxnFromL2L_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetMBnForwardTxnFromL2L_Data)
	if !ok {
		that2, ok := that.(LookupGetMBnForwardTxnFromL2L_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Blocknum != that1.Blocknum {
		return false
	}
	if this.ShardId != that1.ShardId {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetPendingTxnFromL2L) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetPendingTxnFromL2L)
	if !ok {
		that2, ok := that.(LookupGetPendingTxnFromL2L)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LookupGetPendingTxnFromL2L_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupGetPendingTxnFromL2L_Data)
	if !ok {
		that2, ok := that.(LookupGetPendingTxnFromL2L_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Blocknum != that1.Blocknum {
		return false
	}
	if this.ShardId != that1.ShardId {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ByteArray) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.ByteArray{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoBlockLink) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ZilliqaMessage.ProtoBlockLink{")
	if this.Oneof1 != nil {
		s = append(s, "Oneof1: "+fmt.Sprintf("%#v", this.Oneof1)+",\n")
	}
	if this.Oneof2 != nil {
		s = append(s, "Oneof2: "+fmt.Sprintf("%#v", this.Oneof2)+",\n")
	}
	if this.Oneof3 != nil {
		s = append(s, "Oneof3: "+fmt.Sprintf("%#v", this.Oneof3)+",\n")
	}
	if this.Oneof4 != nil {
		s = append(s, "Oneof4: "+fmt.Sprintf("%#v", this.Oneof4)+",\n")
	}
	s = append(s, "Blockhash: "+fmt.Sprintf("%#v", this.Blockhash)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoBlockLink_Version) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoBlockLink_Version{` +
		`Version:` + fmt.Sprintf("%#v", this.Version) + `}`}, ", ")
	return s
}
func (this *ProtoBlockLink_Index) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoBlockLink_Index{` +
		`Index:` + fmt.Sprintf("%#v", this.Index) + `}`}, ", ")
	return s
}
func (this *ProtoBlockLink_Dsindex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoBlockLink_Dsindex{` +
		`Dsindex:` + fmt.Sprintf("%#v", this.Dsindex) + `}`}, ", ")
	return s
}
func (this *ProtoBlockLink_Blocktype) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoBlockLink_Blocktype{` +
		`Blocktype:` + fmt.Sprintf("%#v", this.Blocktype) + `}`}, ", ")
	return s
}
func (this *ProtoBlockBase) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ProtoBlockBase{")
	s = append(s, "Blockhash: "+fmt.Sprintf("%#v", this.Blockhash)+",\n")
	if this.Cosigs != nil {
		s = append(s, "Cosigs: "+fmt.Sprintf("%#v", this.Cosigs)+",\n")
	}
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoBlockBase_CoSignatures) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ZilliqaMessage.ProtoBlockBase_CoSignatures{")
	if this.Cs1 != nil {
		s = append(s, "Cs1: "+fmt.Sprintf("%#v", this.Cs1)+",\n")
	}
	s = append(s, "B1: "+fmt.Sprintf("%#v", this.B1)+",\n")
	if this.Cs2 != nil {
		s = append(s, "Cs2: "+fmt.Sprintf("%#v", this.Cs2)+",\n")
	}
	s = append(s, "B2: "+fmt.Sprintf("%#v", this.B2)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoBlockHeaderBase) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ProtoBlockHeaderBase{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Committeehash: "+fmt.Sprintf("%#v", this.Committeehash)+",\n")
	s = append(s, "Prevhash: "+fmt.Sprintf("%#v", this.Prevhash)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoDSBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoDSBlock{")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	if this.Blockbase != nil {
		s = append(s, "Blockbase: "+fmt.Sprintf("%#v", this.Blockbase)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoDSBlock_DSBlockHashSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoDSBlock_DSBlockHashSet{")
	s = append(s, "Shardinghash: "+fmt.Sprintf("%#v", this.Shardinghash)+",\n")
	s = append(s, "Reservedfield: "+fmt.Sprintf("%#v", this.Reservedfield)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoDSBlock_DSBlockHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&ZilliqaMessage.ProtoDSBlock_DSBlockHeader{")
	if this.Blockheaderbase != nil {
		s = append(s, "Blockheaderbase: "+fmt.Sprintf("%#v", this.Blockheaderbase)+",\n")
	}
	s = append(s, "Dsdifficulty: "+fmt.Sprintf("%#v", this.Dsdifficulty)+",\n")
	s = append(s, "Difficulty: "+fmt.Sprintf("%#v", this.Difficulty)+",\n")
	s = append(s, "Prevhash: "+fmt.Sprintf("%#v", this.Prevhash)+",\n")
	if this.Leaderpubkey != nil {
		s = append(s, "Leaderpubkey: "+fmt.Sprintf("%#v", this.Leaderpubkey)+",\n")
	}
	if this.Oneof6 != nil {
		s = append(s, "Oneof6: "+fmt.Sprintf("%#v", this.Oneof6)+",\n")
	}
	if this.Oneof7 != nil {
		s = append(s, "Oneof7: "+fmt.Sprintf("%#v", this.Oneof7)+",\n")
	}
	if this.Gasprice != nil {
		s = append(s, "Gasprice: "+fmt.Sprintf("%#v", this.Gasprice)+",\n")
	}
	if this.Swinfo != nil {
		s = append(s, "Swinfo: "+fmt.Sprintf("%#v", this.Swinfo)+",\n")
	}
	if this.Dswinners != nil {
		s = append(s, "Dswinners: "+fmt.Sprintf("%#v", this.Dswinners)+",\n")
	}
	if this.Hash != nil {
		s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	}
	if this.Dsremoved != nil {
		s = append(s, "Dsremoved: "+fmt.Sprintf("%#v", this.Dsremoved)+",\n")
	}
	if this.Proposals != nil {
		s = append(s, "Proposals: "+fmt.Sprintf("%#v", this.Proposals)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoDSBlock_DSBlockHeader_Blocknum) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoDSBlock_DSBlockHeader_Blocknum{` +
		`Blocknum:` + fmt.Sprintf("%#v", this.Blocknum) + `}`}, ", ")
	return s
}
func (this *ProtoDSBlock_DSBlockHeader_Epochnum) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoDSBlock_DSBlockHeader_Epochnum{` +
		`Epochnum:` + fmt.Sprintf("%#v", this.Epochnum) + `}`}, ", ")
	return s
}
func (this *ProtoDSBlock_DSBlockHeader_PowDSWinners) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoDSBlock_DSBlockHeader_PowDSWinners{")
	if this.Key != nil {
		s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	}
	if this.Val != nil {
		s = append(s, "Val: "+fmt.Sprintf("%#v", this.Val)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoDSBlock_DSBlockHeader_Vote) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoDSBlock_DSBlockHeader_Vote{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoDSBlock_DSBlockHeader_Proposal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ProtoDSBlock_DSBlockHeader_Proposal{")
	s = append(s, "Proposalid: "+fmt.Sprintf("%#v", this.Proposalid)+",\n")
	if this.Dsvotes != nil {
		s = append(s, "Dsvotes: "+fmt.Sprintf("%#v", this.Dsvotes)+",\n")
	}
	if this.Minervotes != nil {
		s = append(s, "Minervotes: "+fmt.Sprintf("%#v", this.Minervotes)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoDSNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoDSNode{")
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoDSCommittee) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoDSCommittee{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.Dsnodes != nil {
		s = append(s, "Dsnodes: "+fmt.Sprintf("%#v", this.Dsnodes)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoMicroBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ProtoMicroBlock{")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	s = append(s, "Tranhashes: "+fmt.Sprintf("%#v", this.Tranhashes)+",\n")
	if this.Blockbase != nil {
		s = append(s, "Blockbase: "+fmt.Sprintf("%#v", this.Blockbase)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoMicroBlock_MicroBlockHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&ZilliqaMessage.ProtoMicroBlock_MicroBlockHeader{")
	if this.Blockheaderbase != nil {
		s = append(s, "Blockheaderbase: "+fmt.Sprintf("%#v", this.Blockheaderbase)+",\n")
	}
	if this.Oneof2 != nil {
		s = append(s, "Oneof2: "+fmt.Sprintf("%#v", this.Oneof2)+",\n")
	}
	s = append(s, "Gaslimit: "+fmt.Sprintf("%#v", this.Gaslimit)+",\n")
	if this.Oneof4 != nil {
		s = append(s, "Oneof4: "+fmt.Sprintf("%#v", this.Oneof4)+",\n")
	}
	if this.Rewards != nil {
		s = append(s, "Rewards: "+fmt.Sprintf("%#v", this.Rewards)+",\n")
	}
	s = append(s, "Prevhash: "+fmt.Sprintf("%#v", this.Prevhash)+",\n")
	if this.Oneof7 != nil {
		s = append(s, "Oneof7: "+fmt.Sprintf("%#v", this.Oneof7)+",\n")
	}
	s = append(s, "Txroothash: "+fmt.Sprintf("%#v", this.Txroothash)+",\n")
	if this.Oneof9 != nil {
		s = append(s, "Oneof9: "+fmt.Sprintf("%#v", this.Oneof9)+",\n")
	}
	if this.Minerpubkey != nil {
		s = append(s, "Minerpubkey: "+fmt.Sprintf("%#v", this.Minerpubkey)+",\n")
	}
	s = append(s, "Dsblocknum: "+fmt.Sprintf("%#v", this.Dsblocknum)+",\n")
	s = append(s, "Statedeltahash: "+fmt.Sprintf("%#v", this.Statedeltahash)+",\n")
	s = append(s, "Tranreceipthash: "+fmt.Sprintf("%#v", this.Tranreceipthash)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoMicroBlock_MicroBlockHeader_Shardid) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoMicroBlock_MicroBlockHeader_Shardid{` +
		`Shardid:` + fmt.Sprintf("%#v", this.Shardid) + `}`}, ", ")
	return s
}
func (this *ProtoMicroBlock_MicroBlockHeader_Gasused) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoMicroBlock_MicroBlockHeader_Gasused{` +
		`Gasused:` + fmt.Sprintf("%#v", this.Gasused) + `}`}, ", ")
	return s
}
func (this *ProtoMicroBlock_MicroBlockHeader_Epochnum) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoMicroBlock_MicroBlockHeader_Epochnum{` +
		`Epochnum:` + fmt.Sprintf("%#v", this.Epochnum) + `}`}, ", ")
	return s
}
func (this *ProtoMicroBlock_MicroBlockHeader_Numtxs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoMicroBlock_MicroBlockHeader_Numtxs{` +
		`Numtxs:` + fmt.Sprintf("%#v", this.Numtxs) + `}`}, ", ")
	return s
}
func (this *ProtoShardingStructure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoShardingStructure{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.Shards != nil {
		s = append(s, "Shards: "+fmt.Sprintf("%#v", this.Shards)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoShardingStructure_Member) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ProtoShardingStructure_Member{")
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Peerinfo != nil {
		s = append(s, "Peerinfo: "+fmt.Sprintf("%#v", this.Peerinfo)+",\n")
	}
	if this.Oneof3 != nil {
		s = append(s, "Oneof3: "+fmt.Sprintf("%#v", this.Oneof3)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoShardingStructure_Member_Reputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoShardingStructure_Member_Reputation{` +
		`Reputation:` + fmt.Sprintf("%#v", this.Reputation) + `}`}, ", ")
	return s
}
func (this *ProtoShardingStructure_Shard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.ProtoShardingStructure_Shard{")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoMbInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ProtoMbInfo{")
	s = append(s, "Mbhash: "+fmt.Sprintf("%#v", this.Mbhash)+",\n")
	s = append(s, "Txroot: "+fmt.Sprintf("%#v", this.Txroot)+",\n")
	if this.Oneof3 != nil {
		s = append(s, "Oneof3: "+fmt.Sprintf("%#v", this.Oneof3)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoMbInfo_Shardid) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoMbInfo_Shardid{` +
		`Shardid:` + fmt.Sprintf("%#v", this.Shardid) + `}`}, ", ")
	return s
}
func (this *ProtoTxBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ProtoTxBlock{")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	if this.Mbinfos != nil {
		s = append(s, "Mbinfos: "+fmt.Sprintf("%#v", this.Mbinfos)+",\n")
	}
	if this.Blockbase != nil {
		s = append(s, "Blockbase: "+fmt.Sprintf("%#v", this.Blockbase)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoTxBlock_TxBlockHashSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ProtoTxBlock_TxBlockHashSet{")
	s = append(s, "Stateroothash: "+fmt.Sprintf("%#v", this.Stateroothash)+",\n")
	s = append(s, "Statedeltahash: "+fmt.Sprintf("%#v", this.Statedeltahash)+",\n")
	s = append(s, "Mbinfohash: "+fmt.Sprintf("%#v", this.Mbinfohash)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoTxBlock_TxBlockHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&ZilliqaMessage.ProtoTxBlock_TxBlockHeader{")
	if this.Blockheaderbase != nil {
		s = append(s, "Blockheaderbase: "+fmt.Sprintf("%#v", this.Blockheaderbase)+",\n")
	}
	s = append(s, "Gaslimit: "+fmt.Sprintf("%#v", this.Gaslimit)+",\n")
	if this.Oneof3 != nil {
		s = append(s, "Oneof3: "+fmt.Sprintf("%#v", this.Oneof3)+",\n")
	}
	if this.Rewards != nil {
		s = append(s, "Rewards: "+fmt.Sprintf("%#v", this.Rewards)+",\n")
	}
	s = append(s, "Prevhash: "+fmt.Sprintf("%#v", this.Prevhash)+",\n")
	if this.Oneof6 != nil {
		s = append(s, "Oneof6: "+fmt.Sprintf("%#v", this.Oneof6)+",\n")
	}
	if this.Hash != nil {
		s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	}
	if this.Oneof8 != nil {
		s = append(s, "Oneof8: "+fmt.Sprintf("%#v", this.Oneof8)+",\n")
	}
	if this.Minerpubkey != nil {
		s = append(s, "Minerpubkey: "+fmt.Sprintf("%#v", this.Minerpubkey)+",\n")
	}
	if this.Oneof10 != nil {
		s = append(s, "Oneof10: "+fmt.Sprintf("%#v", this.Oneof10)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoTxBlock_TxBlockHeader_Gasused) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoTxBlock_TxBlockHeader_Gasused{` +
		`Gasused:` + fmt.Sprintf("%#v", this.Gasused) + `}`}, ", ")
	return s
}
func (this *ProtoTxBlock_TxBlockHeader_Blocknum) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoTxBlock_TxBlockHeader_Blocknum{` +
		`Blocknum:` + fmt.Sprintf("%#v", this.Blocknum) + `}`}, ", ")
	return s
}
func (this *ProtoTxBlock_TxBlockHeader_Numtxs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoTxBlock_TxBlockHeader_Numtxs{` +
		`Numtxs:` + fmt.Sprintf("%#v", this.Numtxs) + `}`}, ", ")
	return s
}
func (this *ProtoTxBlock_TxBlockHeader_Dsblocknum) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoTxBlock_TxBlockHeader_Dsblocknum{` +
		`Dsblocknum:` + fmt.Sprintf("%#v", this.Dsblocknum) + `}`}, ", ")
	return s
}
func (this *ProtoVCBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoVCBlock{")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	if this.Blockbase != nil {
		s = append(s, "Blockbase: "+fmt.Sprintf("%#v", this.Blockbase)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoVCBlock_VCBlockHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&ZilliqaMessage.ProtoVCBlock_VCBlockHeader{")
	if this.Blockheaderbase != nil {
		s = append(s, "Blockheaderbase: "+fmt.Sprintf("%#v", this.Blockheaderbase)+",\n")
	}
	s = append(s, "Viewchangedsepochno: "+fmt.Sprintf("%#v", this.Viewchangedsepochno)+",\n")
	s = append(s, "Viewchangeepochno: "+fmt.Sprintf("%#v", this.Viewchangeepochno)+",\n")
	if this.Oneof4 != nil {
		s = append(s, "Oneof4: "+fmt.Sprintf("%#v", this.Oneof4)+",\n")
	}
	if this.Candidateleadernetworkinfo != nil {
		s = append(s, "Candidateleadernetworkinfo: "+fmt.Sprintf("%#v", this.Candidateleadernetworkinfo)+",\n")
	}
	if this.Candidateleaderpubkey != nil {
		s = append(s, "Candidateleaderpubkey: "+fmt.Sprintf("%#v", this.Candidateleaderpubkey)+",\n")
	}
	if this.Oneof7 != nil {
		s = append(s, "Oneof7: "+fmt.Sprintf("%#v", this.Oneof7)+",\n")
	}
	if this.Faultyleaders != nil {
		s = append(s, "Faultyleaders: "+fmt.Sprintf("%#v", this.Faultyleaders)+",\n")
	}
	s = append(s, "Prevhash: "+fmt.Sprintf("%#v", this.Prevhash)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoVCBlock_VCBlockHeader_Viewchangestate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoVCBlock_VCBlockHeader_Viewchangestate{` +
		`Viewchangestate:` + fmt.Sprintf("%#v", this.Viewchangestate) + `}`}, ", ")
	return s
}
func (this *ProtoVCBlock_VCBlockHeader_Vccounter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoVCBlock_VCBlockHeader_Vccounter{` +
		`Vccounter:` + fmt.Sprintf("%#v", this.Vccounter) + `}`}, ", ")
	return s
}
func (this *ProtoFallbackBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoFallbackBlock{")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	if this.Blockbase != nil {
		s = append(s, "Blockbase: "+fmt.Sprintf("%#v", this.Blockbase)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoFallbackBlock_FallbackBlockHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&ZilliqaMessage.ProtoFallbackBlock_FallbackBlockHeader{")
	if this.Blockheaderbase != nil {
		s = append(s, "Blockheaderbase: "+fmt.Sprintf("%#v", this.Blockheaderbase)+",\n")
	}
	s = append(s, "Fallbackdsepochno: "+fmt.Sprintf("%#v", this.Fallbackdsepochno)+",\n")
	s = append(s, "Fallbackepochno: "+fmt.Sprintf("%#v", this.Fallbackepochno)+",\n")
	s = append(s, "Fallbackstate: "+fmt.Sprintf("%#v", this.Fallbackstate)+",\n")
	s = append(s, "Stateroothash: "+fmt.Sprintf("%#v", this.Stateroothash)+",\n")
	s = append(s, "Leaderconsensusid: "+fmt.Sprintf("%#v", this.Leaderconsensusid)+",\n")
	if this.Leadernetworkinfo != nil {
		s = append(s, "Leadernetworkinfo: "+fmt.Sprintf("%#v", this.Leadernetworkinfo)+",\n")
	}
	if this.Leaderpubkey != nil {
		s = append(s, "Leaderpubkey: "+fmt.Sprintf("%#v", this.Leaderpubkey)+",\n")
	}
	s = append(s, "Shardid: "+fmt.Sprintf("%#v", this.Shardid)+",\n")
	s = append(s, "Prevhash: "+fmt.Sprintf("%#v", this.Prevhash)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoDiagnosticDataNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoDiagnosticDataNodes{")
	if this.Shards != nil {
		s = append(s, "Shards: "+fmt.Sprintf("%#v", this.Shards)+",\n")
	}
	if this.Dscommittee != nil {
		s = append(s, "Dscommittee: "+fmt.Sprintf("%#v", this.Dscommittee)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoDiagnosticDataCoinbase) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&ZilliqaMessage.ProtoDiagnosticDataCoinbase{")
	if this.Nodecount != nil {
		s = append(s, "Nodecount: "+fmt.Sprintf("%#v", this.Nodecount)+",\n")
	}
	if this.Sigcount != nil {
		s = append(s, "Sigcount: "+fmt.Sprintf("%#v", this.Sigcount)+",\n")
	}
	s = append(s, "Lookupcount: "+fmt.Sprintf("%#v", this.Lookupcount)+",\n")
	if this.Totalreward != nil {
		s = append(s, "Totalreward: "+fmt.Sprintf("%#v", this.Totalreward)+",\n")
	}
	if this.Basereward != nil {
		s = append(s, "Basereward: "+fmt.Sprintf("%#v", this.Basereward)+",\n")
	}
	if this.Baserewardeach != nil {
		s = append(s, "Baserewardeach: "+fmt.Sprintf("%#v", this.Baserewardeach)+",\n")
	}
	if this.Lookupreward != nil {
		s = append(s, "Lookupreward: "+fmt.Sprintf("%#v", this.Lookupreward)+",\n")
	}
	if this.Rewardeachlookup != nil {
		s = append(s, "Rewardeachlookup: "+fmt.Sprintf("%#v", this.Rewardeachlookup)+",\n")
	}
	if this.Nodereward != nil {
		s = append(s, "Nodereward: "+fmt.Sprintf("%#v", this.Nodereward)+",\n")
	}
	if this.Rewardeach != nil {
		s = append(s, "Rewardeach: "+fmt.Sprintf("%#v", this.Rewardeach)+",\n")
	}
	if this.Balanceleft != nil {
		s = append(s, "Balanceleft: "+fmt.Sprintf("%#v", this.Balanceleft)+",\n")
	}
	if this.Luckydrawwinnerkey != nil {
		s = append(s, "Luckydrawwinnerkey: "+fmt.Sprintf("%#v", this.Luckydrawwinnerkey)+",\n")
	}
	s = append(s, "Luckydrawwinneraddr: "+fmt.Sprintf("%#v", this.Luckydrawwinneraddr)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoMinerInfoDSComm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoMinerInfoDSComm{")
	if this.Dsnodes != nil {
		s = append(s, "Dsnodes: "+fmt.Sprintf("%#v", this.Dsnodes)+",\n")
	}
	if this.Dsnodesejected != nil {
		s = append(s, "Dsnodesejected: "+fmt.Sprintf("%#v", this.Dsnodesejected)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoMinerInfoDSComm_Node) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.ProtoMinerInfoDSComm_Node{")
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoMinerInfoShards) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.ProtoMinerInfoShards{")
	if this.Shards != nil {
		s = append(s, "Shards: "+fmt.Sprintf("%#v", this.Shards)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoMinerInfoShards_Node) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.ProtoMinerInfoShards_Node{")
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoMinerInfoShards_Shard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoMinerInfoShards_Shard{")
	s = append(s, "Shardsize: "+fmt.Sprintf("%#v", this.Shardsize)+",\n")
	if this.Shardnodes != nil {
		s = append(s, "Shardnodes: "+fmt.Sprintf("%#v", this.Shardnodes)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoAccountBase) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ZilliqaMessage.ProtoAccountBase{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.Balance != nil {
		s = append(s, "Balance: "+fmt.Sprintf("%#v", this.Balance)+",\n")
	}
	if this.Oneof3 != nil {
		s = append(s, "Oneof3: "+fmt.Sprintf("%#v", this.Oneof3)+",\n")
	}
	s = append(s, "Codehash: "+fmt.Sprintf("%#v", this.Codehash)+",\n")
	s = append(s, "Storageroot: "+fmt.Sprintf("%#v", this.Storageroot)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoAccountBase_Nonce) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoAccountBase_Nonce{` +
		`Nonce:` + fmt.Sprintf("%#v", this.Nonce) + `}`}, ", ")
	return s
}
func (this *ProtoAccount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&ZilliqaMessage.ProtoAccount{")
	if this.Base != nil {
		s = append(s, "Base: "+fmt.Sprintf("%#v", this.Base)+",\n")
	}
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.Storage != nil {
		s = append(s, "Storage: "+fmt.Sprintf("%#v", this.Storage)+",\n")
	}
	s = append(s, "Numbersign: "+fmt.Sprintf("%#v", this.Numbersign)+",\n")
	if this.Storage2 != nil {
		s = append(s, "Storage2: "+fmt.Sprintf("%#v", this.Storage2)+",\n")
	}
	s = append(s, "Todelete: "+fmt.Sprintf("%#v", this.Todelete)+",\n")
	s = append(s, "Initdata: "+fmt.Sprintf("%#v", this.Initdata)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoAccount_StorageData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoAccount_StorageData{")
	s = append(s, "Keyhash: "+fmt.Sprintf("%#v", this.Keyhash)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoAccount_StorageData2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoAccount_StorageData2{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoStateIndex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.ProtoStateIndex{")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoStateData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ZilliqaMessage.ProtoStateData{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Vname: "+fmt.Sprintf("%#v", this.Vname)+",\n")
	s = append(s, "Ismutable: "+fmt.Sprintf("%#v", this.Ismutable)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoAccountStore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.ProtoAccountStore{")
	if this.Entries != nil {
		s = append(s, "Entries: "+fmt.Sprintf("%#v", this.Entries)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoAccountStore_AddressAccount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoAccountStore_AddressAccount{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoPeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoPeer{")
	if this.Ipaddress != nil {
		s = append(s, "Ipaddress: "+fmt.Sprintf("%#v", this.Ipaddress)+",\n")
	}
	if this.Oneof2 != nil {
		s = append(s, "Oneof2: "+fmt.Sprintf("%#v", this.Oneof2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoPeer_Listenporthost) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoPeer_Listenporthost{` +
		`Listenporthost:` + fmt.Sprintf("%#v", this.Listenporthost) + `}`}, ", ")
	return s
}
func (this *ProtoPoWSolution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&ZilliqaMessage.ProtoPoWSolution{")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "Mixhash: "+fmt.Sprintf("%#v", this.Mixhash)+",\n")
	if this.Oneof4 != nil {
		s = append(s, "Oneof4: "+fmt.Sprintf("%#v", this.Oneof4)+",\n")
	}
	if this.Gasprice != nil {
		s = append(s, "Gasprice: "+fmt.Sprintf("%#v", this.Gasprice)+",\n")
	}
	if this.Govdata != nil {
		s = append(s, "Govdata: "+fmt.Sprintf("%#v", this.Govdata)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoPoWSolution_Lookupid) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoPoWSolution_Lookupid{` +
		`Lookupid:` + fmt.Sprintf("%#v", this.Lookupid) + `}`}, ", ")
	return s
}
func (this *ProtoCommittee) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.ProtoCommittee{")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoShardingStructureWithPoWSolns) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.ProtoShardingStructureWithPoWSolns{")
	if this.Shards != nil {
		s = append(s, "Shards: "+fmt.Sprintf("%#v", this.Shards)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoShardingStructureWithPoWSolns_Member) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ZilliqaMessage.ProtoShardingStructureWithPoWSolns_Member{")
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Peerinfo != nil {
		s = append(s, "Peerinfo: "+fmt.Sprintf("%#v", this.Peerinfo)+",\n")
	}
	if this.Oneof3 != nil {
		s = append(s, "Oneof3: "+fmt.Sprintf("%#v", this.Oneof3)+",\n")
	}
	if this.Powsoln != nil {
		s = append(s, "Powsoln: "+fmt.Sprintf("%#v", this.Powsoln)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoShardingStructureWithPoWSolns_Member_Reputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoShardingStructureWithPoWSolns_Member_Reputation{` +
		`Reputation:` + fmt.Sprintf("%#v", this.Reputation) + `}`}, ", ")
	return s
}
func (this *ProtoShardingStructureWithPoWSolns_Shard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.ProtoShardingStructureWithPoWSolns_Shard{")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoDSWinnerPoW) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoDSWinnerPoW{")
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Powsoln != nil {
		s = append(s, "Powsoln: "+fmt.Sprintf("%#v", this.Powsoln)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoTransactionCoreInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&ZilliqaMessage.ProtoTransactionCoreInfo{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.Oneof2 != nil {
		s = append(s, "Oneof2: "+fmt.Sprintf("%#v", this.Oneof2)+",\n")
	}
	s = append(s, "Toaddr: "+fmt.Sprintf("%#v", this.Toaddr)+",\n")
	if this.Senderpubkey != nil {
		s = append(s, "Senderpubkey: "+fmt.Sprintf("%#v", this.Senderpubkey)+",\n")
	}
	if this.Amount != nil {
		s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	}
	if this.Gasprice != nil {
		s = append(s, "Gasprice: "+fmt.Sprintf("%#v", this.Gasprice)+",\n")
	}
	s = append(s, "Gaslimit: "+fmt.Sprintf("%#v", this.Gaslimit)+",\n")
	if this.Oneof8 != nil {
		s = append(s, "Oneof8: "+fmt.Sprintf("%#v", this.Oneof8)+",\n")
	}
	if this.Oneof9 != nil {
		s = append(s, "Oneof9: "+fmt.Sprintf("%#v", this.Oneof9)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoTransactionCoreInfo_Nonce) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoTransactionCoreInfo_Nonce{` +
		`Nonce:` + fmt.Sprintf("%#v", this.Nonce) + `}`}, ", ")
	return s
}
func (this *ProtoTransactionCoreInfo_Code) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoTransactionCoreInfo_Code{` +
		`Code:` + fmt.Sprintf("%#v", this.Code) + `}`}, ", ")
	return s
}
func (this *ProtoTransactionCoreInfo_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoTransactionCoreInfo_Data{` +
		`Data:` + fmt.Sprintf("%#v", this.Data) + `}`}, ", ")
	return s
}
func (this *ProtoTransaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ProtoTransaction{")
	s = append(s, "Tranid: "+fmt.Sprintf("%#v", this.Tranid)+",\n")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoTxnFileOffset) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.ProtoTxnFileOffset{")
	s = append(s, "Offsetinfile: "+fmt.Sprintf("%#v", this.Offsetinfile)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoTransactionArray) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.ProtoTransactionArray{")
	if this.Transactions != nil {
		s = append(s, "Transactions: "+fmt.Sprintf("%#v", this.Transactions)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoTransactionReceipt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoTransactionReceipt{")
	s = append(s, "Receipt: "+fmt.Sprintf("%#v", this.Receipt)+",\n")
	if this.Oneof2 != nil {
		s = append(s, "Oneof2: "+fmt.Sprintf("%#v", this.Oneof2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoTransactionReceipt_Cumgas) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoTransactionReceipt_Cumgas{` +
		`Cumgas:` + fmt.Sprintf("%#v", this.Cumgas) + `}`}, ", ")
	return s
}
func (this *ProtoTransactionWithReceipt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoTransactionWithReceipt{")
	if this.Transaction != nil {
		s = append(s, "Transaction: "+fmt.Sprintf("%#v", this.Transaction)+",\n")
	}
	if this.Receipt != nil {
		s = append(s, "Receipt: "+fmt.Sprintf("%#v", this.Receipt)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoBloomFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&ZilliqaMessage.ProtoBloomFilter{")
	s = append(s, "Salt: "+fmt.Sprintf("%#v", this.Salt)+",\n")
	s = append(s, "Bittable: "+fmt.Sprintf("%#v", this.Bittable)+",\n")
	s = append(s, "Saltcount: "+fmt.Sprintf("%#v", this.Saltcount)+",\n")
	s = append(s, "Tablesize: "+fmt.Sprintf("%#v", this.Tablesize)+",\n")
	s = append(s, "Projectedelementcount: "+fmt.Sprintf("%#v", this.Projectedelementcount)+",\n")
	s = append(s, "Insertedelementcount: "+fmt.Sprintf("%#v", this.Insertedelementcount)+",\n")
	s = append(s, "Randomseed: "+fmt.Sprintf("%#v", this.Randomseed)+",\n")
	s = append(s, "Probability: "+fmt.Sprintf("%#v", this.Probability)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoSWInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&ZilliqaMessage.ProtoSWInfo{")
	s = append(s, "Zilliqamajorversion: "+fmt.Sprintf("%#v", this.Zilliqamajorversion)+",\n")
	s = append(s, "Zilliqaminorversion: "+fmt.Sprintf("%#v", this.Zilliqaminorversion)+",\n")
	s = append(s, "Zilliqafixversion: "+fmt.Sprintf("%#v", this.Zilliqafixversion)+",\n")
	s = append(s, "Zilliqaupgradeds: "+fmt.Sprintf("%#v", this.Zilliqaupgradeds)+",\n")
	s = append(s, "Zilliqacommit: "+fmt.Sprintf("%#v", this.Zilliqacommit)+",\n")
	s = append(s, "Scillamajorversion: "+fmt.Sprintf("%#v", this.Scillamajorversion)+",\n")
	s = append(s, "Scillaminorversion: "+fmt.Sprintf("%#v", this.Scillaminorversion)+",\n")
	s = append(s, "Scillafixversion: "+fmt.Sprintf("%#v", this.Scillafixversion)+",\n")
	s = append(s, "Scillaupgradeds: "+fmt.Sprintf("%#v", this.Scillaupgradeds)+",\n")
	s = append(s, "Scillacommit: "+fmt.Sprintf("%#v", this.Scillacommit)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoFallbackBlockWShardingStructure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.ProtoFallbackBlockWShardingStructure{")
	if this.Fallbackblock != nil {
		s = append(s, "Fallbackblock: "+fmt.Sprintf("%#v", this.Fallbackblock)+",\n")
	}
	if this.Sharding != nil {
		s = append(s, "Sharding: "+fmt.Sprintf("%#v", this.Sharding)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoSingleDirectoryBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ProtoSingleDirectoryBlock{")
	if this.Directoryblock != nil {
		s = append(s, "Directoryblock: "+fmt.Sprintf("%#v", this.Directoryblock)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoSingleDirectoryBlock_Dsblock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoSingleDirectoryBlock_Dsblock{` +
		`Dsblock:` + fmt.Sprintf("%#v", this.Dsblock) + `}`}, ", ")
	return s
}
func (this *ProtoSingleDirectoryBlock_Vcblock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoSingleDirectoryBlock_Vcblock{` +
		`Vcblock:` + fmt.Sprintf("%#v", this.Vcblock) + `}`}, ", ")
	return s
}
func (this *ProtoSingleDirectoryBlock_Fallbackblockwshard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ProtoSingleDirectoryBlock_Fallbackblockwshard{` +
		`Fallbackblockwshard:` + fmt.Sprintf("%#v", this.Fallbackblockwshard) + `}`}, ", ")
	return s
}
func (this *PMHello) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.PMHello{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PMHello_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.PMHello_Data{")
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	s = append(s, "Listenport: "+fmt.Sprintf("%#v", this.Listenport)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GovernanceData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.GovernanceData{")
	s = append(s, "Proposalid: "+fmt.Sprintf("%#v", this.Proposalid)+",\n")
	s = append(s, "Votevalue: "+fmt.Sprintf("%#v", this.Votevalue)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DSPoWSubmission) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.DSPoWSubmission{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DSPoWSubmission_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&ZilliqaMessage.DSPoWSubmission_Data{")
	s = append(s, "Blocknumber: "+fmt.Sprintf("%#v", this.Blocknumber)+",\n")
	s = append(s, "Difficultylevel: "+fmt.Sprintf("%#v", this.Difficultylevel)+",\n")
	if this.Submitterpeer != nil {
		s = append(s, "Submitterpeer: "+fmt.Sprintf("%#v", this.Submitterpeer)+",\n")
	}
	if this.SubmitterpubKey != nil {
		s = append(s, "SubmitterpubKey: "+fmt.Sprintf("%#v", this.SubmitterpubKey)+",\n")
	}
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Resultinghash: "+fmt.Sprintf("%#v", this.Resultinghash)+",\n")
	s = append(s, "Mixhash: "+fmt.Sprintf("%#v", this.Mixhash)+",\n")
	s = append(s, "Lookupid: "+fmt.Sprintf("%#v", this.Lookupid)+",\n")
	if this.Gasprice != nil {
		s = append(s, "Gasprice: "+fmt.Sprintf("%#v", this.Gasprice)+",\n")
	}
	if this.Govdata != nil {
		s = append(s, "Govdata: "+fmt.Sprintf("%#v", this.Govdata)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DSPoWPacketSubmission) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.DSPoWPacketSubmission{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DSPoWPacketSubmission_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.DSPoWPacketSubmission_Data{")
	if this.DsPowSubmissions != nil {
		s = append(s, "DsPowSubmissions: "+fmt.Sprintf("%#v", this.DsPowSubmissions)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DSMicroBlockSubmission) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.DSMicroBlockSubmission{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DSMicroBlockSubmission_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ZilliqaMessage.DSMicroBlockSubmission_Data{")
	s = append(s, "Microblocktype: "+fmt.Sprintf("%#v", this.Microblocktype)+",\n")
	s = append(s, "Epochnumber: "+fmt.Sprintf("%#v", this.Epochnumber)+",\n")
	if this.Microblocks != nil {
		s = append(s, "Microblocks: "+fmt.Sprintf("%#v", this.Microblocks)+",\n")
	}
	s = append(s, "Statedeltas: "+fmt.Sprintf("%#v", this.Statedeltas)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DSDSBlockAnnouncement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.DSDSBlockAnnouncement{")
	if this.Dsblock != nil {
		s = append(s, "Dsblock: "+fmt.Sprintf("%#v", this.Dsblock)+",\n")
	}
	if this.Sharding != nil {
		s = append(s, "Sharding: "+fmt.Sprintf("%#v", this.Sharding)+",\n")
	}
	if this.Dswinnerpows != nil {
		s = append(s, "Dswinnerpows: "+fmt.Sprintf("%#v", this.Dswinnerpows)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DSFinalBlockAnnouncement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.DSFinalBlockAnnouncement{")
	if this.Txblock != nil {
		s = append(s, "Txblock: "+fmt.Sprintf("%#v", this.Txblock)+",\n")
	}
	if this.Microblock != nil {
		s = append(s, "Microblock: "+fmt.Sprintf("%#v", this.Microblock)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DSVCBlockAnnouncement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.DSVCBlockAnnouncement{")
	if this.Vcblock != nil {
		s = append(s, "Vcblock: "+fmt.Sprintf("%#v", this.Vcblock)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DSMissingMicroBlocksErrorMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.DSMissingMicroBlocksErrorMsg{")
	s = append(s, "Mbhashes: "+fmt.Sprintf("%#v", this.Mbhashes)+",\n")
	s = append(s, "Epochnum: "+fmt.Sprintf("%#v", this.Epochnum)+",\n")
	s = append(s, "Listenport: "+fmt.Sprintf("%#v", this.Listenport)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeDSBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ZilliqaMessage.NodeDSBlock{")
	s = append(s, "Shardid: "+fmt.Sprintf("%#v", this.Shardid)+",\n")
	if this.Dsblock != nil {
		s = append(s, "Dsblock: "+fmt.Sprintf("%#v", this.Dsblock)+",\n")
	}
	if this.Vcblocks != nil {
		s = append(s, "Vcblocks: "+fmt.Sprintf("%#v", this.Vcblocks)+",\n")
	}
	if this.Sharding != nil {
		s = append(s, "Sharding: "+fmt.Sprintf("%#v", this.Sharding)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeFinalBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ZilliqaMessage.NodeFinalBlock{")
	s = append(s, "Dsblocknumber: "+fmt.Sprintf("%#v", this.Dsblocknumber)+",\n")
	s = append(s, "Consensusid: "+fmt.Sprintf("%#v", this.Consensusid)+",\n")
	if this.Txblock != nil {
		s = append(s, "Txblock: "+fmt.Sprintf("%#v", this.Txblock)+",\n")
	}
	s = append(s, "Statedelta: "+fmt.Sprintf("%#v", this.Statedelta)+",\n")
	s = append(s, "Shardids: "+fmt.Sprintf("%#v", this.Shardids)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeVCFinalBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ZilliqaMessage.NodeVCFinalBlock{")
	s = append(s, "Dsblocknumber: "+fmt.Sprintf("%#v", this.Dsblocknumber)+",\n")
	s = append(s, "Consensusid: "+fmt.Sprintf("%#v", this.Consensusid)+",\n")
	if this.Txblock != nil {
		s = append(s, "Txblock: "+fmt.Sprintf("%#v", this.Txblock)+",\n")
	}
	s = append(s, "Statedelta: "+fmt.Sprintf("%#v", this.Statedelta)+",\n")
	if this.Vcblocks != nil {
		s = append(s, "Vcblocks: "+fmt.Sprintf("%#v", this.Vcblocks)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeMBnForwardTransaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.NodeMBnForwardTransaction{")
	if this.Microblock != nil {
		s = append(s, "Microblock: "+fmt.Sprintf("%#v", this.Microblock)+",\n")
	}
	if this.Txnswithreceipt != nil {
		s = append(s, "Txnswithreceipt: "+fmt.Sprintf("%#v", this.Txnswithreceipt)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodePendingTxn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.NodePendingTxn{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodePendingTxn_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ZilliqaMessage.NodePendingTxn_Data{")
	if this.Hashcodepair != nil {
		s = append(s, "Hashcodepair: "+fmt.Sprintf("%#v", this.Hashcodepair)+",\n")
	}
	s = append(s, "Epochnumber: "+fmt.Sprintf("%#v", this.Epochnumber)+",\n")
	s = append(s, "Shardid: "+fmt.Sprintf("%#v", this.Shardid)+",\n")
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodePendingTxn_Data_Pair) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.NodePendingTxn_Data_Pair{")
	s = append(s, "Txnhash: "+fmt.Sprintf("%#v", this.Txnhash)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeVCBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.NodeVCBlock{")
	if this.Vcblock != nil {
		s = append(s, "Vcblock: "+fmt.Sprintf("%#v", this.Vcblock)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeForwardTxnBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&ZilliqaMessage.NodeForwardTxnBlock{")
	s = append(s, "Epochnumber: "+fmt.Sprintf("%#v", this.Epochnumber)+",\n")
	s = append(s, "Dsblocknum: "+fmt.Sprintf("%#v", this.Dsblocknum)+",\n")
	s = append(s, "Shardid: "+fmt.Sprintf("%#v", this.Shardid)+",\n")
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Transactions != nil {
		s = append(s, "Transactions: "+fmt.Sprintf("%#v", this.Transactions)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeMicroBlockAnnouncement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.NodeMicroBlockAnnouncement{")
	if this.Microblock != nil {
		s = append(s, "Microblock: "+fmt.Sprintf("%#v", this.Microblock)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeFallbackBlockAnnouncement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.NodeFallbackBlockAnnouncement{")
	if this.Fallbackblock != nil {
		s = append(s, "Fallbackblock: "+fmt.Sprintf("%#v", this.Fallbackblock)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeFallbackBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.NodeFallbackBlock{")
	if this.Fallbackblock != nil {
		s = append(s, "Fallbackblock: "+fmt.Sprintf("%#v", this.Fallbackblock)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeMissingTxnsErrorMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.NodeMissingTxnsErrorMsg{")
	s = append(s, "Txnhashes: "+fmt.Sprintf("%#v", this.Txnhashes)+",\n")
	s = append(s, "Epochnum: "+fmt.Sprintf("%#v", this.Epochnum)+",\n")
	s = append(s, "Listenport: "+fmt.Sprintf("%#v", this.Listenport)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetSeedPeers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.LookupGetSeedPeers{")
	s = append(s, "Listenport: "+fmt.Sprintf("%#v", this.Listenport)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetSeedPeers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetSeedPeers{")
	if this.Candidateseeds != nil {
		s = append(s, "Candidateseeds: "+fmt.Sprintf("%#v", this.Candidateseeds)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetDSInfoFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.LookupGetDSInfoFromSeed{")
	s = append(s, "Listenport: "+fmt.Sprintf("%#v", this.Listenport)+",\n")
	s = append(s, "Initialds: "+fmt.Sprintf("%#v", this.Initialds)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetDSInfoFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ZilliqaMessage.LookupSetDSInfoFromSeed{")
	if this.Dscommittee != nil {
		s = append(s, "Dscommittee: "+fmt.Sprintf("%#v", this.Dscommittee)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	s = append(s, "Initialds: "+fmt.Sprintf("%#v", this.Initialds)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetDSBlockFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ZilliqaMessage.LookupGetDSBlockFromSeed{")
	s = append(s, "Lowblocknum: "+fmt.Sprintf("%#v", this.Lowblocknum)+",\n")
	s = append(s, "Highblocknum: "+fmt.Sprintf("%#v", this.Highblocknum)+",\n")
	s = append(s, "Listenport: "+fmt.Sprintf("%#v", this.Listenport)+",\n")
	s = append(s, "Includeminerinfo: "+fmt.Sprintf("%#v", this.Includeminerinfo)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetDSBlockFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetDSBlockFromSeed{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetDSBlockFromSeed_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetDSBlockFromSeed_Data{")
	s = append(s, "Lowblocknum: "+fmt.Sprintf("%#v", this.Lowblocknum)+",\n")
	s = append(s, "Highblocknum: "+fmt.Sprintf("%#v", this.Highblocknum)+",\n")
	if this.Dsblocks != nil {
		s = append(s, "Dsblocks: "+fmt.Sprintf("%#v", this.Dsblocks)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetMinerInfoFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetMinerInfoFromSeed{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetMinerInfoFromSeed_MinerInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.LookupSetMinerInfoFromSeed_MinerInfo{")
	if this.Minerinfodscomm != nil {
		s = append(s, "Minerinfodscomm: "+fmt.Sprintf("%#v", this.Minerinfodscomm)+",\n")
	}
	if this.Minerinfoshards != nil {
		s = append(s, "Minerinfoshards: "+fmt.Sprintf("%#v", this.Minerinfoshards)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetMinerInfoFromSeed_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.LookupSetMinerInfoFromSeed_Data{")
	keysForMinerinfoperds := make([]uint64, 0, len(this.Minerinfoperds))
	for k, _ := range this.Minerinfoperds {
		keysForMinerinfoperds = append(keysForMinerinfoperds, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForMinerinfoperds)
	mapStringForMinerinfoperds := "map[uint64]*LookupSetMinerInfoFromSeed_MinerInfo{"
	for _, k := range keysForMinerinfoperds {
		mapStringForMinerinfoperds += fmt.Sprintf("%#v: %#v,", k, this.Minerinfoperds[k])
	}
	mapStringForMinerinfoperds += "}"
	if this.Minerinfoperds != nil {
		s = append(s, "Minerinfoperds: "+mapStringForMinerinfoperds+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetTxBlockFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupGetTxBlockFromSeed{")
	s = append(s, "Lowblocknum: "+fmt.Sprintf("%#v", this.Lowblocknum)+",\n")
	s = append(s, "Highblocknum: "+fmt.Sprintf("%#v", this.Highblocknum)+",\n")
	s = append(s, "Listenport: "+fmt.Sprintf("%#v", this.Listenport)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetTxBlockFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetTxBlockFromSeed{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetTxBlockFromSeed_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetTxBlockFromSeed_Data{")
	s = append(s, "Lowblocknum: "+fmt.Sprintf("%#v", this.Lowblocknum)+",\n")
	s = append(s, "Highblocknum: "+fmt.Sprintf("%#v", this.Highblocknum)+",\n")
	if this.Txblocks != nil {
		s = append(s, "Txblocks: "+fmt.Sprintf("%#v", this.Txblocks)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetStateDeltaFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.LookupGetStateDeltaFromSeed{")
	s = append(s, "Blocknum: "+fmt.Sprintf("%#v", this.Blocknum)+",\n")
	s = append(s, "Listenport: "+fmt.Sprintf("%#v", this.Listenport)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetStateDeltasFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupGetStateDeltasFromSeed{")
	s = append(s, "Lowblocknum: "+fmt.Sprintf("%#v", this.Lowblocknum)+",\n")
	s = append(s, "Highblocknum: "+fmt.Sprintf("%#v", this.Highblocknum)+",\n")
	s = append(s, "Listenport: "+fmt.Sprintf("%#v", this.Listenport)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetStateDeltaFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetStateDeltaFromSeed{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetStateDeltaFromSeed_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.LookupSetStateDeltaFromSeed_Data{")
	s = append(s, "Blocknum: "+fmt.Sprintf("%#v", this.Blocknum)+",\n")
	s = append(s, "Statedelta: "+fmt.Sprintf("%#v", this.Statedelta)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetStateDeltasFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetStateDeltasFromSeed{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetStateDeltasFromSeed_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetStateDeltasFromSeed_Data{")
	s = append(s, "Lowblocknum: "+fmt.Sprintf("%#v", this.Lowblocknum)+",\n")
	s = append(s, "Highblocknum: "+fmt.Sprintf("%#v", this.Highblocknum)+",\n")
	s = append(s, "Statedeltas: "+fmt.Sprintf("%#v", this.Statedeltas)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetStateFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.LookupGetStateFromSeed{")
	s = append(s, "Listenport: "+fmt.Sprintf("%#v", this.Listenport)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetStateFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetStateFromSeed{")
	if this.Accountstore != nil {
		s = append(s, "Accountstore: "+fmt.Sprintf("%#v", this.Accountstore)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetLookupOffline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetLookupOffline{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetLookupOffline_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.LookupSetLookupOffline_Data{")
	s = append(s, "Msgtype: "+fmt.Sprintf("%#v", this.Msgtype)+",\n")
	s = append(s, "Listenport: "+fmt.Sprintf("%#v", this.Listenport)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetLookupOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetLookupOnline{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetLookupOnline_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.LookupSetLookupOnline_Data{")
	s = append(s, "Msgtype: "+fmt.Sprintf("%#v", this.Msgtype)+",\n")
	s = append(s, "Listenport: "+fmt.Sprintf("%#v", this.Listenport)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetOfflineLookups) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.LookupGetOfflineLookups{")
	s = append(s, "Listenport: "+fmt.Sprintf("%#v", this.Listenport)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetOfflineLookups) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetOfflineLookups{")
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupRaiseStartPoW) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupRaiseStartPoW{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupRaiseStartPoW_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.LookupRaiseStartPoW_Data{")
	s = append(s, "Msgtype: "+fmt.Sprintf("%#v", this.Msgtype)+",\n")
	s = append(s, "Blocknumber: "+fmt.Sprintf("%#v", this.Blocknumber)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetStartPoWFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupGetStartPoWFromSeed{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetStartPoWFromSeed_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.LookupGetStartPoWFromSeed_Data{")
	s = append(s, "Listenport: "+fmt.Sprintf("%#v", this.Listenport)+",\n")
	s = append(s, "Blocknumber: "+fmt.Sprintf("%#v", this.Blocknumber)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetStartPoWFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetStartPoWFromSeed{")
	s = append(s, "Blocknumber: "+fmt.Sprintf("%#v", this.Blocknumber)+",\n")
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetShardsFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.LookupGetShardsFromSeed{")
	s = append(s, "Listenport: "+fmt.Sprintf("%#v", this.Listenport)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetShardsFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetShardsFromSeed{")
	if this.Sharding != nil {
		s = append(s, "Sharding: "+fmt.Sprintf("%#v", this.Sharding)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetMicroBlockFromLookup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.LookupGetMicroBlockFromLookup{")
	s = append(s, "Portno: "+fmt.Sprintf("%#v", this.Portno)+",\n")
	s = append(s, "Mbhashes: "+fmt.Sprintf("%#v", this.Mbhashes)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetMicroBlockFromLookup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetMicroBlockFromLookup{")
	if this.Microblocks != nil {
		s = append(s, "Microblocks: "+fmt.Sprintf("%#v", this.Microblocks)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetMicroBlockFromL2L) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupGetMicroBlockFromL2L{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetMicroBlockFromL2L_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.LookupGetMicroBlockFromL2L_Data{")
	s = append(s, "Portno: "+fmt.Sprintf("%#v", this.Portno)+",\n")
	s = append(s, "Mbhashes: "+fmt.Sprintf("%#v", this.Mbhashes)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupForwardTxnsFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.LookupForwardTxnsFromSeed{")
	if this.Shardtransactions != nil {
		s = append(s, "Shardtransactions: "+fmt.Sprintf("%#v", this.Shardtransactions)+",\n")
	}
	if this.Dstransactions != nil {
		s = append(s, "Dstransactions: "+fmt.Sprintf("%#v", this.Dstransactions)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetTxnsFromLookup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupGetTxnsFromLookup{")
	s = append(s, "Portno: "+fmt.Sprintf("%#v", this.Portno)+",\n")
	s = append(s, "Mbhash: "+fmt.Sprintf("%#v", this.Mbhash)+",\n")
	s = append(s, "Txnhashes: "+fmt.Sprintf("%#v", this.Txnhashes)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetTxnsFromL2L) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupGetTxnsFromL2L{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetTxnsFromL2L_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupGetTxnsFromL2L_Data{")
	s = append(s, "Portno: "+fmt.Sprintf("%#v", this.Portno)+",\n")
	s = append(s, "Mbhash: "+fmt.Sprintf("%#v", this.Mbhash)+",\n")
	s = append(s, "Txnhashes: "+fmt.Sprintf("%#v", this.Txnhashes)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetTxnsFromLookup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ZilliqaMessage.LookupSetTxnsFromLookup{")
	s = append(s, "Mbhash: "+fmt.Sprintf("%#v", this.Mbhash)+",\n")
	if this.Transactions != nil {
		s = append(s, "Transactions: "+fmt.Sprintf("%#v", this.Transactions)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetDirectoryBlocksFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupGetDirectoryBlocksFromSeed{")
	s = append(s, "Portno: "+fmt.Sprintf("%#v", this.Portno)+",\n")
	s = append(s, "Indexnum: "+fmt.Sprintf("%#v", this.Indexnum)+",\n")
	s = append(s, "Includeminerinfo: "+fmt.Sprintf("%#v", this.Includeminerinfo)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetDirectoryBlocksFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetDirectoryBlocksFromSeed{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetDirectoryBlocksFromSeed_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.LookupSetDirectoryBlocksFromSeed_Data{")
	s = append(s, "Indexnum: "+fmt.Sprintf("%#v", this.Indexnum)+",\n")
	if this.Dirblocks != nil {
		s = append(s, "Dirblocks: "+fmt.Sprintf("%#v", this.Dirblocks)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusAnnouncement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&ZilliqaMessage.ConsensusAnnouncement{")
	if this.Consensusinfo != nil {
		s = append(s, "Consensusinfo: "+fmt.Sprintf("%#v", this.Consensusinfo)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.Announcement != nil {
		s = append(s, "Announcement: "+fmt.Sprintf("%#v", this.Announcement)+",\n")
	}
	if this.Finalsignature != nil {
		s = append(s, "Finalsignature: "+fmt.Sprintf("%#v", this.Finalsignature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusAnnouncement_Dsblock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ConsensusAnnouncement_Dsblock{` +
		`Dsblock:` + fmt.Sprintf("%#v", this.Dsblock) + `}`}, ", ")
	return s
}
func (this *ConsensusAnnouncement_Microblock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ConsensusAnnouncement_Microblock{` +
		`Microblock:` + fmt.Sprintf("%#v", this.Microblock) + `}`}, ", ")
	return s
}
func (this *ConsensusAnnouncement_Finalblock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ConsensusAnnouncement_Finalblock{` +
		`Finalblock:` + fmt.Sprintf("%#v", this.Finalblock) + `}`}, ", ")
	return s
}
func (this *ConsensusAnnouncement_Vcblock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ConsensusAnnouncement_Vcblock{` +
		`Vcblock:` + fmt.Sprintf("%#v", this.Vcblock) + `}`}, ", ")
	return s
}
func (this *ConsensusAnnouncement_Fallbackblock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZilliqaMessage.ConsensusAnnouncement_Fallbackblock{` +
		`Fallbackblock:` + fmt.Sprintf("%#v", this.Fallbackblock) + `}`}, ", ")
	return s
}
func (this *ConsensusAnnouncement_ConsensusInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ZilliqaMessage.ConsensusAnnouncement_ConsensusInfo{")
	s = append(s, "Consensusid: "+fmt.Sprintf("%#v", this.Consensusid)+",\n")
	s = append(s, "Blocknumber: "+fmt.Sprintf("%#v", this.Blocknumber)+",\n")
	s = append(s, "Blockhash: "+fmt.Sprintf("%#v", this.Blockhash)+",\n")
	s = append(s, "Leaderid: "+fmt.Sprintf("%#v", this.Leaderid)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusCommit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ConsensusCommit{")
	if this.Consensusinfo != nil {
		s = append(s, "Consensusinfo: "+fmt.Sprintf("%#v", this.Consensusinfo)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusCommit_ConsensusInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&ZilliqaMessage.ConsensusCommit_ConsensusInfo{")
	s = append(s, "Consensusid: "+fmt.Sprintf("%#v", this.Consensusid)+",\n")
	s = append(s, "Blocknumber: "+fmt.Sprintf("%#v", this.Blocknumber)+",\n")
	s = append(s, "Blockhash: "+fmt.Sprintf("%#v", this.Blockhash)+",\n")
	s = append(s, "Backupid: "+fmt.Sprintf("%#v", this.Backupid)+",\n")
	if this.Commitpoint != nil {
		s = append(s, "Commitpoint: "+fmt.Sprintf("%#v", this.Commitpoint)+",\n")
	}
	if this.Commitpointhash != nil {
		s = append(s, "Commitpointhash: "+fmt.Sprintf("%#v", this.Commitpointhash)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ConsensusChallenge{")
	if this.Consensusinfo != nil {
		s = append(s, "Consensusinfo: "+fmt.Sprintf("%#v", this.Consensusinfo)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusChallenge_SubsetInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ConsensusChallenge_SubsetInfo{")
	if this.Aggregatedcommit != nil {
		s = append(s, "Aggregatedcommit: "+fmt.Sprintf("%#v", this.Aggregatedcommit)+",\n")
	}
	if this.Aggregatedkey != nil {
		s = append(s, "Aggregatedkey: "+fmt.Sprintf("%#v", this.Aggregatedkey)+",\n")
	}
	if this.Challenge != nil {
		s = append(s, "Challenge: "+fmt.Sprintf("%#v", this.Challenge)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusChallenge_ConsensusInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ZilliqaMessage.ConsensusChallenge_ConsensusInfo{")
	s = append(s, "Consensusid: "+fmt.Sprintf("%#v", this.Consensusid)+",\n")
	s = append(s, "Blocknumber: "+fmt.Sprintf("%#v", this.Blocknumber)+",\n")
	s = append(s, "Blockhash: "+fmt.Sprintf("%#v", this.Blockhash)+",\n")
	s = append(s, "Leaderid: "+fmt.Sprintf("%#v", this.Leaderid)+",\n")
	if this.Subsetinfo != nil {
		s = append(s, "Subsetinfo: "+fmt.Sprintf("%#v", this.Subsetinfo)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ConsensusResponse{")
	if this.Consensusinfo != nil {
		s = append(s, "Consensusinfo: "+fmt.Sprintf("%#v", this.Consensusinfo)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusResponse_SubsetInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.ConsensusResponse_SubsetInfo{")
	if this.Response != nil {
		s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusResponse_ConsensusInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ZilliqaMessage.ConsensusResponse_ConsensusInfo{")
	s = append(s, "Consensusid: "+fmt.Sprintf("%#v", this.Consensusid)+",\n")
	s = append(s, "Blocknumber: "+fmt.Sprintf("%#v", this.Blocknumber)+",\n")
	s = append(s, "Blockhash: "+fmt.Sprintf("%#v", this.Blockhash)+",\n")
	s = append(s, "Backupid: "+fmt.Sprintf("%#v", this.Backupid)+",\n")
	if this.Subsetinfo != nil {
		s = append(s, "Subsetinfo: "+fmt.Sprintf("%#v", this.Subsetinfo)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusCollectiveSig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ConsensusCollectiveSig{")
	if this.Consensusinfo != nil {
		s = append(s, "Consensusinfo: "+fmt.Sprintf("%#v", this.Consensusinfo)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusCollectiveSig_ConsensusInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&ZilliqaMessage.ConsensusCollectiveSig_ConsensusInfo{")
	s = append(s, "Consensusid: "+fmt.Sprintf("%#v", this.Consensusid)+",\n")
	s = append(s, "Blocknumber: "+fmt.Sprintf("%#v", this.Blocknumber)+",\n")
	s = append(s, "Blockhash: "+fmt.Sprintf("%#v", this.Blockhash)+",\n")
	s = append(s, "Leaderid: "+fmt.Sprintf("%#v", this.Leaderid)+",\n")
	if this.Collectivesig != nil {
		s = append(s, "Collectivesig: "+fmt.Sprintf("%#v", this.Collectivesig)+",\n")
	}
	s = append(s, "Bitmap: "+fmt.Sprintf("%#v", this.Bitmap)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusCommitFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ConsensusCommitFailure{")
	if this.Consensusinfo != nil {
		s = append(s, "Consensusinfo: "+fmt.Sprintf("%#v", this.Consensusinfo)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusCommitFailure_ConsensusInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ZilliqaMessage.ConsensusCommitFailure_ConsensusInfo{")
	s = append(s, "Consensusid: "+fmt.Sprintf("%#v", this.Consensusid)+",\n")
	s = append(s, "Blocknumber: "+fmt.Sprintf("%#v", this.Blocknumber)+",\n")
	s = append(s, "Blockhash: "+fmt.Sprintf("%#v", this.Blockhash)+",\n")
	s = append(s, "Backupid: "+fmt.Sprintf("%#v", this.Backupid)+",\n")
	s = append(s, "Errormsg: "+fmt.Sprintf("%#v", this.Errormsg)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusConsensusFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ConsensusConsensusFailure{")
	if this.Consensusinfo != nil {
		s = append(s, "Consensusinfo: "+fmt.Sprintf("%#v", this.Consensusinfo)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsensusConsensusFailure_ConsensusInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ZilliqaMessage.ConsensusConsensusFailure_ConsensusInfo{")
	s = append(s, "Consensusid: "+fmt.Sprintf("%#v", this.Consensusid)+",\n")
	s = append(s, "Blocknumber: "+fmt.Sprintf("%#v", this.Blocknumber)+",\n")
	s = append(s, "Blockhash: "+fmt.Sprintf("%#v", this.Blockhash)+",\n")
	s = append(s, "Leaderid: "+fmt.Sprintf("%#v", this.Leaderid)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetDSTxBlockFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ZilliqaMessage.LookupGetDSTxBlockFromSeed{")
	s = append(s, "Dslowblocknum: "+fmt.Sprintf("%#v", this.Dslowblocknum)+",\n")
	s = append(s, "Dshighblocknum: "+fmt.Sprintf("%#v", this.Dshighblocknum)+",\n")
	s = append(s, "Txlowblocknum: "+fmt.Sprintf("%#v", this.Txlowblocknum)+",\n")
	s = append(s, "Txhighblocknum: "+fmt.Sprintf("%#v", this.Txhighblocknum)+",\n")
	s = append(s, "Listenport: "+fmt.Sprintf("%#v", this.Listenport)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VCNodeSetDSTxBlockFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.VCNodeSetDSTxBlockFromSeed{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VCNodeSetDSTxBlockFromSeed_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.VCNodeSetDSTxBlockFromSeed_Data{")
	if this.Dsblocks != nil {
		s = append(s, "Dsblocks: "+fmt.Sprintf("%#v", this.Dsblocks)+",\n")
	}
	if this.Txblocks != nil {
		s = append(s, "Txblocks: "+fmt.Sprintf("%#v", this.Txblocks)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeSetShardNodeNetworkInfoUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.NodeSetShardNodeNetworkInfoUpdate{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeSetShardNodeNetworkInfoUpdate_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ZilliqaMessage.NodeSetShardNodeNetworkInfoUpdate_Data{")
	s = append(s, "Dsepochnumber: "+fmt.Sprintf("%#v", this.Dsepochnumber)+",\n")
	if this.Shardnodepubkey != nil {
		s = append(s, "Shardnodepubkey: "+fmt.Sprintf("%#v", this.Shardnodepubkey)+",\n")
	}
	if this.Shardnodenewnetworkinfo != nil {
		s = append(s, "Shardnodenewnetworkinfo: "+fmt.Sprintf("%#v", this.Shardnodenewnetworkinfo)+",\n")
	}
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DSLookupSetDSGuardNetworkInfoUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.DSLookupSetDSGuardNetworkInfoUpdate{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DSLookupSetDSGuardNetworkInfoUpdate_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ZilliqaMessage.DSLookupSetDSGuardNetworkInfoUpdate_Data{")
	s = append(s, "Dsepochnumber: "+fmt.Sprintf("%#v", this.Dsepochnumber)+",\n")
	if this.Dsguardpubkey != nil {
		s = append(s, "Dsguardpubkey: "+fmt.Sprintf("%#v", this.Dsguardpubkey)+",\n")
	}
	if this.Dsguardnewnetworkinfo != nil {
		s = append(s, "Dsguardnewnetworkinfo: "+fmt.Sprintf("%#v", this.Dsguardnewnetworkinfo)+",\n")
	}
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeGetGuardNodeNetworkInfoUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.NodeGetGuardNodeNetworkInfoUpdate{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeGetGuardNodeNetworkInfoUpdate_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.NodeGetGuardNodeNetworkInfoUpdate_Data{")
	s = append(s, "Portno: "+fmt.Sprintf("%#v", this.Portno)+",\n")
	s = append(s, "Dsepochnumber: "+fmt.Sprintf("%#v", this.Dsepochnumber)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoDSGuardUpdateStruct) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.ProtoDSGuardUpdateStruct{")
	if this.Dsguardpubkey != nil {
		s = append(s, "Dsguardpubkey: "+fmt.Sprintf("%#v", this.Dsguardpubkey)+",\n")
	}
	if this.Dsguardnewnetworkinfo != nil {
		s = append(s, "Dsguardnewnetworkinfo: "+fmt.Sprintf("%#v", this.Dsguardnewnetworkinfo)+",\n")
	}
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeSetGuardNodeNetworkInfoUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.NodeSetGuardNodeNetworkInfoUpdate{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Lookuppubkey != nil {
		s = append(s, "Lookuppubkey: "+fmt.Sprintf("%#v", this.Lookuppubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeSetGuardNodeNetworkInfoUpdate_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.NodeSetGuardNodeNetworkInfoUpdate_Data{")
	if this.Dsguardupdatestruct != nil {
		s = append(s, "Dsguardupdatestruct: "+fmt.Sprintf("%#v", this.Dsguardupdatestruct)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SeedSetHistoricalDB) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.SeedSetHistoricalDB{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SeedSetHistoricalDB_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.SeedSetHistoricalDB_Data{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeRemoveFromBlacklist) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.NodeRemoveFromBlacklist{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeRemoveFromBlacklist_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.NodeRemoveFromBlacklist_Data{")
	if this.IpAddress != nil {
		s = append(s, "IpAddress: "+fmt.Sprintf("%#v", this.IpAddress)+",\n")
	}
	s = append(s, "Dsepochnumber: "+fmt.Sprintf("%#v", this.Dsepochnumber)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoCosigsRewardsStructure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ZilliqaMessage.ProtoCosigsRewardsStructure{")
	s = append(s, "Epochnumber: "+fmt.Sprintf("%#v", this.Epochnumber)+",\n")
	s = append(s, "Shardid: "+fmt.Sprintf("%#v", this.Shardid)+",\n")
	if this.Blockbase != nil {
		s = append(s, "Blockbase: "+fmt.Sprintf("%#v", this.Blockbase)+",\n")
	}
	if this.Rewards != nil {
		s = append(s, "Rewards: "+fmt.Sprintf("%#v", this.Rewards)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetCosigsRewardsFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupGetCosigsRewardsFromSeed{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetCosigsRewardsFromSeed_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.LookupGetCosigsRewardsFromSeed_Data{")
	s = append(s, "Portno: "+fmt.Sprintf("%#v", this.Portno)+",\n")
	s = append(s, "Epochnumber: "+fmt.Sprintf("%#v", this.Epochnumber)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetCosigsRewardsFromSeed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupSetCosigsRewardsFromSeed{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSetCosigsRewardsFromSeed_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ZilliqaMessage.LookupSetCosigsRewardsFromSeed_Data{")
	if this.Cosigsrewards != nil {
		s = append(s, "Cosigsrewards: "+fmt.Sprintf("%#v", this.Cosigsrewards)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetVCFinalBlockFromL2L) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupGetVCFinalBlockFromL2L{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetVCFinalBlockFromL2L_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.LookupGetVCFinalBlockFromL2L_Data{")
	s = append(s, "Blocknum: "+fmt.Sprintf("%#v", this.Blocknum)+",\n")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetDSBlockFromL2L) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupGetDSBlockFromL2L{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetDSBlockFromL2L_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ZilliqaMessage.LookupGetDSBlockFromL2L_Data{")
	s = append(s, "Blocknum: "+fmt.Sprintf("%#v", this.Blocknum)+",\n")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetMBnForwardTxnFromL2L) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupGetMBnForwardTxnFromL2L{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetMBnForwardTxnFromL2L_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupGetMBnForwardTxnFromL2L_Data{")
	s = append(s, "Blocknum: "+fmt.Sprintf("%#v", this.Blocknum)+",\n")
	s = append(s, "ShardId: "+fmt.Sprintf("%#v", this.ShardId)+",\n")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetPendingTxnFromL2L) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupGetPendingTxnFromL2L{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Pubkey != nil {
		s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupGetPendingTxnFromL2L_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ZilliqaMessage.LookupGetPendingTxnFromL2L_Data{")
	s = append(s, "Blocknum: "+fmt.Sprintf("%#v", this.Blocknum)+",\n")
	s = append(s, "ShardId: "+fmt.Sprintf("%#v", this.ShardId)+",\n")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringZilliqaMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ByteArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ByteArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ByteArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoBlockLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoBlockLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoBlockLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Blockhash) > 0 {
		i -= len(m.Blockhash)
		copy(dAtA[i:], m.Blockhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Blockhash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Oneof4 != nil {
		{
			size := m.Oneof4.Size()
			i -= size
			if _, err := m.Oneof4.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Oneof3 != nil {
		{
			size := m.Oneof3.Size()
			i -= size
			if _, err := m.Oneof3.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Oneof2 != nil {
		{
			size := m.Oneof2.Size()
			i -= size
			if _, err := m.Oneof2.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Oneof1 != nil {
		{
			size := m.Oneof1.Size()
			i -= size
			if _, err := m.Oneof1.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProtoBlockLink_Version) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoBlockLink_Version) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ProtoBlockLink_Index) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoBlockLink_Index) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Index))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ProtoBlockLink_Dsindex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoBlockLink_Dsindex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Dsindex))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *ProtoBlockLink_Blocktype) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoBlockLink_Blocktype) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocktype))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *ProtoBlockBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoBlockBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoBlockBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timestamp != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if m.Cosigs != nil {
		{
			size, err := m.Cosigs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Blockhash) > 0 {
		i -= len(m.Blockhash)
		copy(dAtA[i:], m.Blockhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Blockhash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoBlockBase_CoSignatures) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoBlockBase_CoSignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoBlockBase_CoSignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.B2) > 0 {
		for iNdEx := len(m.B2) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.B2[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.B2)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cs2 != nil {
		{
			size, err := m.Cs2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.B1) > 0 {
		for iNdEx := len(m.B1) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.B1[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.B1)))
		i--
		dAtA[i] = 0x12
	}
	if m.Cs1 != nil {
		{
			size, err := m.Cs1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoBlockHeaderBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoBlockHeaderBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoBlockHeaderBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Prevhash) > 0 {
		i -= len(m.Prevhash)
		copy(dAtA[i:], m.Prevhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Prevhash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Committeehash) > 0 {
		i -= len(m.Committeehash)
		copy(dAtA[i:], m.Committeehash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Committeehash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProtoDSBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoDSBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoDSBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Blockbase != nil {
		{
			size, err := m.Blockbase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoDSBlock_DSBlockHashSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoDSBlock_DSBlockHashSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoDSBlock_DSBlockHashSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reservedfield) > 0 {
		i -= len(m.Reservedfield)
		copy(dAtA[i:], m.Reservedfield)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Reservedfield)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Shardinghash) > 0 {
		i -= len(m.Shardinghash)
		copy(dAtA[i:], m.Shardinghash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Shardinghash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoDSBlock_DSBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoDSBlock_DSBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoDSBlock_DSBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Proposals) > 0 {
		for iNdEx := len(m.Proposals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proposals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.Dsremoved) > 0 {
		for iNdEx := len(m.Dsremoved) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dsremoved[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Hash != nil {
		{
			size, err := m.Hash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Dswinners) > 0 {
		for iNdEx := len(m.Dswinners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dswinners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Swinfo != nil {
		{
			size, err := m.Swinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Gasprice != nil {
		{
			size, err := m.Gasprice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Oneof7 != nil {
		{
			size := m.Oneof7.Size()
			i -= size
			if _, err := m.Oneof7.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Oneof6 != nil {
		{
			size := m.Oneof6.Size()
			i -= size
			if _, err := m.Oneof6.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Leaderpubkey != nil {
		{
			size, err := m.Leaderpubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Prevhash) > 0 {
		i -= len(m.Prevhash)
		copy(dAtA[i:], m.Prevhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Prevhash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Difficulty != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Difficulty))
		i--
		dAtA[i] = 0x18
	}
	if m.Dsdifficulty != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Dsdifficulty))
		i--
		dAtA[i] = 0x10
	}
	if m.Blockheaderbase != nil {
		{
			size, err := m.Blockheaderbase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoDSBlock_DSBlockHeader_Blocknum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoDSBlock_DSBlockHeader_Blocknum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknum))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *ProtoDSBlock_DSBlockHeader_Epochnum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoDSBlock_DSBlockHeader_Epochnum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Epochnum))
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *ProtoDSBlock_DSBlockHeader_PowDSWinners) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoDSBlock_DSBlockHeader_PowDSWinners) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoDSBlock_DSBlockHeader_PowDSWinners) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Val != nil {
		{
			size, err := m.Val.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoDSBlock_DSBlockHeader_Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoDSBlock_DSBlockHeader_Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoDSBlock_DSBlockHeader_Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Value != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProtoDSBlock_DSBlockHeader_Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoDSBlock_DSBlockHeader_Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoDSBlock_DSBlockHeader_Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Minervotes) > 0 {
		for iNdEx := len(m.Minervotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Minervotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Dsvotes) > 0 {
		for iNdEx := len(m.Dsvotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dsvotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Proposalid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Proposalid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProtoDSNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoDSNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoDSNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoDSCommittee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoDSCommittee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoDSCommittee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Dsnodes) > 0 {
		for iNdEx := len(m.Dsnodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dsnodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Version != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProtoMicroBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoMicroBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoMicroBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Blockbase != nil {
		{
			size, err := m.Blockbase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tranhashes) > 0 {
		for iNdEx := len(m.Tranhashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tranhashes[iNdEx])
			copy(dAtA[i:], m.Tranhashes[iNdEx])
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Tranhashes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoMicroBlock_MicroBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoMicroBlock_MicroBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoMicroBlock_MicroBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tranreceipthash) > 0 {
		i -= len(m.Tranreceipthash)
		copy(dAtA[i:], m.Tranreceipthash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Tranreceipthash)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Statedeltahash) > 0 {
		i -= len(m.Statedeltahash)
		copy(dAtA[i:], m.Statedeltahash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Statedeltahash)))
		i--
		dAtA[i] = 0x62
	}
	if m.Dsblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Dsblocknum))
		i--
		dAtA[i] = 0x58
	}
	if m.Minerpubkey != nil {
		{
			size, err := m.Minerpubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Oneof9 != nil {
		{
			size := m.Oneof9.Size()
			i -= size
			if _, err := m.Oneof9.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Txroothash) > 0 {
		i -= len(m.Txroothash)
		copy(dAtA[i:], m.Txroothash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Txroothash)))
		i--
		dAtA[i] = 0x42
	}
	if m.Oneof7 != nil {
		{
			size := m.Oneof7.Size()
			i -= size
			if _, err := m.Oneof7.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Prevhash) > 0 {
		i -= len(m.Prevhash)
		copy(dAtA[i:], m.Prevhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Prevhash)))
		i--
		dAtA[i] = 0x32
	}
	if m.Rewards != nil {
		{
			size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Oneof4 != nil {
		{
			size := m.Oneof4.Size()
			i -= size
			if _, err := m.Oneof4.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Gaslimit != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Gaslimit))
		i--
		dAtA[i] = 0x18
	}
	if m.Oneof2 != nil {
		{
			size := m.Oneof2.Size()
			i -= size
			if _, err := m.Oneof2.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Blockheaderbase != nil {
		{
			size, err := m.Blockheaderbase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoMicroBlock_MicroBlockHeader_Shardid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoMicroBlock_MicroBlockHeader_Shardid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Shardid))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ProtoMicroBlock_MicroBlockHeader_Gasused) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoMicroBlock_MicroBlockHeader_Gasused) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Gasused))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *ProtoMicroBlock_MicroBlockHeader_Epochnum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoMicroBlock_MicroBlockHeader_Epochnum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Epochnum))
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *ProtoMicroBlock_MicroBlockHeader_Numtxs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoMicroBlock_MicroBlockHeader_Numtxs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Numtxs))
	i--
	dAtA[i] = 0x48
	return len(dAtA) - i, nil
}
func (m *ProtoShardingStructure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoShardingStructure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoShardingStructure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Shards) > 0 {
		for iNdEx := len(m.Shards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Version != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProtoShardingStructure_Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoShardingStructure_Member) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoShardingStructure_Member) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Oneof3 != nil {
		{
			size := m.Oneof3.Size()
			i -= size
			if _, err := m.Oneof3.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Peerinfo != nil {
		{
			size, err := m.Peerinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoShardingStructure_Member_Reputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoShardingStructure_Member_Reputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Reputation))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *ProtoShardingStructure_Shard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoShardingStructure_Shard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoShardingStructure_Shard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProtoMbInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoMbInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoMbInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Oneof3 != nil {
		{
			size := m.Oneof3.Size()
			i -= size
			if _, err := m.Oneof3.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Txroot) > 0 {
		i -= len(m.Txroot)
		copy(dAtA[i:], m.Txroot)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Txroot)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Mbhash) > 0 {
		i -= len(m.Mbhash)
		copy(dAtA[i:], m.Mbhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Mbhash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoMbInfo_Shardid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoMbInfo_Shardid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Shardid))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *ProtoTxBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoTxBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoTxBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Blockbase != nil {
		{
			size, err := m.Blockbase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Mbinfos) > 0 {
		for iNdEx := len(m.Mbinfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mbinfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoTxBlock_TxBlockHashSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoTxBlock_TxBlockHashSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoTxBlock_TxBlockHashSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Mbinfohash) > 0 {
		i -= len(m.Mbinfohash)
		copy(dAtA[i:], m.Mbinfohash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Mbinfohash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Statedeltahash) > 0 {
		i -= len(m.Statedeltahash)
		copy(dAtA[i:], m.Statedeltahash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Statedeltahash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stateroothash) > 0 {
		i -= len(m.Stateroothash)
		copy(dAtA[i:], m.Stateroothash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Stateroothash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoTxBlock_TxBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoTxBlock_TxBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoTxBlock_TxBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Oneof10 != nil {
		{
			size := m.Oneof10.Size()
			i -= size
			if _, err := m.Oneof10.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Minerpubkey != nil {
		{
			size, err := m.Minerpubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Oneof8 != nil {
		{
			size := m.Oneof8.Size()
			i -= size
			if _, err := m.Oneof8.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Hash != nil {
		{
			size, err := m.Hash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Oneof6 != nil {
		{
			size := m.Oneof6.Size()
			i -= size
			if _, err := m.Oneof6.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Prevhash) > 0 {
		i -= len(m.Prevhash)
		copy(dAtA[i:], m.Prevhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Prevhash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Rewards != nil {
		{
			size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Oneof3 != nil {
		{
			size := m.Oneof3.Size()
			i -= size
			if _, err := m.Oneof3.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Gaslimit != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Gaslimit))
		i--
		dAtA[i] = 0x10
	}
	if m.Blockheaderbase != nil {
		{
			size, err := m.Blockheaderbase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoTxBlock_TxBlockHeader_Gasused) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoTxBlock_TxBlockHeader_Gasused) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Gasused))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *ProtoTxBlock_TxBlockHeader_Blocknum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoTxBlock_TxBlockHeader_Blocknum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknum))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *ProtoTxBlock_TxBlockHeader_Numtxs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoTxBlock_TxBlockHeader_Numtxs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Numtxs))
	i--
	dAtA[i] = 0x40
	return len(dAtA) - i, nil
}
func (m *ProtoTxBlock_TxBlockHeader_Dsblocknum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoTxBlock_TxBlockHeader_Dsblocknum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Dsblocknum))
	i--
	dAtA[i] = 0x50
	return len(dAtA) - i, nil
}
func (m *ProtoVCBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoVCBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoVCBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Blockbase != nil {
		{
			size, err := m.Blockbase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoVCBlock_VCBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoVCBlock_VCBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoVCBlock_VCBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Prevhash) > 0 {
		i -= len(m.Prevhash)
		copy(dAtA[i:], m.Prevhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Prevhash)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Faultyleaders) > 0 {
		for iNdEx := len(m.Faultyleaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Faultyleaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Oneof7 != nil {
		{
			size := m.Oneof7.Size()
			i -= size
			if _, err := m.Oneof7.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Candidateleaderpubkey != nil {
		{
			size, err := m.Candidateleaderpubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Candidateleadernetworkinfo != nil {
		{
			size, err := m.Candidateleadernetworkinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Oneof4 != nil {
		{
			size := m.Oneof4.Size()
			i -= size
			if _, err := m.Oneof4.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Viewchangeepochno != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Viewchangeepochno))
		i--
		dAtA[i] = 0x18
	}
	if m.Viewchangedsepochno != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Viewchangedsepochno))
		i--
		dAtA[i] = 0x10
	}
	if m.Blockheaderbase != nil {
		{
			size, err := m.Blockheaderbase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoVCBlock_VCBlockHeader_Viewchangestate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoVCBlock_VCBlockHeader_Viewchangestate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Viewchangestate))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *ProtoVCBlock_VCBlockHeader_Vccounter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoVCBlock_VCBlockHeader_Vccounter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Vccounter))
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *ProtoFallbackBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoFallbackBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoFallbackBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Blockbase != nil {
		{
			size, err := m.Blockbase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoFallbackBlock_FallbackBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoFallbackBlock_FallbackBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoFallbackBlock_FallbackBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Prevhash) > 0 {
		i -= len(m.Prevhash)
		copy(dAtA[i:], m.Prevhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Prevhash)))
		i--
		dAtA[i] = 0x52
	}
	if m.Shardid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Shardid))
		i--
		dAtA[i] = 0x48
	}
	if m.Leaderpubkey != nil {
		{
			size, err := m.Leaderpubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Leadernetworkinfo != nil {
		{
			size, err := m.Leadernetworkinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Leaderconsensusid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Leaderconsensusid))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Stateroothash) > 0 {
		i -= len(m.Stateroothash)
		copy(dAtA[i:], m.Stateroothash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Stateroothash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Fallbackstate != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Fallbackstate))
		i--
		dAtA[i] = 0x20
	}
	if m.Fallbackepochno != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Fallbackepochno))
		i--
		dAtA[i] = 0x18
	}
	if m.Fallbackdsepochno != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Fallbackdsepochno))
		i--
		dAtA[i] = 0x10
	}
	if m.Blockheaderbase != nil {
		{
			size, err := m.Blockheaderbase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoDiagnosticDataNodes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoDiagnosticDataNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoDiagnosticDataNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Dscommittee != nil {
		{
			size, err := m.Dscommittee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Shards != nil {
		{
			size, err := m.Shards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoDiagnosticDataCoinbase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoDiagnosticDataCoinbase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoDiagnosticDataCoinbase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Luckydrawwinneraddr) > 0 {
		i -= len(m.Luckydrawwinneraddr)
		copy(dAtA[i:], m.Luckydrawwinneraddr)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Luckydrawwinneraddr)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Luckydrawwinnerkey != nil {
		{
			size, err := m.Luckydrawwinnerkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Balanceleft != nil {
		{
			size, err := m.Balanceleft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Rewardeach != nil {
		{
			size, err := m.Rewardeach.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Nodereward != nil {
		{
			size, err := m.Nodereward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Rewardeachlookup != nil {
		{
			size, err := m.Rewardeachlookup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Lookupreward != nil {
		{
			size, err := m.Lookupreward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Baserewardeach != nil {
		{
			size, err := m.Baserewardeach.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Basereward != nil {
		{
			size, err := m.Basereward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Totalreward != nil {
		{
			size, err := m.Totalreward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Lookupcount != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Lookupcount))
		i--
		dAtA[i] = 0x18
	}
	if m.Sigcount != nil {
		{
			size, err := m.Sigcount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Nodecount != nil {
		{
			size, err := m.Nodecount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoMinerInfoDSComm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoMinerInfoDSComm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoMinerInfoDSComm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Dsnodesejected) > 0 {
		for iNdEx := len(m.Dsnodesejected) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dsnodesejected[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Dsnodes) > 0 {
		for iNdEx := len(m.Dsnodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dsnodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProtoMinerInfoDSComm_Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoMinerInfoDSComm_Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoMinerInfoDSComm_Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoMinerInfoShards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoMinerInfoShards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoMinerInfoShards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Shards) > 0 {
		for iNdEx := len(m.Shards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProtoMinerInfoShards_Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoMinerInfoShards_Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoMinerInfoShards_Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoMinerInfoShards_Shard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoMinerInfoShards_Shard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoMinerInfoShards_Shard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Shardnodes) > 0 {
		for iNdEx := len(m.Shardnodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shardnodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Shardsize != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Shardsize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProtoAccountBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoAccountBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoAccountBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Storageroot) > 0 {
		i -= len(m.Storageroot)
		copy(dAtA[i:], m.Storageroot)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Storageroot)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Codehash) > 0 {
		i -= len(m.Codehash)
		copy(dAtA[i:], m.Codehash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Codehash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Oneof3 != nil {
		{
			size := m.Oneof3.Size()
			i -= size
			if _, err := m.Oneof3.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Balance != nil {
		{
			size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProtoAccountBase_Nonce) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoAccountBase_Nonce) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Nonce))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *ProtoAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Initdata) > 0 {
		i -= len(m.Initdata)
		copy(dAtA[i:], m.Initdata)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Initdata)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Todelete) > 0 {
		for iNdEx := len(m.Todelete) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Todelete[iNdEx])
			copy(dAtA[i:], m.Todelete[iNdEx])
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Todelete[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Storage2) > 0 {
		for iNdEx := len(m.Storage2) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Storage2[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Numbersign {
		i--
		if m.Numbersign {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Storage) > 0 {
		for iNdEx := len(m.Storage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Storage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoAccount_StorageData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoAccount_StorageData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoAccount_StorageData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Keyhash) > 0 {
		i -= len(m.Keyhash)
		copy(dAtA[i:], m.Keyhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Keyhash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoAccount_StorageData2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoAccount_StorageData2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoAccount_StorageData2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoStateIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoStateIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoStateIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Index) > 0 {
		for iNdEx := len(m.Index) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Index[iNdEx])
			copy(dAtA[i:], m.Index[iNdEx])
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Index[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProtoStateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoStateData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoStateData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if m.Ismutable {
		i--
		if m.Ismutable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Vname) > 0 {
		i -= len(m.Vname)
		copy(dAtA[i:], m.Vname)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Vname)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProtoAccountStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoAccountStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoAccountStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProtoAccountStore_AddressAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoAccountStore_AddressAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoAccountStore_AddressAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Oneof2 != nil {
		{
			size := m.Oneof2.Size()
			i -= size
			if _, err := m.Oneof2.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Ipaddress != nil {
		{
			size, err := m.Ipaddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoPeer_Listenporthost) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoPeer_Listenporthost) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Listenporthost))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ProtoPoWSolution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoPoWSolution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoPoWSolution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Govdata != nil {
		{
			size, err := m.Govdata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Gasprice != nil {
		{
			size, err := m.Gasprice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Oneof4 != nil {
		{
			size := m.Oneof4.Size()
			i -= size
			if _, err := m.Oneof4.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Mixhash) > 0 {
		i -= len(m.Mixhash)
		copy(dAtA[i:], m.Mixhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Mixhash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProtoPoWSolution_Lookupid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoPoWSolution_Lookupid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Lookupid))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *ProtoCommittee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoCommittee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoCommittee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProtoShardingStructureWithPoWSolns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoShardingStructureWithPoWSolns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoShardingStructureWithPoWSolns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Shards) > 0 {
		for iNdEx := len(m.Shards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProtoShardingStructureWithPoWSolns_Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoShardingStructureWithPoWSolns_Member) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoShardingStructureWithPoWSolns_Member) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Powsoln != nil {
		{
			size, err := m.Powsoln.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Oneof3 != nil {
		{
			size := m.Oneof3.Size()
			i -= size
			if _, err := m.Oneof3.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Peerinfo != nil {
		{
			size, err := m.Peerinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoShardingStructureWithPoWSolns_Member_Reputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoShardingStructureWithPoWSolns_Member_Reputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Reputation))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *ProtoShardingStructureWithPoWSolns_Shard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoShardingStructureWithPoWSolns_Shard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoShardingStructureWithPoWSolns_Shard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProtoDSWinnerPoW) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoDSWinnerPoW) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoDSWinnerPoW) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Powsoln != nil {
		{
			size, err := m.Powsoln.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoTransactionCoreInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoTransactionCoreInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoTransactionCoreInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Oneof9 != nil {
		{
			size := m.Oneof9.Size()
			i -= size
			if _, err := m.Oneof9.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Oneof8 != nil {
		{
			size := m.Oneof8.Size()
			i -= size
			if _, err := m.Oneof8.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Gaslimit != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Gaslimit))
		i--
		dAtA[i] = 0x38
	}
	if m.Gasprice != nil {
		{
			size, err := m.Gasprice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Senderpubkey != nil {
		{
			size, err := m.Senderpubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Toaddr) > 0 {
		i -= len(m.Toaddr)
		copy(dAtA[i:], m.Toaddr)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Toaddr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Oneof2 != nil {
		{
			size := m.Oneof2.Size()
			i -= size
			if _, err := m.Oneof2.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Version != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProtoTransactionCoreInfo_Nonce) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoTransactionCoreInfo_Nonce) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Nonce))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ProtoTransactionCoreInfo_Code) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoTransactionCoreInfo_Code) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Code != nil {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ProtoTransactionCoreInfo_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoTransactionCoreInfo_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Data != nil {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ProtoTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tranid) > 0 {
		i -= len(m.Tranid)
		copy(dAtA[i:], m.Tranid)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Tranid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoTxnFileOffset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoTxnFileOffset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoTxnFileOffset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Offsetinfile) > 0 {
		dAtA70 := make([]byte, len(m.Offsetinfile)*10)
		var j69 int
		for _, num := range m.Offsetinfile {
			for num >= 1<<7 {
				dAtA70[j69] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j69++
			}
			dAtA70[j69] = uint8(num)
			j69++
		}
		i -= j69
		copy(dAtA[i:], dAtA70[:j69])
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(j69))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoTransactionArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoTransactionArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoTransactionArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProtoTransactionReceipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoTransactionReceipt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoTransactionReceipt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Oneof2 != nil {
		{
			size := m.Oneof2.Size()
			i -= size
			if _, err := m.Oneof2.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Receipt) > 0 {
		i -= len(m.Receipt)
		copy(dAtA[i:], m.Receipt)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Receipt)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoTransactionReceipt_Cumgas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoTransactionReceipt_Cumgas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Cumgas))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ProtoTransactionWithReceipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoTransactionWithReceipt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoTransactionWithReceipt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Receipt != nil {
		{
			size, err := m.Receipt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoBloomFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoBloomFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoBloomFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Probability != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Probability))))
		i--
		dAtA[i] = 0x41
	}
	if m.Randomseed != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Randomseed))
		i--
		dAtA[i] = 0x38
	}
	if m.Insertedelementcount != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Insertedelementcount))
		i--
		dAtA[i] = 0x30
	}
	if m.Projectedelementcount != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Projectedelementcount))
		i--
		dAtA[i] = 0x28
	}
	if m.Tablesize != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Tablesize))
		i--
		dAtA[i] = 0x20
	}
	if m.Saltcount != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Saltcount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Bittable) > 0 {
		i -= len(m.Bittable)
		copy(dAtA[i:], m.Bittable)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Bittable)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Salt) > 0 {
		dAtA74 := make([]byte, len(m.Salt)*10)
		var j73 int
		for _, num := range m.Salt {
			for num >= 1<<7 {
				dAtA74[j73] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j73++
			}
			dAtA74[j73] = uint8(num)
			j73++
		}
		i -= j73
		copy(dAtA[i:], dAtA74[:j73])
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(j73))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoSWInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoSWInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoSWInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Scillacommit != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Scillacommit))
		i--
		dAtA[i] = 0x50
	}
	if m.Scillaupgradeds != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Scillaupgradeds))
		i--
		dAtA[i] = 0x48
	}
	if m.Scillafixversion != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Scillafixversion))
		i--
		dAtA[i] = 0x40
	}
	if m.Scillaminorversion != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Scillaminorversion))
		i--
		dAtA[i] = 0x38
	}
	if m.Scillamajorversion != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Scillamajorversion))
		i--
		dAtA[i] = 0x30
	}
	if m.Zilliqacommit != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Zilliqacommit))
		i--
		dAtA[i] = 0x28
	}
	if m.Zilliqaupgradeds != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Zilliqaupgradeds))
		i--
		dAtA[i] = 0x20
	}
	if m.Zilliqafixversion != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Zilliqafixversion))
		i--
		dAtA[i] = 0x18
	}
	if m.Zilliqaminorversion != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Zilliqaminorversion))
		i--
		dAtA[i] = 0x10
	}
	if m.Zilliqamajorversion != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Zilliqamajorversion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProtoFallbackBlockWShardingStructure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoFallbackBlockWShardingStructure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoFallbackBlockWShardingStructure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sharding != nil {
		{
			size, err := m.Sharding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Fallbackblock != nil {
		{
			size, err := m.Fallbackblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoSingleDirectoryBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoSingleDirectoryBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoSingleDirectoryBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Directoryblock != nil {
		{
			size := m.Directoryblock.Size()
			i -= size
			if _, err := m.Directoryblock.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProtoSingleDirectoryBlock_Dsblock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoSingleDirectoryBlock_Dsblock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Dsblock != nil {
		{
			size, err := m.Dsblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ProtoSingleDirectoryBlock_Vcblock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoSingleDirectoryBlock_Vcblock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vcblock != nil {
		{
			size, err := m.Vcblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ProtoSingleDirectoryBlock_Fallbackblockwshard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoSingleDirectoryBlock_Fallbackblockwshard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Fallbackblockwshard != nil {
		{
			size, err := m.Fallbackblockwshard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PMHello) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PMHello) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PMHello) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PMHello_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PMHello_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PMHello_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Listenport != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Listenport))
		i--
		dAtA[i] = 0x10
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GovernanceData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovernanceData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovernanceData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Votevalue != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Votevalue))
		i--
		dAtA[i] = 0x10
	}
	if m.Proposalid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Proposalid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DSPoWSubmission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSPoWSubmission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSPoWSubmission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DSPoWSubmission_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSPoWSubmission_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSPoWSubmission_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Govdata != nil {
		{
			size, err := m.Govdata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Gasprice != nil {
		{
			size, err := m.Gasprice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Lookupid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Lookupid))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Mixhash) > 0 {
		i -= len(m.Mixhash)
		copy(dAtA[i:], m.Mixhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Mixhash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Resultinghash) > 0 {
		i -= len(m.Resultinghash)
		copy(dAtA[i:], m.Resultinghash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Resultinghash)))
		i--
		dAtA[i] = 0x32
	}
	if m.Nonce != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x28
	}
	if m.SubmitterpubKey != nil {
		{
			size, err := m.SubmitterpubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Submitterpeer != nil {
		{
			size, err := m.Submitterpeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Difficultylevel != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Difficultylevel))
		i--
		dAtA[i] = 0x10
	}
	if m.Blocknumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DSPoWPacketSubmission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSPoWPacketSubmission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSPoWPacketSubmission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DSPoWPacketSubmission_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSPoWPacketSubmission_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSPoWPacketSubmission_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DsPowSubmissions) > 0 {
		for iNdEx := len(m.DsPowSubmissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DsPowSubmissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DSMicroBlockSubmission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSMicroBlockSubmission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSMicroBlockSubmission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DSMicroBlockSubmission_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSMicroBlockSubmission_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSMicroBlockSubmission_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Statedeltas) > 0 {
		for iNdEx := len(m.Statedeltas) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Statedeltas[iNdEx])
			copy(dAtA[i:], m.Statedeltas[iNdEx])
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Statedeltas[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Microblocks) > 0 {
		for iNdEx := len(m.Microblocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Microblocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Epochnumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Epochnumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Microblocktype != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Microblocktype))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DSDSBlockAnnouncement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSDSBlockAnnouncement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSDSBlockAnnouncement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Dswinnerpows) > 0 {
		for iNdEx := len(m.Dswinnerpows) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dswinnerpows[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Sharding != nil {
		{
			size, err := m.Sharding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Dsblock != nil {
		{
			size, err := m.Dsblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DSFinalBlockAnnouncement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSFinalBlockAnnouncement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSFinalBlockAnnouncement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Microblock != nil {
		{
			size, err := m.Microblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Txblock != nil {
		{
			size, err := m.Txblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DSVCBlockAnnouncement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSVCBlockAnnouncement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSVCBlockAnnouncement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Vcblock != nil {
		{
			size, err := m.Vcblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DSMissingMicroBlocksErrorMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSMissingMicroBlocksErrorMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSMissingMicroBlocksErrorMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Listenport != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Listenport))
		i--
		dAtA[i] = 0x18
	}
	if m.Epochnum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Epochnum))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Mbhashes) > 0 {
		for iNdEx := len(m.Mbhashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Mbhashes[iNdEx])
			copy(dAtA[i:], m.Mbhashes[iNdEx])
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Mbhashes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NodeDSBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeDSBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeDSBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sharding != nil {
		{
			size, err := m.Sharding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Vcblocks) > 0 {
		for iNdEx := len(m.Vcblocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vcblocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Dsblock != nil {
		{
			size, err := m.Dsblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Shardid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Shardid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeFinalBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeFinalBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeFinalBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Shardids) > 0 {
		dAtA103 := make([]byte, len(m.Shardids)*10)
		var j102 int
		for _, num := range m.Shardids {
			for num >= 1<<7 {
				dAtA103[j102] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j102++
			}
			dAtA103[j102] = uint8(num)
			j102++
		}
		i -= j102
		copy(dAtA[i:], dAtA103[:j102])
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(j102))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Statedelta) > 0 {
		i -= len(m.Statedelta)
		copy(dAtA[i:], m.Statedelta)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Statedelta)))
		i--
		dAtA[i] = 0x22
	}
	if m.Txblock != nil {
		{
			size, err := m.Txblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Consensusid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Consensusid))
		i--
		dAtA[i] = 0x10
	}
	if m.Dsblocknumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Dsblocknumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeVCFinalBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeVCFinalBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeVCFinalBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vcblocks) > 0 {
		for iNdEx := len(m.Vcblocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vcblocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Statedelta) > 0 {
		i -= len(m.Statedelta)
		copy(dAtA[i:], m.Statedelta)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Statedelta)))
		i--
		dAtA[i] = 0x22
	}
	if m.Txblock != nil {
		{
			size, err := m.Txblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Consensusid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Consensusid))
		i--
		dAtA[i] = 0x10
	}
	if m.Dsblocknumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Dsblocknumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeMBnForwardTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeMBnForwardTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeMBnForwardTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Txnswithreceipt) > 0 {
		for iNdEx := len(m.Txnswithreceipt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txnswithreceipt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Microblock != nil {
		{
			size, err := m.Microblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodePendingTxn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodePendingTxn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodePendingTxn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodePendingTxn_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodePendingTxn_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodePendingTxn_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Shardid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Shardid))
		i--
		dAtA[i] = 0x18
	}
	if m.Epochnumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Epochnumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hashcodepair) > 0 {
		for iNdEx := len(m.Hashcodepair) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hashcodepair[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NodePendingTxn_Data_Pair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodePendingTxn_Data_Pair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodePendingTxn_Data_Pair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Txnhash) > 0 {
		i -= len(m.Txnhash)
		copy(dAtA[i:], m.Txnhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Txnhash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeVCBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeVCBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeVCBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Vcblock != nil {
		{
			size, err := m.Vcblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeForwardTxnBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeForwardTxnBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeForwardTxnBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Shardid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Shardid))
		i--
		dAtA[i] = 0x18
	}
	if m.Dsblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Dsblocknum))
		i--
		dAtA[i] = 0x10
	}
	if m.Epochnumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Epochnumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeMicroBlockAnnouncement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeMicroBlockAnnouncement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeMicroBlockAnnouncement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Microblock != nil {
		{
			size, err := m.Microblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeFallbackBlockAnnouncement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeFallbackBlockAnnouncement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeFallbackBlockAnnouncement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Fallbackblock != nil {
		{
			size, err := m.Fallbackblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeFallbackBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeFallbackBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeFallbackBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Fallbackblock != nil {
		{
			size, err := m.Fallbackblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeMissingTxnsErrorMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeMissingTxnsErrorMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeMissingTxnsErrorMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Listenport != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Listenport))
		i--
		dAtA[i] = 0x18
	}
	if m.Epochnum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Epochnum))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Txnhashes) > 0 {
		for iNdEx := len(m.Txnhashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Txnhashes[iNdEx])
			copy(dAtA[i:], m.Txnhashes[iNdEx])
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Txnhashes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetSeedPeers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetSeedPeers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetSeedPeers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Listenport != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Listenport))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetSeedPeers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetSeedPeers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetSeedPeers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Candidateseeds) > 0 {
		for iNdEx := len(m.Candidateseeds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Candidateseeds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetDSInfoFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetDSInfoFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetDSInfoFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Initialds {
		i--
		if m.Initialds {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Listenport != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Listenport))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetDSInfoFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetDSInfoFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetDSInfoFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Initialds {
		i--
		if m.Initialds {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Dscommittee != nil {
		{
			size, err := m.Dscommittee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetDSBlockFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetDSBlockFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetDSBlockFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Includeminerinfo {
		i--
		if m.Includeminerinfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Listenport != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Listenport))
		i--
		dAtA[i] = 0x18
	}
	if m.Highblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Highblocknum))
		i--
		dAtA[i] = 0x10
	}
	if m.Lowblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Lowblocknum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetDSBlockFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetDSBlockFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetDSBlockFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetDSBlockFromSeed_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetDSBlockFromSeed_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetDSBlockFromSeed_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Dsblocks) > 0 {
		for iNdEx := len(m.Dsblocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dsblocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Highblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Highblocknum))
		i--
		dAtA[i] = 0x10
	}
	if m.Lowblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Lowblocknum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetMinerInfoFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetMinerInfoFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetMinerInfoFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetMinerInfoFromSeed_MinerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetMinerInfoFromSeed_MinerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetMinerInfoFromSeed_MinerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Minerinfoshards != nil {
		{
			size, err := m.Minerinfoshards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Minerinfodscomm != nil {
		{
			size, err := m.Minerinfodscomm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetMinerInfoFromSeed_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetMinerInfoFromSeed_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetMinerInfoFromSeed_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Minerinfoperds) > 0 {
		keysForMinerinfoperds := make([]uint64, 0, len(m.Minerinfoperds))
		for k := range m.Minerinfoperds {
			keysForMinerinfoperds = append(keysForMinerinfoperds, uint64(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint64s(keysForMinerinfoperds)
		for iNdEx := len(keysForMinerinfoperds) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Minerinfoperds[uint64(keysForMinerinfoperds[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(keysForMinerinfoperds[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetTxBlockFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetTxBlockFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetTxBlockFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Listenport != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Listenport))
		i--
		dAtA[i] = 0x18
	}
	if m.Highblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Highblocknum))
		i--
		dAtA[i] = 0x10
	}
	if m.Lowblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Lowblocknum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetTxBlockFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetTxBlockFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetTxBlockFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetTxBlockFromSeed_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetTxBlockFromSeed_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetTxBlockFromSeed_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Txblocks) > 0 {
		for iNdEx := len(m.Txblocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txblocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Highblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Highblocknum))
		i--
		dAtA[i] = 0x10
	}
	if m.Lowblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Lowblocknum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetStateDeltaFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetStateDeltaFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetStateDeltaFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Listenport != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Listenport))
		i--
		dAtA[i] = 0x10
	}
	if m.Blocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetStateDeltasFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetStateDeltasFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetStateDeltasFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Listenport != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Listenport))
		i--
		dAtA[i] = 0x18
	}
	if m.Highblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Highblocknum))
		i--
		dAtA[i] = 0x10
	}
	if m.Lowblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Lowblocknum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetStateDeltaFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetStateDeltaFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetStateDeltaFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetStateDeltaFromSeed_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetStateDeltaFromSeed_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetStateDeltaFromSeed_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Statedelta) > 0 {
		i -= len(m.Statedelta)
		copy(dAtA[i:], m.Statedelta)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Statedelta)))
		i--
		dAtA[i] = 0x12
	}
	if m.Blocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetStateDeltasFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetStateDeltasFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetStateDeltasFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetStateDeltasFromSeed_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetStateDeltasFromSeed_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetStateDeltasFromSeed_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Statedeltas) > 0 {
		for iNdEx := len(m.Statedeltas) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Statedeltas[iNdEx])
			copy(dAtA[i:], m.Statedeltas[iNdEx])
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Statedeltas[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Highblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Highblocknum))
		i--
		dAtA[i] = 0x10
	}
	if m.Lowblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Lowblocknum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetStateFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetStateFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetStateFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Listenport != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Listenport))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetStateFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetStateFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetStateFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Accountstore != nil {
		{
			size, err := m.Accountstore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetLookupOffline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetLookupOffline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetLookupOffline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetLookupOffline_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetLookupOffline_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetLookupOffline_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Listenport != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Listenport))
		i--
		dAtA[i] = 0x10
	}
	if m.Msgtype != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Msgtype))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetLookupOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetLookupOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetLookupOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetLookupOnline_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetLookupOnline_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetLookupOnline_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Listenport != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Listenport))
		i--
		dAtA[i] = 0x10
	}
	if m.Msgtype != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Msgtype))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetOfflineLookups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetOfflineLookups) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetOfflineLookups) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Listenport != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Listenport))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetOfflineLookups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetOfflineLookups) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetOfflineLookups) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LookupRaiseStartPoW) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupRaiseStartPoW) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupRaiseStartPoW) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupRaiseStartPoW_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupRaiseStartPoW_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupRaiseStartPoW_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Blocknumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Msgtype != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Msgtype))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetStartPoWFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetStartPoWFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetStartPoWFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetStartPoWFromSeed_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetStartPoWFromSeed_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetStartPoWFromSeed_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Blocknumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Listenport != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Listenport))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetStartPoWFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetStartPoWFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetStartPoWFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Blocknumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetShardsFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetShardsFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetShardsFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Listenport != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Listenport))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetShardsFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetShardsFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetShardsFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Sharding != nil {
		{
			size, err := m.Sharding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetMicroBlockFromLookup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetMicroBlockFromLookup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetMicroBlockFromLookup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Mbhashes) > 0 {
		for iNdEx := len(m.Mbhashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Mbhashes[iNdEx])
			copy(dAtA[i:], m.Mbhashes[iNdEx])
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Mbhashes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Portno != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Portno))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetMicroBlockFromLookup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetMicroBlockFromLookup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetMicroBlockFromLookup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Microblocks) > 0 {
		for iNdEx := len(m.Microblocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Microblocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetMicroBlockFromL2L) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetMicroBlockFromL2L) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetMicroBlockFromL2L) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetMicroBlockFromL2L_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetMicroBlockFromL2L_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetMicroBlockFromL2L_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Mbhashes) > 0 {
		for iNdEx := len(m.Mbhashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Mbhashes[iNdEx])
			copy(dAtA[i:], m.Mbhashes[iNdEx])
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Mbhashes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Portno != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Portno))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupForwardTxnsFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupForwardTxnsFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupForwardTxnsFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Dstransactions != nil {
		{
			size, err := m.Dstransactions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Shardtransactions != nil {
		{
			size, err := m.Shardtransactions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetTxnsFromLookup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetTxnsFromLookup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetTxnsFromLookup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Txnhashes) > 0 {
		for iNdEx := len(m.Txnhashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Txnhashes[iNdEx])
			copy(dAtA[i:], m.Txnhashes[iNdEx])
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Txnhashes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Mbhash) > 0 {
		i -= len(m.Mbhash)
		copy(dAtA[i:], m.Mbhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Mbhash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Portno != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Portno))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetTxnsFromL2L) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetTxnsFromL2L) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetTxnsFromL2L) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetTxnsFromL2L_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetTxnsFromL2L_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetTxnsFromL2L_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Txnhashes) > 0 {
		for iNdEx := len(m.Txnhashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Txnhashes[iNdEx])
			copy(dAtA[i:], m.Txnhashes[iNdEx])
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Txnhashes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Mbhash) > 0 {
		i -= len(m.Mbhash)
		copy(dAtA[i:], m.Mbhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Mbhash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Portno != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Portno))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetTxnsFromLookup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetTxnsFromLookup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetTxnsFromLookup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Mbhash) > 0 {
		i -= len(m.Mbhash)
		copy(dAtA[i:], m.Mbhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Mbhash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetDirectoryBlocksFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetDirectoryBlocksFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetDirectoryBlocksFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Includeminerinfo {
		i--
		if m.Includeminerinfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Indexnum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Indexnum))
		i--
		dAtA[i] = 0x10
	}
	if m.Portno != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Portno))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetDirectoryBlocksFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetDirectoryBlocksFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetDirectoryBlocksFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetDirectoryBlocksFromSeed_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetDirectoryBlocksFromSeed_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetDirectoryBlocksFromSeed_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Dirblocks) > 0 {
		for iNdEx := len(m.Dirblocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dirblocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Indexnum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Indexnum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusAnnouncement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusAnnouncement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusAnnouncement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Finalsignature != nil {
		{
			size, err := m.Finalsignature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Announcement != nil {
		{
			size := m.Announcement.Size()
			i -= size
			if _, err := m.Announcement.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Consensusinfo != nil {
		{
			size, err := m.Consensusinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusAnnouncement_Dsblock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusAnnouncement_Dsblock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Dsblock != nil {
		{
			size, err := m.Dsblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ConsensusAnnouncement_Microblock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusAnnouncement_Microblock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Microblock != nil {
		{
			size, err := m.Microblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ConsensusAnnouncement_Finalblock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusAnnouncement_Finalblock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Finalblock != nil {
		{
			size, err := m.Finalblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ConsensusAnnouncement_Vcblock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusAnnouncement_Vcblock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vcblock != nil {
		{
			size, err := m.Vcblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ConsensusAnnouncement_Fallbackblock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusAnnouncement_Fallbackblock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Fallbackblock != nil {
		{
			size, err := m.Fallbackblock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ConsensusAnnouncement_ConsensusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusAnnouncement_ConsensusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusAnnouncement_ConsensusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Leaderid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Leaderid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Blockhash) > 0 {
		i -= len(m.Blockhash)
		copy(dAtA[i:], m.Blockhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Blockhash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Blocknumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Consensusid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Consensusid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Consensusinfo != nil {
		{
			size, err := m.Consensusinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusCommit_ConsensusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusCommit_ConsensusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusCommit_ConsensusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Commitpointhash != nil {
		{
			size, err := m.Commitpointhash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Commitpoint != nil {
		{
			size, err := m.Commitpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Backupid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Backupid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Blockhash) > 0 {
		i -= len(m.Blockhash)
		copy(dAtA[i:], m.Blockhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Blockhash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Blocknumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Consensusid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Consensusid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Consensusinfo != nil {
		{
			size, err := m.Consensusinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusChallenge_SubsetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusChallenge_SubsetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusChallenge_SubsetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Challenge != nil {
		{
			size, err := m.Challenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Aggregatedkey != nil {
		{
			size, err := m.Aggregatedkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Aggregatedcommit != nil {
		{
			size, err := m.Aggregatedcommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusChallenge_ConsensusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusChallenge_ConsensusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusChallenge_ConsensusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Subsetinfo) > 0 {
		for iNdEx := len(m.Subsetinfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subsetinfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Leaderid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Leaderid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Blockhash) > 0 {
		i -= len(m.Blockhash)
		copy(dAtA[i:], m.Blockhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Blockhash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Blocknumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Consensusid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Consensusid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Consensusinfo != nil {
		{
			size, err := m.Consensusinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusResponse_SubsetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusResponse_SubsetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusResponse_SubsetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusResponse_ConsensusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusResponse_ConsensusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusResponse_ConsensusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Subsetinfo) > 0 {
		for iNdEx := len(m.Subsetinfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subsetinfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Backupid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Backupid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Blockhash) > 0 {
		i -= len(m.Blockhash)
		copy(dAtA[i:], m.Blockhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Blockhash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Blocknumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Consensusid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Consensusid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusCollectiveSig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusCollectiveSig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusCollectiveSig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Consensusinfo != nil {
		{
			size, err := m.Consensusinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusCollectiveSig_ConsensusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusCollectiveSig_ConsensusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusCollectiveSig_ConsensusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Bitmap) > 0 {
		for iNdEx := len(m.Bitmap) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.Bitmap[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Bitmap)))
		i--
		dAtA[i] = 0x32
	}
	if m.Collectivesig != nil {
		{
			size, err := m.Collectivesig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Leaderid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Leaderid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Blockhash) > 0 {
		i -= len(m.Blockhash)
		copy(dAtA[i:], m.Blockhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Blockhash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Blocknumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Consensusid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Consensusid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusCommitFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusCommitFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusCommitFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Consensusinfo != nil {
		{
			size, err := m.Consensusinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusCommitFailure_ConsensusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusCommitFailure_ConsensusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusCommitFailure_ConsensusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Errormsg) > 0 {
		i -= len(m.Errormsg)
		copy(dAtA[i:], m.Errormsg)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Errormsg)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Backupid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Backupid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Blockhash) > 0 {
		i -= len(m.Blockhash)
		copy(dAtA[i:], m.Blockhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Blockhash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Blocknumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Consensusid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Consensusid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusConsensusFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusConsensusFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusConsensusFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Consensusinfo != nil {
		{
			size, err := m.Consensusinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusConsensusFailure_ConsensusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusConsensusFailure_ConsensusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusConsensusFailure_ConsensusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Leaderid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Leaderid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Blockhash) > 0 {
		i -= len(m.Blockhash)
		copy(dAtA[i:], m.Blockhash)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Blockhash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Blocknumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Consensusid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Consensusid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetDSTxBlockFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetDSTxBlockFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetDSTxBlockFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Listenport != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Listenport))
		i--
		dAtA[i] = 0x28
	}
	if m.Txhighblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Txhighblocknum))
		i--
		dAtA[i] = 0x20
	}
	if m.Txlowblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Txlowblocknum))
		i--
		dAtA[i] = 0x18
	}
	if m.Dshighblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Dshighblocknum))
		i--
		dAtA[i] = 0x10
	}
	if m.Dslowblocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Dslowblocknum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VCNodeSetDSTxBlockFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VCNodeSetDSTxBlockFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VCNodeSetDSTxBlockFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VCNodeSetDSTxBlockFromSeed_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VCNodeSetDSTxBlockFromSeed_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VCNodeSetDSTxBlockFromSeed_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Txblocks) > 0 {
		for iNdEx := len(m.Txblocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txblocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Dsblocks) > 0 {
		for iNdEx := len(m.Dsblocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dsblocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NodeSetShardNodeNetworkInfoUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSetShardNodeNetworkInfoUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeSetShardNodeNetworkInfoUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeSetShardNodeNetworkInfoUpdate_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSetShardNodeNetworkInfoUpdate_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeSetShardNodeNetworkInfoUpdate_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timestamp != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.Shardnodenewnetworkinfo != nil {
		{
			size, err := m.Shardnodenewnetworkinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Shardnodepubkey != nil {
		{
			size, err := m.Shardnodepubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Dsepochnumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Dsepochnumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DSLookupSetDSGuardNetworkInfoUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSLookupSetDSGuardNetworkInfoUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSLookupSetDSGuardNetworkInfoUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DSLookupSetDSGuardNetworkInfoUpdate_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSLookupSetDSGuardNetworkInfoUpdate_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSLookupSetDSGuardNetworkInfoUpdate_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timestamp != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.Dsguardnewnetworkinfo != nil {
		{
			size, err := m.Dsguardnewnetworkinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Dsguardpubkey != nil {
		{
			size, err := m.Dsguardpubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Dsepochnumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Dsepochnumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeGetGuardNodeNetworkInfoUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeGetGuardNodeNetworkInfoUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeGetGuardNodeNetworkInfoUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeGetGuardNodeNetworkInfoUpdate_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeGetGuardNodeNetworkInfoUpdate_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeGetGuardNodeNetworkInfoUpdate_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Dsepochnumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Dsepochnumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Portno != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Portno))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProtoDSGuardUpdateStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoDSGuardUpdateStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoDSGuardUpdateStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timestamp != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if m.Dsguardnewnetworkinfo != nil {
		{
			size, err := m.Dsguardnewnetworkinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Dsguardpubkey != nil {
		{
			size, err := m.Dsguardpubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeSetGuardNodeNetworkInfoUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSetGuardNodeNetworkInfoUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeSetGuardNodeNetworkInfoUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Lookuppubkey != nil {
		{
			size, err := m.Lookuppubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeSetGuardNodeNetworkInfoUpdate_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSetGuardNodeNetworkInfoUpdate_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeSetGuardNodeNetworkInfoUpdate_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Dsguardupdatestruct) > 0 {
		for iNdEx := len(m.Dsguardupdatestruct) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dsguardupdatestruct[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SeedSetHistoricalDB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeedSetHistoricalDB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeedSetHistoricalDB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeedSetHistoricalDB_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeedSetHistoricalDB_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeedSetHistoricalDB_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeRemoveFromBlacklist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeRemoveFromBlacklist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeRemoveFromBlacklist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeRemoveFromBlacklist_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeRemoveFromBlacklist_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeRemoveFromBlacklist_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Dsepochnumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Dsepochnumber))
		i--
		dAtA[i] = 0x10
	}
	if m.IpAddress != nil {
		{
			size, err := m.IpAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoCosigsRewardsStructure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoCosigsRewardsStructure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoCosigsRewardsStructure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rewards != nil {
		{
			size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Blockbase != nil {
		{
			size, err := m.Blockbase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Shardid != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Shardid))
		i--
		dAtA[i] = 0x10
	}
	if m.Epochnumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Epochnumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetCosigsRewardsFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetCosigsRewardsFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetCosigsRewardsFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetCosigsRewardsFromSeed_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetCosigsRewardsFromSeed_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetCosigsRewardsFromSeed_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Epochnumber != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Epochnumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Portno != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Portno))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetCosigsRewardsFromSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetCosigsRewardsFromSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetCosigsRewardsFromSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupSetCosigsRewardsFromSeed_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSetCosigsRewardsFromSeed_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSetCosigsRewardsFromSeed_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cosigsrewards) > 0 {
		for iNdEx := len(m.Cosigsrewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cosigsrewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetVCFinalBlockFromL2L) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetVCFinalBlockFromL2L) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetVCFinalBlockFromL2L) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetVCFinalBlockFromL2L_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetVCFinalBlockFromL2L_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetVCFinalBlockFromL2L_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Blocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetDSBlockFromL2L) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetDSBlockFromL2L) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetDSBlockFromL2L) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetDSBlockFromL2L_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetDSBlockFromL2L_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetDSBlockFromL2L_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Blocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetMBnForwardTxnFromL2L) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetMBnForwardTxnFromL2L) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetMBnForwardTxnFromL2L) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetMBnForwardTxnFromL2L_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetMBnForwardTxnFromL2L_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetMBnForwardTxnFromL2L_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ShardId != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.ShardId))
		i--
		dAtA[i] = 0x10
	}
	if m.Blocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetPendingTxnFromL2L) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetPendingTxnFromL2L) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetPendingTxnFromL2L) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupGetPendingTxnFromL2L_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupGetPendingTxnFromL2L_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupGetPendingTxnFromL2L_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZilliqaMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ShardId != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.ShardId))
		i--
		dAtA[i] = 0x10
	}
	if m.Blocknum != 0 {
		i = encodeVarintZilliqaMessage(dAtA, i, uint64(m.Blocknum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintZilliqaMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovZilliqaMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedByteArray(r randyZilliqaMessage, easy bool) *ByteArray {
	this := &ByteArray{}
	v1 := r.Intn(100)
	this.Data = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedProtoBlockLink(r randyZilliqaMessage, easy bool) *ProtoBlockLink {
	this := &ProtoBlockLink{}
	oneofNumber_Oneof1 := []int32{1}[r.Intn(1)]
	switch oneofNumber_Oneof1 {
	case 1:
		this.Oneof1 = NewPopulatedProtoBlockLink_Version(r, easy)
	}
	oneofNumber_Oneof2 := []int32{2}[r.Intn(1)]
	switch oneofNumber_Oneof2 {
	case 2:
		this.Oneof2 = NewPopulatedProtoBlockLink_Index(r, easy)
	}
	oneofNumber_Oneof3 := []int32{3}[r.Intn(1)]
	switch oneofNumber_Oneof3 {
	case 3:
		this.Oneof3 = NewPopulatedProtoBlockLink_Dsindex(r, easy)
	}
	oneofNumber_Oneof4 := []int32{4}[r.Intn(1)]
	switch oneofNumber_Oneof4 {
	case 4:
		this.Oneof4 = NewPopulatedProtoBlockLink_Blocktype(r, easy)
	}
	v2 := r.Intn(100)
	this.Blockhash = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Blockhash[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 6)
	}
	return this
}

func NewPopulatedProtoBlockLink_Version(r randyZilliqaMessage, easy bool) *ProtoBlockLink_Version {
	this := &ProtoBlockLink_Version{}
	this.Version = uint32(r.Uint32())
	return this
}
func NewPopulatedProtoBlockLink_Index(r randyZilliqaMessage, easy bool) *ProtoBlockLink_Index {
	this := &ProtoBlockLink_Index{}
	this.Index = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedProtoBlockLink_Dsindex(r randyZilliqaMessage, easy bool) *ProtoBlockLink_Dsindex {
	this := &ProtoBlockLink_Dsindex{}
	this.Dsindex = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedProtoBlockLink_Blocktype(r randyZilliqaMessage, easy bool) *ProtoBlockLink_Blocktype {
	this := &ProtoBlockLink_Blocktype{}
	this.Blocktype = uint32(r.Uint32())
	return this
}
func NewPopulatedProtoBlockBase(r randyZilliqaMessage, easy bool) *ProtoBlockBase {
	this := &ProtoBlockBase{}
	v3 := r.Intn(100)
	this.Blockhash = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Blockhash[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		this.Cosigs = NewPopulatedProtoBlockBase_CoSignatures(r, easy)
	}
	this.Timestamp = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedProtoBlockBase_CoSignatures(r randyZilliqaMessage, easy bool) *ProtoBlockBase_CoSignatures {
	this := &ProtoBlockBase_CoSignatures{}
	if r.Intn(5) != 0 {
		this.Cs1 = NewPopulatedByteArray(r, easy)
	}
	v4 := r.Intn(10)
	this.B1 = make([]bool, v4)
	for i := 0; i < v4; i++ {
		this.B1[i] = bool(bool(r.Intn(2) == 0))
	}
	if r.Intn(5) != 0 {
		this.Cs2 = NewPopulatedByteArray(r, easy)
	}
	v5 := r.Intn(10)
	this.B2 = make([]bool, v5)
	for i := 0; i < v5; i++ {
		this.B2[i] = bool(bool(r.Intn(2) == 0))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 5)
	}
	return this
}

func NewPopulatedProtoBlockHeaderBase(r randyZilliqaMessage, easy bool) *ProtoBlockHeaderBase {
	this := &ProtoBlockHeaderBase{}
	this.Version = uint32(r.Uint32())
	v6 := r.Intn(100)
	this.Committeehash = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.Committeehash[i] = byte(r.Intn(256))
	}
	v7 := r.Intn(100)
	this.Prevhash = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.Prevhash[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedProtoDSBlock(r randyZilliqaMessage, easy bool) *ProtoDSBlock {
	this := &ProtoDSBlock{}
	if r.Intn(5) != 0 {
		this.Header = NewPopulatedProtoDSBlock_DSBlockHeader(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Blockbase = NewPopulatedProtoBlockBase(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoDSBlock_DSBlockHashSet(r randyZilliqaMessage, easy bool) *ProtoDSBlock_DSBlockHashSet {
	this := &ProtoDSBlock_DSBlockHashSet{}
	v8 := r.Intn(100)
	this.Shardinghash = make([]byte, v8)
	for i := 0; i < v8; i++ {
		this.Shardinghash[i] = byte(r.Intn(256))
	}
	v9 := r.Intn(100)
	this.Reservedfield = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.Reservedfield[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoDSBlock_DSBlockHeader(r randyZilliqaMessage, easy bool) *ProtoDSBlock_DSBlockHeader {
	this := &ProtoDSBlock_DSBlockHeader{}
	if r.Intn(5) != 0 {
		this.Blockheaderbase = NewPopulatedProtoBlockHeaderBase(r, easy)
	}
	this.Dsdifficulty = uint32(r.Uint32())
	this.Difficulty = uint32(r.Uint32())
	v10 := r.Intn(100)
	this.Prevhash = make([]byte, v10)
	for i := 0; i < v10; i++ {
		this.Prevhash[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		this.Leaderpubkey = NewPopulatedByteArray(r, easy)
	}
	oneofNumber_Oneof6 := []int32{6}[r.Intn(1)]
	switch oneofNumber_Oneof6 {
	case 6:
		this.Oneof6 = NewPopulatedProtoDSBlock_DSBlockHeader_Blocknum(r, easy)
	}
	oneofNumber_Oneof7 := []int32{7}[r.Intn(1)]
	switch oneofNumber_Oneof7 {
	case 7:
		this.Oneof7 = NewPopulatedProtoDSBlock_DSBlockHeader_Epochnum(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Gasprice = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Swinfo = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		v11 := r.Intn(5)
		this.Dswinners = make([]*ProtoDSBlock_DSBlockHeader_PowDSWinners, v11)
		for i := 0; i < v11; i++ {
			this.Dswinners[i] = NewPopulatedProtoDSBlock_DSBlockHeader_PowDSWinners(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.Hash = NewPopulatedProtoDSBlock_DSBlockHashSet(r, easy)
	}
	if r.Intn(5) != 0 {
		v12 := r.Intn(5)
		this.Dsremoved = make([]*ByteArray, v12)
		for i := 0; i < v12; i++ {
			this.Dsremoved[i] = NewPopulatedByteArray(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v13 := r.Intn(5)
		this.Proposals = make([]*ProtoDSBlock_DSBlockHeader_Proposal, v13)
		for i := 0; i < v13; i++ {
			this.Proposals[i] = NewPopulatedProtoDSBlock_DSBlockHeader_Proposal(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 14)
	}
	return this
}

func NewPopulatedProtoDSBlock_DSBlockHeader_Blocknum(r randyZilliqaMessage, easy bool) *ProtoDSBlock_DSBlockHeader_Blocknum {
	this := &ProtoDSBlock_DSBlockHeader_Blocknum{}
	this.Blocknum = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedProtoDSBlock_DSBlockHeader_Epochnum(r randyZilliqaMessage, easy bool) *ProtoDSBlock_DSBlockHeader_Epochnum {
	this := &ProtoDSBlock_DSBlockHeader_Epochnum{}
	this.Epochnum = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedProtoDSBlock_DSBlockHeader_PowDSWinners(r randyZilliqaMessage, easy bool) *ProtoDSBlock_DSBlockHeader_PowDSWinners {
	this := &ProtoDSBlock_DSBlockHeader_PowDSWinners{}
	if r.Intn(5) != 0 {
		this.Key = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Val = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoDSBlock_DSBlockHeader_Vote(r randyZilliqaMessage, easy bool) *ProtoDSBlock_DSBlockHeader_Vote {
	this := &ProtoDSBlock_DSBlockHeader_Vote{}
	this.Value = uint32(r.Uint32())
	this.Count = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoDSBlock_DSBlockHeader_Proposal(r randyZilliqaMessage, easy bool) *ProtoDSBlock_DSBlockHeader_Proposal {
	this := &ProtoDSBlock_DSBlockHeader_Proposal{}
	this.Proposalid = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		v14 := r.Intn(5)
		this.Dsvotes = make([]*ProtoDSBlock_DSBlockHeader_Vote, v14)
		for i := 0; i < v14; i++ {
			this.Dsvotes[i] = NewPopulatedProtoDSBlock_DSBlockHeader_Vote(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v15 := r.Intn(5)
		this.Minervotes = make([]*ProtoDSBlock_DSBlockHeader_Vote, v15)
		for i := 0; i < v15; i++ {
			this.Minervotes[i] = NewPopulatedProtoDSBlock_DSBlockHeader_Vote(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedProtoDSNode(r randyZilliqaMessage, easy bool) *ProtoDSNode {
	this := &ProtoDSNode{}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Peer = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoDSCommittee(r randyZilliqaMessage, easy bool) *ProtoDSCommittee {
	this := &ProtoDSCommittee{}
	this.Version = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		v16 := r.Intn(5)
		this.Dsnodes = make([]*ProtoDSNode, v16)
		for i := 0; i < v16; i++ {
			this.Dsnodes[i] = NewPopulatedProtoDSNode(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoMicroBlock(r randyZilliqaMessage, easy bool) *ProtoMicroBlock {
	this := &ProtoMicroBlock{}
	if r.Intn(5) != 0 {
		this.Header = NewPopulatedProtoMicroBlock_MicroBlockHeader(r, easy)
	}
	v17 := r.Intn(10)
	this.Tranhashes = make([][]byte, v17)
	for i := 0; i < v17; i++ {
		v18 := r.Intn(100)
		this.Tranhashes[i] = make([]byte, v18)
		for j := 0; j < v18; j++ {
			this.Tranhashes[i][j] = byte(r.Intn(256))
		}
	}
	if r.Intn(5) != 0 {
		this.Blockbase = NewPopulatedProtoBlockBase(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedProtoMicroBlock_MicroBlockHeader(r randyZilliqaMessage, easy bool) *ProtoMicroBlock_MicroBlockHeader {
	this := &ProtoMicroBlock_MicroBlockHeader{}
	if r.Intn(5) != 0 {
		this.Blockheaderbase = NewPopulatedProtoBlockHeaderBase(r, easy)
	}
	oneofNumber_Oneof2 := []int32{2}[r.Intn(1)]
	switch oneofNumber_Oneof2 {
	case 2:
		this.Oneof2 = NewPopulatedProtoMicroBlock_MicroBlockHeader_Shardid(r, easy)
	}
	this.Gaslimit = uint64(uint64(r.Uint32()))
	oneofNumber_Oneof4 := []int32{4}[r.Intn(1)]
	switch oneofNumber_Oneof4 {
	case 4:
		this.Oneof4 = NewPopulatedProtoMicroBlock_MicroBlockHeader_Gasused(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Rewards = NewPopulatedByteArray(r, easy)
	}
	v19 := r.Intn(100)
	this.Prevhash = make([]byte, v19)
	for i := 0; i < v19; i++ {
		this.Prevhash[i] = byte(r.Intn(256))
	}
	oneofNumber_Oneof7 := []int32{7}[r.Intn(1)]
	switch oneofNumber_Oneof7 {
	case 7:
		this.Oneof7 = NewPopulatedProtoMicroBlock_MicroBlockHeader_Epochnum(r, easy)
	}
	v20 := r.Intn(100)
	this.Txroothash = make([]byte, v20)
	for i := 0; i < v20; i++ {
		this.Txroothash[i] = byte(r.Intn(256))
	}
	oneofNumber_Oneof9 := []int32{9}[r.Intn(1)]
	switch oneofNumber_Oneof9 {
	case 9:
		this.Oneof9 = NewPopulatedProtoMicroBlock_MicroBlockHeader_Numtxs(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Minerpubkey = NewPopulatedByteArray(r, easy)
	}
	this.Dsblocknum = uint64(uint64(r.Uint32()))
	v21 := r.Intn(100)
	this.Statedeltahash = make([]byte, v21)
	for i := 0; i < v21; i++ {
		this.Statedeltahash[i] = byte(r.Intn(256))
	}
	v22 := r.Intn(100)
	this.Tranreceipthash = make([]byte, v22)
	for i := 0; i < v22; i++ {
		this.Tranreceipthash[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 14)
	}
	return this
}

func NewPopulatedProtoMicroBlock_MicroBlockHeader_Shardid(r randyZilliqaMessage, easy bool) *ProtoMicroBlock_MicroBlockHeader_Shardid {
	this := &ProtoMicroBlock_MicroBlockHeader_Shardid{}
	this.Shardid = uint32(r.Uint32())
	return this
}
func NewPopulatedProtoMicroBlock_MicroBlockHeader_Gasused(r randyZilliqaMessage, easy bool) *ProtoMicroBlock_MicroBlockHeader_Gasused {
	this := &ProtoMicroBlock_MicroBlockHeader_Gasused{}
	this.Gasused = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedProtoMicroBlock_MicroBlockHeader_Epochnum(r randyZilliqaMessage, easy bool) *ProtoMicroBlock_MicroBlockHeader_Epochnum {
	this := &ProtoMicroBlock_MicroBlockHeader_Epochnum{}
	this.Epochnum = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedProtoMicroBlock_MicroBlockHeader_Numtxs(r randyZilliqaMessage, easy bool) *ProtoMicroBlock_MicroBlockHeader_Numtxs {
	this := &ProtoMicroBlock_MicroBlockHeader_Numtxs{}
	this.Numtxs = uint32(r.Uint32())
	return this
}
func NewPopulatedProtoShardingStructure(r randyZilliqaMessage, easy bool) *ProtoShardingStructure {
	this := &ProtoShardingStructure{}
	this.Version = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		v23 := r.Intn(5)
		this.Shards = make([]*ProtoShardingStructure_Shard, v23)
		for i := 0; i < v23; i++ {
			this.Shards[i] = NewPopulatedProtoShardingStructure_Shard(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoShardingStructure_Member(r randyZilliqaMessage, easy bool) *ProtoShardingStructure_Member {
	this := &ProtoShardingStructure_Member{}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Peerinfo = NewPopulatedByteArray(r, easy)
	}
	oneofNumber_Oneof3 := []int32{3}[r.Intn(1)]
	switch oneofNumber_Oneof3 {
	case 3:
		this.Oneof3 = NewPopulatedProtoShardingStructure_Member_Reputation(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedProtoShardingStructure_Member_Reputation(r randyZilliqaMessage, easy bool) *ProtoShardingStructure_Member_Reputation {
	this := &ProtoShardingStructure_Member_Reputation{}
	this.Reputation = uint32(r.Uint32())
	return this
}
func NewPopulatedProtoShardingStructure_Shard(r randyZilliqaMessage, easy bool) *ProtoShardingStructure_Shard {
	this := &ProtoShardingStructure_Shard{}
	if r.Intn(5) != 0 {
		v24 := r.Intn(5)
		this.Members = make([]*ProtoShardingStructure_Member, v24)
		for i := 0; i < v24; i++ {
			this.Members[i] = NewPopulatedProtoShardingStructure_Member(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedProtoMbInfo(r randyZilliqaMessage, easy bool) *ProtoMbInfo {
	this := &ProtoMbInfo{}
	v25 := r.Intn(100)
	this.Mbhash = make([]byte, v25)
	for i := 0; i < v25; i++ {
		this.Mbhash[i] = byte(r.Intn(256))
	}
	v26 := r.Intn(100)
	this.Txroot = make([]byte, v26)
	for i := 0; i < v26; i++ {
		this.Txroot[i] = byte(r.Intn(256))
	}
	oneofNumber_Oneof3 := []int32{3}[r.Intn(1)]
	switch oneofNumber_Oneof3 {
	case 3:
		this.Oneof3 = NewPopulatedProtoMbInfo_Shardid(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedProtoMbInfo_Shardid(r randyZilliqaMessage, easy bool) *ProtoMbInfo_Shardid {
	this := &ProtoMbInfo_Shardid{}
	this.Shardid = uint32(r.Uint32())
	return this
}
func NewPopulatedProtoTxBlock(r randyZilliqaMessage, easy bool) *ProtoTxBlock {
	this := &ProtoTxBlock{}
	if r.Intn(5) != 0 {
		this.Header = NewPopulatedProtoTxBlock_TxBlockHeader(r, easy)
	}
	if r.Intn(5) != 0 {
		v27 := r.Intn(5)
		this.Mbinfos = make([]*ProtoMbInfo, v27)
		for i := 0; i < v27; i++ {
			this.Mbinfos[i] = NewPopulatedProtoMbInfo(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.Blockbase = NewPopulatedProtoBlockBase(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedProtoTxBlock_TxBlockHashSet(r randyZilliqaMessage, easy bool) *ProtoTxBlock_TxBlockHashSet {
	this := &ProtoTxBlock_TxBlockHashSet{}
	v28 := r.Intn(100)
	this.Stateroothash = make([]byte, v28)
	for i := 0; i < v28; i++ {
		this.Stateroothash[i] = byte(r.Intn(256))
	}
	v29 := r.Intn(100)
	this.Statedeltahash = make([]byte, v29)
	for i := 0; i < v29; i++ {
		this.Statedeltahash[i] = byte(r.Intn(256))
	}
	v30 := r.Intn(100)
	this.Mbinfohash = make([]byte, v30)
	for i := 0; i < v30; i++ {
		this.Mbinfohash[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedProtoTxBlock_TxBlockHeader(r randyZilliqaMessage, easy bool) *ProtoTxBlock_TxBlockHeader {
	this := &ProtoTxBlock_TxBlockHeader{}
	if r.Intn(5) != 0 {
		this.Blockheaderbase = NewPopulatedProtoBlockHeaderBase(r, easy)
	}
	this.Gaslimit = uint64(uint64(r.Uint32()))
	oneofNumber_Oneof3 := []int32{3}[r.Intn(1)]
	switch oneofNumber_Oneof3 {
	case 3:
		this.Oneof3 = NewPopulatedProtoTxBlock_TxBlockHeader_Gasused(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Rewards = NewPopulatedByteArray(r, easy)
	}
	v31 := r.Intn(100)
	this.Prevhash = make([]byte, v31)
	for i := 0; i < v31; i++ {
		this.Prevhash[i] = byte(r.Intn(256))
	}
	oneofNumber_Oneof6 := []int32{6}[r.Intn(1)]
	switch oneofNumber_Oneof6 {
	case 6:
		this.Oneof6 = NewPopulatedProtoTxBlock_TxBlockHeader_Blocknum(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Hash = NewPopulatedProtoTxBlock_TxBlockHashSet(r, easy)
	}
	oneofNumber_Oneof8 := []int32{8}[r.Intn(1)]
	switch oneofNumber_Oneof8 {
	case 8:
		this.Oneof8 = NewPopulatedProtoTxBlock_TxBlockHeader_Numtxs(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Minerpubkey = NewPopulatedByteArray(r, easy)
	}
	oneofNumber_Oneof10 := []int32{10}[r.Intn(1)]
	switch oneofNumber_Oneof10 {
	case 10:
		this.Oneof10 = NewPopulatedProtoTxBlock_TxBlockHeader_Dsblocknum(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 11)
	}
	return this
}

func NewPopulatedProtoTxBlock_TxBlockHeader_Gasused(r randyZilliqaMessage, easy bool) *ProtoTxBlock_TxBlockHeader_Gasused {
	this := &ProtoTxBlock_TxBlockHeader_Gasused{}
	this.Gasused = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedProtoTxBlock_TxBlockHeader_Blocknum(r randyZilliqaMessage, easy bool) *ProtoTxBlock_TxBlockHeader_Blocknum {
	this := &ProtoTxBlock_TxBlockHeader_Blocknum{}
	this.Blocknum = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedProtoTxBlock_TxBlockHeader_Numtxs(r randyZilliqaMessage, easy bool) *ProtoTxBlock_TxBlockHeader_Numtxs {
	this := &ProtoTxBlock_TxBlockHeader_Numtxs{}
	this.Numtxs = uint32(r.Uint32())
	return this
}
func NewPopulatedProtoTxBlock_TxBlockHeader_Dsblocknum(r randyZilliqaMessage, easy bool) *ProtoTxBlock_TxBlockHeader_Dsblocknum {
	this := &ProtoTxBlock_TxBlockHeader_Dsblocknum{}
	this.Dsblocknum = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedProtoVCBlock(r randyZilliqaMessage, easy bool) *ProtoVCBlock {
	this := &ProtoVCBlock{}
	if r.Intn(5) != 0 {
		this.Header = NewPopulatedProtoVCBlock_VCBlockHeader(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Blockbase = NewPopulatedProtoBlockBase(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoVCBlock_VCBlockHeader(r randyZilliqaMessage, easy bool) *ProtoVCBlock_VCBlockHeader {
	this := &ProtoVCBlock_VCBlockHeader{}
	if r.Intn(5) != 0 {
		this.Blockheaderbase = NewPopulatedProtoBlockHeaderBase(r, easy)
	}
	this.Viewchangedsepochno = uint64(uint64(r.Uint32()))
	this.Viewchangeepochno = uint64(uint64(r.Uint32()))
	oneofNumber_Oneof4 := []int32{4}[r.Intn(1)]
	switch oneofNumber_Oneof4 {
	case 4:
		this.Oneof4 = NewPopulatedProtoVCBlock_VCBlockHeader_Viewchangestate(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Candidateleadernetworkinfo = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Candidateleaderpubkey = NewPopulatedByteArray(r, easy)
	}
	oneofNumber_Oneof7 := []int32{7}[r.Intn(1)]
	switch oneofNumber_Oneof7 {
	case 7:
		this.Oneof7 = NewPopulatedProtoVCBlock_VCBlockHeader_Vccounter(r, easy)
	}
	if r.Intn(5) != 0 {
		v32 := r.Intn(5)
		this.Faultyleaders = make([]*ProtoDSNode, v32)
		for i := 0; i < v32; i++ {
			this.Faultyleaders[i] = NewPopulatedProtoDSNode(r, easy)
		}
	}
	v33 := r.Intn(100)
	this.Prevhash = make([]byte, v33)
	for i := 0; i < v33; i++ {
		this.Prevhash[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 10)
	}
	return this
}

func NewPopulatedProtoVCBlock_VCBlockHeader_Viewchangestate(r randyZilliqaMessage, easy bool) *ProtoVCBlock_VCBlockHeader_Viewchangestate {
	this := &ProtoVCBlock_VCBlockHeader_Viewchangestate{}
	this.Viewchangestate = uint32(r.Uint32())
	return this
}
func NewPopulatedProtoVCBlock_VCBlockHeader_Vccounter(r randyZilliqaMessage, easy bool) *ProtoVCBlock_VCBlockHeader_Vccounter {
	this := &ProtoVCBlock_VCBlockHeader_Vccounter{}
	this.Vccounter = uint32(r.Uint32())
	return this
}
func NewPopulatedProtoFallbackBlock(r randyZilliqaMessage, easy bool) *ProtoFallbackBlock {
	this := &ProtoFallbackBlock{}
	if r.Intn(5) != 0 {
		this.Header = NewPopulatedProtoFallbackBlock_FallbackBlockHeader(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Blockbase = NewPopulatedProtoBlockBase(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoFallbackBlock_FallbackBlockHeader(r randyZilliqaMessage, easy bool) *ProtoFallbackBlock_FallbackBlockHeader {
	this := &ProtoFallbackBlock_FallbackBlockHeader{}
	if r.Intn(5) != 0 {
		this.Blockheaderbase = NewPopulatedProtoBlockHeaderBase(r, easy)
	}
	this.Fallbackdsepochno = uint64(uint64(r.Uint32()))
	this.Fallbackepochno = uint64(uint64(r.Uint32()))
	this.Fallbackstate = uint32(r.Uint32())
	v34 := r.Intn(100)
	this.Stateroothash = make([]byte, v34)
	for i := 0; i < v34; i++ {
		this.Stateroothash[i] = byte(r.Intn(256))
	}
	this.Leaderconsensusid = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Leadernetworkinfo = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Leaderpubkey = NewPopulatedByteArray(r, easy)
	}
	this.Shardid = uint32(r.Uint32())
	v35 := r.Intn(100)
	this.Prevhash = make([]byte, v35)
	for i := 0; i < v35; i++ {
		this.Prevhash[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 11)
	}
	return this
}

func NewPopulatedProtoDiagnosticDataNodes(r randyZilliqaMessage, easy bool) *ProtoDiagnosticDataNodes {
	this := &ProtoDiagnosticDataNodes{}
	if r.Intn(5) != 0 {
		this.Shards = NewPopulatedProtoShardingStructure(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Dscommittee = NewPopulatedProtoDSCommittee(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoDiagnosticDataCoinbase(r randyZilliqaMessage, easy bool) *ProtoDiagnosticDataCoinbase {
	this := &ProtoDiagnosticDataCoinbase{}
	if r.Intn(5) != 0 {
		this.Nodecount = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Sigcount = NewPopulatedByteArray(r, easy)
	}
	this.Lookupcount = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Totalreward = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Basereward = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Baserewardeach = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Lookupreward = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Rewardeachlookup = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Nodereward = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Rewardeach = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Balanceleft = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Luckydrawwinnerkey = NewPopulatedByteArray(r, easy)
	}
	v36 := r.Intn(100)
	this.Luckydrawwinneraddr = make([]byte, v36)
	for i := 0; i < v36; i++ {
		this.Luckydrawwinneraddr[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 14)
	}
	return this
}

func NewPopulatedProtoMinerInfoDSComm(r randyZilliqaMessage, easy bool) *ProtoMinerInfoDSComm {
	this := &ProtoMinerInfoDSComm{}
	if r.Intn(5) != 0 {
		v37 := r.Intn(5)
		this.Dsnodes = make([]*ProtoMinerInfoDSComm_Node, v37)
		for i := 0; i < v37; i++ {
			this.Dsnodes[i] = NewPopulatedProtoMinerInfoDSComm_Node(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v38 := r.Intn(5)
		this.Dsnodesejected = make([]*ProtoMinerInfoDSComm_Node, v38)
		for i := 0; i < v38; i++ {
			this.Dsnodesejected[i] = NewPopulatedProtoMinerInfoDSComm_Node(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoMinerInfoDSComm_Node(r randyZilliqaMessage, easy bool) *ProtoMinerInfoDSComm_Node {
	this := &ProtoMinerInfoDSComm_Node{}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedProtoMinerInfoShards(r randyZilliqaMessage, easy bool) *ProtoMinerInfoShards {
	this := &ProtoMinerInfoShards{}
	if r.Intn(5) != 0 {
		v39 := r.Intn(5)
		this.Shards = make([]*ProtoMinerInfoShards_Shard, v39)
		for i := 0; i < v39; i++ {
			this.Shards[i] = NewPopulatedProtoMinerInfoShards_Shard(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedProtoMinerInfoShards_Node(r randyZilliqaMessage, easy bool) *ProtoMinerInfoShards_Node {
	this := &ProtoMinerInfoShards_Node{}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedProtoMinerInfoShards_Shard(r randyZilliqaMessage, easy bool) *ProtoMinerInfoShards_Shard {
	this := &ProtoMinerInfoShards_Shard{}
	this.Shardsize = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		v40 := r.Intn(5)
		this.Shardnodes = make([]*ProtoMinerInfoShards_Node, v40)
		for i := 0; i < v40; i++ {
			this.Shardnodes[i] = NewPopulatedProtoMinerInfoShards_Node(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoAccountBase(r randyZilliqaMessage, easy bool) *ProtoAccountBase {
	this := &ProtoAccountBase{}
	this.Version = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Balance = NewPopulatedByteArray(r, easy)
	}
	oneofNumber_Oneof3 := []int32{3}[r.Intn(1)]
	switch oneofNumber_Oneof3 {
	case 3:
		this.Oneof3 = NewPopulatedProtoAccountBase_Nonce(r, easy)
	}
	v41 := r.Intn(100)
	this.Codehash = make([]byte, v41)
	for i := 0; i < v41; i++ {
		this.Codehash[i] = byte(r.Intn(256))
	}
	v42 := r.Intn(100)
	this.Storageroot = make([]byte, v42)
	for i := 0; i < v42; i++ {
		this.Storageroot[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 6)
	}
	return this
}

func NewPopulatedProtoAccountBase_Nonce(r randyZilliqaMessage, easy bool) *ProtoAccountBase_Nonce {
	this := &ProtoAccountBase_Nonce{}
	this.Nonce = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedProtoAccount(r randyZilliqaMessage, easy bool) *ProtoAccount {
	this := &ProtoAccount{}
	if r.Intn(5) != 0 {
		this.Base = NewPopulatedProtoAccountBase(r, easy)
	}
	v43 := r.Intn(100)
	this.Code = make([]byte, v43)
	for i := 0; i < v43; i++ {
		this.Code[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		v44 := r.Intn(5)
		this.Storage = make([]*ProtoAccount_StorageData, v44)
		for i := 0; i < v44; i++ {
			this.Storage[i] = NewPopulatedProtoAccount_StorageData(r, easy)
		}
	}
	this.Numbersign = bool(bool(r.Intn(2) == 0))
	if r.Intn(5) != 0 {
		v45 := r.Intn(5)
		this.Storage2 = make([]*ProtoAccount_StorageData2, v45)
		for i := 0; i < v45; i++ {
			this.Storage2[i] = NewPopulatedProtoAccount_StorageData2(r, easy)
		}
	}
	v46 := r.Intn(10)
	this.Todelete = make([]string, v46)
	for i := 0; i < v46; i++ {
		this.Todelete[i] = string(randStringZilliqaMessage(r))
	}
	v47 := r.Intn(100)
	this.Initdata = make([]byte, v47)
	for i := 0; i < v47; i++ {
		this.Initdata[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 8)
	}
	return this
}

func NewPopulatedProtoAccount_StorageData(r randyZilliqaMessage, easy bool) *ProtoAccount_StorageData {
	this := &ProtoAccount_StorageData{}
	v48 := r.Intn(100)
	this.Keyhash = make([]byte, v48)
	for i := 0; i < v48; i++ {
		this.Keyhash[i] = byte(r.Intn(256))
	}
	this.Data = string(randStringZilliqaMessage(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoAccount_StorageData2(r randyZilliqaMessage, easy bool) *ProtoAccount_StorageData2 {
	this := &ProtoAccount_StorageData2{}
	this.Key = string(randStringZilliqaMessage(r))
	v49 := r.Intn(100)
	this.Data = make([]byte, v49)
	for i := 0; i < v49; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoStateIndex(r randyZilliqaMessage, easy bool) *ProtoStateIndex {
	this := &ProtoStateIndex{}
	v50 := r.Intn(10)
	this.Index = make([][]byte, v50)
	for i := 0; i < v50; i++ {
		v51 := r.Intn(100)
		this.Index[i] = make([]byte, v51)
		for j := 0; j < v51; j++ {
			this.Index[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedProtoStateData(r randyZilliqaMessage, easy bool) *ProtoStateData {
	this := &ProtoStateData{}
	this.Version = uint32(r.Uint32())
	this.Vname = string(randStringZilliqaMessage(r))
	this.Ismutable = bool(bool(r.Intn(2) == 0))
	this.Type = string(randStringZilliqaMessage(r))
	this.Value = string(randStringZilliqaMessage(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 6)
	}
	return this
}

func NewPopulatedProtoAccountStore(r randyZilliqaMessage, easy bool) *ProtoAccountStore {
	this := &ProtoAccountStore{}
	if r.Intn(5) != 0 {
		v52 := r.Intn(5)
		this.Entries = make([]*ProtoAccountStore_AddressAccount, v52)
		for i := 0; i < v52; i++ {
			this.Entries[i] = NewPopulatedProtoAccountStore_AddressAccount(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedProtoAccountStore_AddressAccount(r randyZilliqaMessage, easy bool) *ProtoAccountStore_AddressAccount {
	this := &ProtoAccountStore_AddressAccount{}
	v53 := r.Intn(100)
	this.Address = make([]byte, v53)
	for i := 0; i < v53; i++ {
		this.Address[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		this.Account = NewPopulatedProtoAccount(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoPeer(r randyZilliqaMessage, easy bool) *ProtoPeer {
	this := &ProtoPeer{}
	if r.Intn(5) != 0 {
		this.Ipaddress = NewPopulatedByteArray(r, easy)
	}
	oneofNumber_Oneof2 := []int32{2}[r.Intn(1)]
	switch oneofNumber_Oneof2 {
	case 2:
		this.Oneof2 = NewPopulatedProtoPeer_Listenporthost(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoPeer_Listenporthost(r randyZilliqaMessage, easy bool) *ProtoPeer_Listenporthost {
	this := &ProtoPeer_Listenporthost{}
	this.Listenporthost = uint32(r.Uint32())
	return this
}
func NewPopulatedProtoPoWSolution(r randyZilliqaMessage, easy bool) *ProtoPoWSolution {
	this := &ProtoPoWSolution{}
	this.Nonce = uint64(uint64(r.Uint32()))
	v54 := r.Intn(100)
	this.Result = make([]byte, v54)
	for i := 0; i < v54; i++ {
		this.Result[i] = byte(r.Intn(256))
	}
	v55 := r.Intn(100)
	this.Mixhash = make([]byte, v55)
	for i := 0; i < v55; i++ {
		this.Mixhash[i] = byte(r.Intn(256))
	}
	oneofNumber_Oneof4 := []int32{4}[r.Intn(1)]
	switch oneofNumber_Oneof4 {
	case 4:
		this.Oneof4 = NewPopulatedProtoPoWSolution_Lookupid(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Gasprice = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Govdata = NewPopulatedGovernanceData(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 7)
	}
	return this
}

func NewPopulatedProtoPoWSolution_Lookupid(r randyZilliqaMessage, easy bool) *ProtoPoWSolution_Lookupid {
	this := &ProtoPoWSolution_Lookupid{}
	this.Lookupid = uint32(r.Uint32())
	return this
}
func NewPopulatedProtoCommittee(r randyZilliqaMessage, easy bool) *ProtoCommittee {
	this := &ProtoCommittee{}
	if r.Intn(5) != 0 {
		v56 := r.Intn(5)
		this.Members = make([]*ByteArray, v56)
		for i := 0; i < v56; i++ {
			this.Members[i] = NewPopulatedByteArray(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedProtoShardingStructureWithPoWSolns(r randyZilliqaMessage, easy bool) *ProtoShardingStructureWithPoWSolns {
	this := &ProtoShardingStructureWithPoWSolns{}
	if r.Intn(5) != 0 {
		v57 := r.Intn(5)
		this.Shards = make([]*ProtoShardingStructureWithPoWSolns_Shard, v57)
		for i := 0; i < v57; i++ {
			this.Shards[i] = NewPopulatedProtoShardingStructureWithPoWSolns_Shard(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedProtoShardingStructureWithPoWSolns_Member(r randyZilliqaMessage, easy bool) *ProtoShardingStructureWithPoWSolns_Member {
	this := &ProtoShardingStructureWithPoWSolns_Member{}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Peerinfo = NewPopulatedByteArray(r, easy)
	}
	oneofNumber_Oneof3 := []int32{3}[r.Intn(1)]
	switch oneofNumber_Oneof3 {
	case 3:
		this.Oneof3 = NewPopulatedProtoShardingStructureWithPoWSolns_Member_Reputation(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Powsoln = NewPopulatedProtoPoWSolution(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 5)
	}
	return this
}

func NewPopulatedProtoShardingStructureWithPoWSolns_Member_Reputation(r randyZilliqaMessage, easy bool) *ProtoShardingStructureWithPoWSolns_Member_Reputation {
	this := &ProtoShardingStructureWithPoWSolns_Member_Reputation{}
	this.Reputation = uint32(r.Uint32())
	return this
}
func NewPopulatedProtoShardingStructureWithPoWSolns_Shard(r randyZilliqaMessage, easy bool) *ProtoShardingStructureWithPoWSolns_Shard {
	this := &ProtoShardingStructureWithPoWSolns_Shard{}
	if r.Intn(5) != 0 {
		v58 := r.Intn(5)
		this.Members = make([]*ProtoShardingStructureWithPoWSolns_Member, v58)
		for i := 0; i < v58; i++ {
			this.Members[i] = NewPopulatedProtoShardingStructureWithPoWSolns_Member(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedProtoDSWinnerPoW(r randyZilliqaMessage, easy bool) *ProtoDSWinnerPoW {
	this := &ProtoDSWinnerPoW{}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Powsoln = NewPopulatedProtoPoWSolution(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoTransactionCoreInfo(r randyZilliqaMessage, easy bool) *ProtoTransactionCoreInfo {
	this := &ProtoTransactionCoreInfo{}
	this.Version = uint32(r.Uint32())
	oneofNumber_Oneof2 := []int32{2}[r.Intn(1)]
	switch oneofNumber_Oneof2 {
	case 2:
		this.Oneof2 = NewPopulatedProtoTransactionCoreInfo_Nonce(r, easy)
	}
	v59 := r.Intn(100)
	this.Toaddr = make([]byte, v59)
	for i := 0; i < v59; i++ {
		this.Toaddr[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		this.Senderpubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Amount = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Gasprice = NewPopulatedByteArray(r, easy)
	}
	this.Gaslimit = uint64(uint64(r.Uint32()))
	oneofNumber_Oneof8 := []int32{8}[r.Intn(1)]
	switch oneofNumber_Oneof8 {
	case 8:
		this.Oneof8 = NewPopulatedProtoTransactionCoreInfo_Code(r, easy)
	}
	oneofNumber_Oneof9 := []int32{9}[r.Intn(1)]
	switch oneofNumber_Oneof9 {
	case 9:
		this.Oneof9 = NewPopulatedProtoTransactionCoreInfo_Data(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 10)
	}
	return this
}

func NewPopulatedProtoTransactionCoreInfo_Nonce(r randyZilliqaMessage, easy bool) *ProtoTransactionCoreInfo_Nonce {
	this := &ProtoTransactionCoreInfo_Nonce{}
	this.Nonce = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedProtoTransactionCoreInfo_Code(r randyZilliqaMessage, easy bool) *ProtoTransactionCoreInfo_Code {
	this := &ProtoTransactionCoreInfo_Code{}
	v60 := r.Intn(100)
	this.Code = make([]byte, v60)
	for i := 0; i < v60; i++ {
		this.Code[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedProtoTransactionCoreInfo_Data(r randyZilliqaMessage, easy bool) *ProtoTransactionCoreInfo_Data {
	this := &ProtoTransactionCoreInfo_Data{}
	v61 := r.Intn(100)
	this.Data = make([]byte, v61)
	for i := 0; i < v61; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedProtoTransaction(r randyZilliqaMessage, easy bool) *ProtoTransaction {
	this := &ProtoTransaction{}
	v62 := r.Intn(100)
	this.Tranid = make([]byte, v62)
	for i := 0; i < v62; i++ {
		this.Tranid[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		this.Info = NewPopulatedProtoTransactionCoreInfo(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedProtoTxnFileOffset(r randyZilliqaMessage, easy bool) *ProtoTxnFileOffset {
	this := &ProtoTxnFileOffset{}
	v63 := r.Intn(10)
	this.Offsetinfile = make([]uint32, v63)
	for i := 0; i < v63; i++ {
		this.Offsetinfile[i] = uint32(r.Uint32())
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedProtoTransactionArray(r randyZilliqaMessage, easy bool) *ProtoTransactionArray {
	this := &ProtoTransactionArray{}
	if r.Intn(5) != 0 {
		v64 := r.Intn(5)
		this.Transactions = make([]*ProtoTransaction, v64)
		for i := 0; i < v64; i++ {
			this.Transactions[i] = NewPopulatedProtoTransaction(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedProtoTransactionReceipt(r randyZilliqaMessage, easy bool) *ProtoTransactionReceipt {
	this := &ProtoTransactionReceipt{}
	v65 := r.Intn(100)
	this.Receipt = make([]byte, v65)
	for i := 0; i < v65; i++ {
		this.Receipt[i] = byte(r.Intn(256))
	}
	oneofNumber_Oneof2 := []int32{2}[r.Intn(1)]
	switch oneofNumber_Oneof2 {
	case 2:
		this.Oneof2 = NewPopulatedProtoTransactionReceipt_Cumgas(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoTransactionReceipt_Cumgas(r randyZilliqaMessage, easy bool) *ProtoTransactionReceipt_Cumgas {
	this := &ProtoTransactionReceipt_Cumgas{}
	this.Cumgas = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedProtoTransactionWithReceipt(r randyZilliqaMessage, easy bool) *ProtoTransactionWithReceipt {
	this := &ProtoTransactionWithReceipt{}
	if r.Intn(5) != 0 {
		this.Transaction = NewPopulatedProtoTransaction(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Receipt = NewPopulatedProtoTransactionReceipt(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoBloomFilter(r randyZilliqaMessage, easy bool) *ProtoBloomFilter {
	this := &ProtoBloomFilter{}
	v66 := r.Intn(10)
	this.Salt = make([]uint32, v66)
	for i := 0; i < v66; i++ {
		this.Salt[i] = uint32(r.Uint32())
	}
	v67 := r.Intn(100)
	this.Bittable = make([]byte, v67)
	for i := 0; i < v67; i++ {
		this.Bittable[i] = byte(r.Intn(256))
	}
	this.Saltcount = uint32(r.Uint32())
	this.Tablesize = uint64(uint64(r.Uint32()))
	this.Projectedelementcount = uint64(uint64(r.Uint32()))
	this.Insertedelementcount = uint64(uint64(r.Uint32()))
	this.Randomseed = uint64(uint64(r.Uint32()))
	this.Probability = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Probability *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 9)
	}
	return this
}

func NewPopulatedProtoSWInfo(r randyZilliqaMessage, easy bool) *ProtoSWInfo {
	this := &ProtoSWInfo{}
	this.Zilliqamajorversion = uint32(r.Uint32())
	this.Zilliqaminorversion = uint32(r.Uint32())
	this.Zilliqafixversion = uint32(r.Uint32())
	this.Zilliqaupgradeds = uint64(uint64(r.Uint32()))
	this.Zilliqacommit = uint32(r.Uint32())
	this.Scillamajorversion = uint32(r.Uint32())
	this.Scillaminorversion = uint32(r.Uint32())
	this.Scillafixversion = uint32(r.Uint32())
	this.Scillaupgradeds = uint64(uint64(r.Uint32()))
	this.Scillacommit = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 11)
	}
	return this
}

func NewPopulatedProtoFallbackBlockWShardingStructure(r randyZilliqaMessage, easy bool) *ProtoFallbackBlockWShardingStructure {
	this := &ProtoFallbackBlockWShardingStructure{}
	if r.Intn(5) != 0 {
		this.Fallbackblock = NewPopulatedProtoFallbackBlock(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Sharding = NewPopulatedProtoShardingStructure(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoSingleDirectoryBlock(r randyZilliqaMessage, easy bool) *ProtoSingleDirectoryBlock {
	this := &ProtoSingleDirectoryBlock{}
	oneofNumber_Directoryblock := []int32{1, 2, 3}[r.Intn(3)]
	switch oneofNumber_Directoryblock {
	case 1:
		this.Directoryblock = NewPopulatedProtoSingleDirectoryBlock_Dsblock(r, easy)
	case 2:
		this.Directoryblock = NewPopulatedProtoSingleDirectoryBlock_Vcblock(r, easy)
	case 3:
		this.Directoryblock = NewPopulatedProtoSingleDirectoryBlock_Fallbackblockwshard(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedProtoSingleDirectoryBlock_Dsblock(r randyZilliqaMessage, easy bool) *ProtoSingleDirectoryBlock_Dsblock {
	this := &ProtoSingleDirectoryBlock_Dsblock{}
	this.Dsblock = NewPopulatedProtoDSBlock(r, easy)
	return this
}
func NewPopulatedProtoSingleDirectoryBlock_Vcblock(r randyZilliqaMessage, easy bool) *ProtoSingleDirectoryBlock_Vcblock {
	this := &ProtoSingleDirectoryBlock_Vcblock{}
	this.Vcblock = NewPopulatedProtoVCBlock(r, easy)
	return this
}
func NewPopulatedProtoSingleDirectoryBlock_Fallbackblockwshard(r randyZilliqaMessage, easy bool) *ProtoSingleDirectoryBlock_Fallbackblockwshard {
	this := &ProtoSingleDirectoryBlock_Fallbackblockwshard{}
	this.Fallbackblockwshard = NewPopulatedProtoFallbackBlockWShardingStructure(r, easy)
	return this
}
func NewPopulatedPMHello(r randyZilliqaMessage, easy bool) *PMHello {
	this := &PMHello{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedPMHello_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedPMHello_Data(r randyZilliqaMessage, easy bool) *PMHello_Data {
	this := &PMHello_Data{}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	this.Listenport = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedGovernanceData(r randyZilliqaMessage, easy bool) *GovernanceData {
	this := &GovernanceData{}
	this.Proposalid = uint32(r.Uint32())
	this.Votevalue = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedDSPoWSubmission(r randyZilliqaMessage, easy bool) *DSPoWSubmission {
	this := &DSPoWSubmission{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedDSPoWSubmission_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedDSPoWSubmission_Data(r randyZilliqaMessage, easy bool) *DSPoWSubmission_Data {
	this := &DSPoWSubmission_Data{}
	this.Blocknumber = uint64(uint64(r.Uint32()))
	this.Difficultylevel = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Submitterpeer = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.SubmitterpubKey = NewPopulatedByteArray(r, easy)
	}
	this.Nonce = uint64(uint64(r.Uint32()))
	this.Resultinghash = string(randStringZilliqaMessage(r))
	this.Mixhash = string(randStringZilliqaMessage(r))
	this.Lookupid = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Gasprice = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Govdata = NewPopulatedGovernanceData(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 11)
	}
	return this
}

func NewPopulatedDSPoWPacketSubmission(r randyZilliqaMessage, easy bool) *DSPoWPacketSubmission {
	this := &DSPoWPacketSubmission{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedDSPoWPacketSubmission_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedDSPoWPacketSubmission_Data(r randyZilliqaMessage, easy bool) *DSPoWPacketSubmission_Data {
	this := &DSPoWPacketSubmission_Data{}
	if r.Intn(5) != 0 {
		v68 := r.Intn(5)
		this.DsPowSubmissions = make([]*DSPoWSubmission, v68)
		for i := 0; i < v68; i++ {
			this.DsPowSubmissions[i] = NewPopulatedDSPoWSubmission(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedDSMicroBlockSubmission(r randyZilliqaMessage, easy bool) *DSMicroBlockSubmission {
	this := &DSMicroBlockSubmission{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedDSMicroBlockSubmission_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedDSMicroBlockSubmission_Data(r randyZilliqaMessage, easy bool) *DSMicroBlockSubmission_Data {
	this := &DSMicroBlockSubmission_Data{}
	this.Microblocktype = uint32(r.Uint32())
	this.Epochnumber = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		v69 := r.Intn(5)
		this.Microblocks = make([]*ProtoMicroBlock, v69)
		for i := 0; i < v69; i++ {
			this.Microblocks[i] = NewPopulatedProtoMicroBlock(r, easy)
		}
	}
	v70 := r.Intn(10)
	this.Statedeltas = make([][]byte, v70)
	for i := 0; i < v70; i++ {
		v71 := r.Intn(100)
		this.Statedeltas[i] = make([]byte, v71)
		for j := 0; j < v71; j++ {
			this.Statedeltas[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 5)
	}
	return this
}

func NewPopulatedDSDSBlockAnnouncement(r randyZilliqaMessage, easy bool) *DSDSBlockAnnouncement {
	this := &DSDSBlockAnnouncement{}
	if r.Intn(5) != 0 {
		this.Dsblock = NewPopulatedProtoDSBlock(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Sharding = NewPopulatedProtoShardingStructureWithPoWSolns(r, easy)
	}
	if r.Intn(5) != 0 {
		v72 := r.Intn(5)
		this.Dswinnerpows = make([]*ProtoDSWinnerPoW, v72)
		for i := 0; i < v72; i++ {
			this.Dswinnerpows[i] = NewPopulatedProtoDSWinnerPoW(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedDSFinalBlockAnnouncement(r randyZilliqaMessage, easy bool) *DSFinalBlockAnnouncement {
	this := &DSFinalBlockAnnouncement{}
	if r.Intn(5) != 0 {
		this.Txblock = NewPopulatedProtoTxBlock(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Microblock = NewPopulatedProtoMicroBlock(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedDSVCBlockAnnouncement(r randyZilliqaMessage, easy bool) *DSVCBlockAnnouncement {
	this := &DSVCBlockAnnouncement{}
	if r.Intn(5) != 0 {
		this.Vcblock = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedDSMissingMicroBlocksErrorMsg(r randyZilliqaMessage, easy bool) *DSMissingMicroBlocksErrorMsg {
	this := &DSMissingMicroBlocksErrorMsg{}
	v73 := r.Intn(10)
	this.Mbhashes = make([][]byte, v73)
	for i := 0; i < v73; i++ {
		v74 := r.Intn(100)
		this.Mbhashes[i] = make([]byte, v74)
		for j := 0; j < v74; j++ {
			this.Mbhashes[i][j] = byte(r.Intn(256))
		}
	}
	this.Epochnum = uint64(uint64(r.Uint32()))
	this.Listenport = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedNodeDSBlock(r randyZilliqaMessage, easy bool) *NodeDSBlock {
	this := &NodeDSBlock{}
	this.Shardid = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Dsblock = NewPopulatedProtoDSBlock(r, easy)
	}
	if r.Intn(5) != 0 {
		v75 := r.Intn(5)
		this.Vcblocks = make([]*ProtoVCBlock, v75)
		for i := 0; i < v75; i++ {
			this.Vcblocks[i] = NewPopulatedProtoVCBlock(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.Sharding = NewPopulatedProtoShardingStructure(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 5)
	}
	return this
}

func NewPopulatedNodeFinalBlock(r randyZilliqaMessage, easy bool) *NodeFinalBlock {
	this := &NodeFinalBlock{}
	this.Dsblocknumber = uint64(uint64(r.Uint32()))
	this.Consensusid = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Txblock = NewPopulatedProtoTxBlock(r, easy)
	}
	v76 := r.Intn(100)
	this.Statedelta = make([]byte, v76)
	for i := 0; i < v76; i++ {
		this.Statedelta[i] = byte(r.Intn(256))
	}
	v77 := r.Intn(10)
	this.Shardids = make([]uint32, v77)
	for i := 0; i < v77; i++ {
		this.Shardids[i] = uint32(r.Uint32())
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 6)
	}
	return this
}

func NewPopulatedNodeVCFinalBlock(r randyZilliqaMessage, easy bool) *NodeVCFinalBlock {
	this := &NodeVCFinalBlock{}
	this.Dsblocknumber = uint64(uint64(r.Uint32()))
	this.Consensusid = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Txblock = NewPopulatedProtoTxBlock(r, easy)
	}
	v78 := r.Intn(100)
	this.Statedelta = make([]byte, v78)
	for i := 0; i < v78; i++ {
		this.Statedelta[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		v79 := r.Intn(5)
		this.Vcblocks = make([]*ProtoVCBlock, v79)
		for i := 0; i < v79; i++ {
			this.Vcblocks[i] = NewPopulatedProtoVCBlock(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 6)
	}
	return this
}

func NewPopulatedNodeMBnForwardTransaction(r randyZilliqaMessage, easy bool) *NodeMBnForwardTransaction {
	this := &NodeMBnForwardTransaction{}
	if r.Intn(5) != 0 {
		this.Microblock = NewPopulatedProtoMicroBlock(r, easy)
	}
	if r.Intn(5) != 0 {
		v80 := r.Intn(5)
		this.Txnswithreceipt = make([]*ByteArray, v80)
		for i := 0; i < v80; i++ {
			this.Txnswithreceipt[i] = NewPopulatedByteArray(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedNodePendingTxn(r randyZilliqaMessage, easy bool) *NodePendingTxn {
	this := &NodePendingTxn{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedNodePendingTxn_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedNodePendingTxn_Data(r randyZilliqaMessage, easy bool) *NodePendingTxn_Data {
	this := &NodePendingTxn_Data{}
	if r.Intn(5) != 0 {
		v81 := r.Intn(5)
		this.Hashcodepair = make([]*NodePendingTxn_Data_Pair, v81)
		for i := 0; i < v81; i++ {
			this.Hashcodepair[i] = NewPopulatedNodePendingTxn_Data_Pair(r, easy)
		}
	}
	this.Epochnumber = uint64(uint64(r.Uint32()))
	this.Shardid = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 5)
	}
	return this
}

func NewPopulatedNodePendingTxn_Data_Pair(r randyZilliqaMessage, easy bool) *NodePendingTxn_Data_Pair {
	this := &NodePendingTxn_Data_Pair{}
	v82 := r.Intn(100)
	this.Txnhash = make([]byte, v82)
	for i := 0; i < v82; i++ {
		this.Txnhash[i] = byte(r.Intn(256))
	}
	this.Code = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedNodeVCBlock(r randyZilliqaMessage, easy bool) *NodeVCBlock {
	this := &NodeVCBlock{}
	if r.Intn(5) != 0 {
		this.Vcblock = NewPopulatedProtoVCBlock(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedNodeForwardTxnBlock(r randyZilliqaMessage, easy bool) *NodeForwardTxnBlock {
	this := &NodeForwardTxnBlock{}
	this.Epochnumber = uint64(uint64(r.Uint32()))
	this.Dsblocknum = uint64(uint64(r.Uint32()))
	this.Shardid = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		v83 := r.Intn(5)
		this.Transactions = make([]*ProtoTransaction, v83)
		for i := 0; i < v83; i++ {
			this.Transactions[i] = NewPopulatedProtoTransaction(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 7)
	}
	return this
}

func NewPopulatedNodeMicroBlockAnnouncement(r randyZilliqaMessage, easy bool) *NodeMicroBlockAnnouncement {
	this := &NodeMicroBlockAnnouncement{}
	if r.Intn(5) != 0 {
		this.Microblock = NewPopulatedProtoMicroBlock(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedNodeFallbackBlockAnnouncement(r randyZilliqaMessage, easy bool) *NodeFallbackBlockAnnouncement {
	this := &NodeFallbackBlockAnnouncement{}
	if r.Intn(5) != 0 {
		this.Fallbackblock = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedNodeFallbackBlock(r randyZilliqaMessage, easy bool) *NodeFallbackBlock {
	this := &NodeFallbackBlock{}
	if r.Intn(5) != 0 {
		this.Fallbackblock = NewPopulatedProtoFallbackBlock(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedNodeMissingTxnsErrorMsg(r randyZilliqaMessage, easy bool) *NodeMissingTxnsErrorMsg {
	this := &NodeMissingTxnsErrorMsg{}
	v84 := r.Intn(10)
	this.Txnhashes = make([][]byte, v84)
	for i := 0; i < v84; i++ {
		v85 := r.Intn(100)
		this.Txnhashes[i] = make([]byte, v85)
		for j := 0; j < v85; j++ {
			this.Txnhashes[i][j] = byte(r.Intn(256))
		}
	}
	this.Epochnum = uint64(uint64(r.Uint32()))
	this.Listenport = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupGetSeedPeers(r randyZilliqaMessage, easy bool) *LookupGetSeedPeers {
	this := &LookupGetSeedPeers{}
	this.Listenport = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedLookupSetSeedPeers(r randyZilliqaMessage, easy bool) *LookupSetSeedPeers {
	this := &LookupSetSeedPeers{}
	if r.Intn(5) != 0 {
		v86 := r.Intn(5)
		this.Candidateseeds = make([]*ByteArray, v86)
		for i := 0; i < v86; i++ {
			this.Candidateseeds[i] = NewPopulatedByteArray(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupGetDSInfoFromSeed(r randyZilliqaMessage, easy bool) *LookupGetDSInfoFromSeed {
	this := &LookupGetDSInfoFromSeed{}
	this.Listenport = uint32(r.Uint32())
	this.Initialds = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedLookupSetDSInfoFromSeed(r randyZilliqaMessage, easy bool) *LookupSetDSInfoFromSeed {
	this := &LookupSetDSInfoFromSeed{}
	if r.Intn(5) != 0 {
		this.Dscommittee = NewPopulatedProtoDSCommittee(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	this.Initialds = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 5)
	}
	return this
}

func NewPopulatedLookupGetDSBlockFromSeed(r randyZilliqaMessage, easy bool) *LookupGetDSBlockFromSeed {
	this := &LookupGetDSBlockFromSeed{}
	this.Lowblocknum = uint64(uint64(r.Uint32()))
	this.Highblocknum = uint64(uint64(r.Uint32()))
	this.Listenport = uint32(r.Uint32())
	this.Includeminerinfo = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 5)
	}
	return this
}

func NewPopulatedLookupSetDSBlockFromSeed(r randyZilliqaMessage, easy bool) *LookupSetDSBlockFromSeed {
	this := &LookupSetDSBlockFromSeed{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupSetDSBlockFromSeed_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupSetDSBlockFromSeed_Data(r randyZilliqaMessage, easy bool) *LookupSetDSBlockFromSeed_Data {
	this := &LookupSetDSBlockFromSeed_Data{}
	this.Lowblocknum = uint64(uint64(r.Uint32()))
	this.Highblocknum = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		v87 := r.Intn(5)
		this.Dsblocks = make([]*ProtoDSBlock, v87)
		for i := 0; i < v87; i++ {
			this.Dsblocks[i] = NewPopulatedProtoDSBlock(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupSetMinerInfoFromSeed(r randyZilliqaMessage, easy bool) *LookupSetMinerInfoFromSeed {
	this := &LookupSetMinerInfoFromSeed{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupSetMinerInfoFromSeed_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupSetMinerInfoFromSeed_MinerInfo(r randyZilliqaMessage, easy bool) *LookupSetMinerInfoFromSeed_MinerInfo {
	this := &LookupSetMinerInfoFromSeed_MinerInfo{}
	if r.Intn(5) != 0 {
		this.Minerinfodscomm = NewPopulatedProtoMinerInfoDSComm(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Minerinfoshards = NewPopulatedProtoMinerInfoShards(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedLookupSetMinerInfoFromSeed_Data(r randyZilliqaMessage, easy bool) *LookupSetMinerInfoFromSeed_Data {
	this := &LookupSetMinerInfoFromSeed_Data{}
	if r.Intn(5) != 0 {
		v88 := r.Intn(10)
		this.Minerinfoperds = make(map[uint64]*LookupSetMinerInfoFromSeed_MinerInfo)
		for i := 0; i < v88; i++ {
			this.Minerinfoperds[uint64(uint64(r.Uint32()))] = NewPopulatedLookupSetMinerInfoFromSeed_MinerInfo(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedLookupGetTxBlockFromSeed(r randyZilliqaMessage, easy bool) *LookupGetTxBlockFromSeed {
	this := &LookupGetTxBlockFromSeed{}
	this.Lowblocknum = uint64(uint64(r.Uint32()))
	this.Highblocknum = uint64(uint64(r.Uint32()))
	this.Listenport = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupSetTxBlockFromSeed(r randyZilliqaMessage, easy bool) *LookupSetTxBlockFromSeed {
	this := &LookupSetTxBlockFromSeed{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupSetTxBlockFromSeed_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupSetTxBlockFromSeed_Data(r randyZilliqaMessage, easy bool) *LookupSetTxBlockFromSeed_Data {
	this := &LookupSetTxBlockFromSeed_Data{}
	this.Lowblocknum = uint64(uint64(r.Uint32()))
	this.Highblocknum = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		v89 := r.Intn(5)
		this.Txblocks = make([]*ProtoTxBlock, v89)
		for i := 0; i < v89; i++ {
			this.Txblocks[i] = NewPopulatedProtoTxBlock(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupGetStateDeltaFromSeed(r randyZilliqaMessage, easy bool) *LookupGetStateDeltaFromSeed {
	this := &LookupGetStateDeltaFromSeed{}
	this.Blocknum = uint64(uint64(r.Uint32()))
	this.Listenport = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedLookupGetStateDeltasFromSeed(r randyZilliqaMessage, easy bool) *LookupGetStateDeltasFromSeed {
	this := &LookupGetStateDeltasFromSeed{}
	this.Lowblocknum = uint64(uint64(r.Uint32()))
	this.Highblocknum = uint64(uint64(r.Uint32()))
	this.Listenport = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupSetStateDeltaFromSeed(r randyZilliqaMessage, easy bool) *LookupSetStateDeltaFromSeed {
	this := &LookupSetStateDeltaFromSeed{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupSetStateDeltaFromSeed_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupSetStateDeltaFromSeed_Data(r randyZilliqaMessage, easy bool) *LookupSetStateDeltaFromSeed_Data {
	this := &LookupSetStateDeltaFromSeed_Data{}
	this.Blocknum = uint64(uint64(r.Uint32()))
	v90 := r.Intn(100)
	this.Statedelta = make([]byte, v90)
	for i := 0; i < v90; i++ {
		this.Statedelta[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedLookupSetStateDeltasFromSeed(r randyZilliqaMessage, easy bool) *LookupSetStateDeltasFromSeed {
	this := &LookupSetStateDeltasFromSeed{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupSetStateDeltasFromSeed_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupSetStateDeltasFromSeed_Data(r randyZilliqaMessage, easy bool) *LookupSetStateDeltasFromSeed_Data {
	this := &LookupSetStateDeltasFromSeed_Data{}
	this.Lowblocknum = uint64(uint64(r.Uint32()))
	this.Highblocknum = uint64(uint64(r.Uint32()))
	v91 := r.Intn(10)
	this.Statedeltas = make([][]byte, v91)
	for i := 0; i < v91; i++ {
		v92 := r.Intn(100)
		this.Statedeltas[i] = make([]byte, v92)
		for j := 0; j < v92; j++ {
			this.Statedeltas[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupGetStateFromSeed(r randyZilliqaMessage, easy bool) *LookupGetStateFromSeed {
	this := &LookupGetStateFromSeed{}
	this.Listenport = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedLookupSetStateFromSeed(r randyZilliqaMessage, easy bool) *LookupSetStateFromSeed {
	this := &LookupSetStateFromSeed{}
	if r.Intn(5) != 0 {
		this.Accountstore = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupSetLookupOffline(r randyZilliqaMessage, easy bool) *LookupSetLookupOffline {
	this := &LookupSetLookupOffline{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupSetLookupOffline_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupSetLookupOffline_Data(r randyZilliqaMessage, easy bool) *LookupSetLookupOffline_Data {
	this := &LookupSetLookupOffline_Data{}
	this.Msgtype = uint32(r.Uint32())
	this.Listenport = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedLookupSetLookupOnline(r randyZilliqaMessage, easy bool) *LookupSetLookupOnline {
	this := &LookupSetLookupOnline{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupSetLookupOnline_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupSetLookupOnline_Data(r randyZilliqaMessage, easy bool) *LookupSetLookupOnline_Data {
	this := &LookupSetLookupOnline_Data{}
	this.Msgtype = uint32(r.Uint32())
	this.Listenport = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedLookupGetOfflineLookups(r randyZilliqaMessage, easy bool) *LookupGetOfflineLookups {
	this := &LookupGetOfflineLookups{}
	this.Listenport = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedLookupSetOfflineLookups(r randyZilliqaMessage, easy bool) *LookupSetOfflineLookups {
	this := &LookupSetOfflineLookups{}
	if r.Intn(5) != 0 {
		v93 := r.Intn(5)
		this.Nodes = make([]*ByteArray, v93)
		for i := 0; i < v93; i++ {
			this.Nodes[i] = NewPopulatedByteArray(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupRaiseStartPoW(r randyZilliqaMessage, easy bool) *LookupRaiseStartPoW {
	this := &LookupRaiseStartPoW{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupRaiseStartPoW_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupRaiseStartPoW_Data(r randyZilliqaMessage, easy bool) *LookupRaiseStartPoW_Data {
	this := &LookupRaiseStartPoW_Data{}
	this.Msgtype = uint32(r.Uint32())
	this.Blocknumber = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedLookupGetStartPoWFromSeed(r randyZilliqaMessage, easy bool) *LookupGetStartPoWFromSeed {
	this := &LookupGetStartPoWFromSeed{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupGetStartPoWFromSeed_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupGetStartPoWFromSeed_Data(r randyZilliqaMessage, easy bool) *LookupGetStartPoWFromSeed_Data {
	this := &LookupGetStartPoWFromSeed_Data{}
	this.Listenport = uint32(r.Uint32())
	this.Blocknumber = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedLookupSetStartPoWFromSeed(r randyZilliqaMessage, easy bool) *LookupSetStartPoWFromSeed {
	this := &LookupSetStartPoWFromSeed{}
	this.Blocknumber = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupGetShardsFromSeed(r randyZilliqaMessage, easy bool) *LookupGetShardsFromSeed {
	this := &LookupGetShardsFromSeed{}
	this.Listenport = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedLookupSetShardsFromSeed(r randyZilliqaMessage, easy bool) *LookupSetShardsFromSeed {
	this := &LookupSetShardsFromSeed{}
	if r.Intn(5) != 0 {
		this.Sharding = NewPopulatedProtoShardingStructure(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupGetMicroBlockFromLookup(r randyZilliqaMessage, easy bool) *LookupGetMicroBlockFromLookup {
	this := &LookupGetMicroBlockFromLookup{}
	this.Portno = uint32(r.Uint32())
	v94 := r.Intn(10)
	this.Mbhashes = make([][]byte, v94)
	for i := 0; i < v94; i++ {
		v95 := r.Intn(100)
		this.Mbhashes[i] = make([]byte, v95)
		for j := 0; j < v95; j++ {
			this.Mbhashes[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedLookupSetMicroBlockFromLookup(r randyZilliqaMessage, easy bool) *LookupSetMicroBlockFromLookup {
	this := &LookupSetMicroBlockFromLookup{}
	if r.Intn(5) != 0 {
		v96 := r.Intn(5)
		this.Microblocks = make([]*ProtoMicroBlock, v96)
		for i := 0; i < v96; i++ {
			this.Microblocks[i] = NewPopulatedProtoMicroBlock(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupGetMicroBlockFromL2L(r randyZilliqaMessage, easy bool) *LookupGetMicroBlockFromL2L {
	this := &LookupGetMicroBlockFromL2L{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupGetMicroBlockFromL2L_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupGetMicroBlockFromL2L_Data(r randyZilliqaMessage, easy bool) *LookupGetMicroBlockFromL2L_Data {
	this := &LookupGetMicroBlockFromL2L_Data{}
	this.Portno = uint32(r.Uint32())
	v97 := r.Intn(10)
	this.Mbhashes = make([][]byte, v97)
	for i := 0; i < v97; i++ {
		v98 := r.Intn(100)
		this.Mbhashes[i] = make([]byte, v98)
		for j := 0; j < v98; j++ {
			this.Mbhashes[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedLookupForwardTxnsFromSeed(r randyZilliqaMessage, easy bool) *LookupForwardTxnsFromSeed {
	this := &LookupForwardTxnsFromSeed{}
	if r.Intn(5) != 0 {
		this.Shardtransactions = NewPopulatedProtoTransactionArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Dstransactions = NewPopulatedProtoTransactionArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedLookupGetTxnsFromLookup(r randyZilliqaMessage, easy bool) *LookupGetTxnsFromLookup {
	this := &LookupGetTxnsFromLookup{}
	this.Portno = uint32(r.Uint32())
	v99 := r.Intn(100)
	this.Mbhash = make([]byte, v99)
	for i := 0; i < v99; i++ {
		this.Mbhash[i] = byte(r.Intn(256))
	}
	v100 := r.Intn(10)
	this.Txnhashes = make([][]byte, v100)
	for i := 0; i < v100; i++ {
		v101 := r.Intn(100)
		this.Txnhashes[i] = make([]byte, v101)
		for j := 0; j < v101; j++ {
			this.Txnhashes[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupGetTxnsFromL2L(r randyZilliqaMessage, easy bool) *LookupGetTxnsFromL2L {
	this := &LookupGetTxnsFromL2L{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupGetTxnsFromL2L_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupGetTxnsFromL2L_Data(r randyZilliqaMessage, easy bool) *LookupGetTxnsFromL2L_Data {
	this := &LookupGetTxnsFromL2L_Data{}
	this.Portno = uint32(r.Uint32())
	v102 := r.Intn(100)
	this.Mbhash = make([]byte, v102)
	for i := 0; i < v102; i++ {
		this.Mbhash[i] = byte(r.Intn(256))
	}
	v103 := r.Intn(10)
	this.Txnhashes = make([][]byte, v103)
	for i := 0; i < v103; i++ {
		v104 := r.Intn(100)
		this.Txnhashes[i] = make([]byte, v104)
		for j := 0; j < v104; j++ {
			this.Txnhashes[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupSetTxnsFromLookup(r randyZilliqaMessage, easy bool) *LookupSetTxnsFromLookup {
	this := &LookupSetTxnsFromLookup{}
	v105 := r.Intn(100)
	this.Mbhash = make([]byte, v105)
	for i := 0; i < v105; i++ {
		this.Mbhash[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		v106 := r.Intn(5)
		this.Transactions = make([]*ByteArray, v106)
		for i := 0; i < v106; i++ {
			this.Transactions[i] = NewPopulatedByteArray(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 5)
	}
	return this
}

func NewPopulatedLookupGetDirectoryBlocksFromSeed(r randyZilliqaMessage, easy bool) *LookupGetDirectoryBlocksFromSeed {
	this := &LookupGetDirectoryBlocksFromSeed{}
	this.Portno = uint32(r.Uint32())
	this.Indexnum = uint64(uint64(r.Uint32()))
	this.Includeminerinfo = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupSetDirectoryBlocksFromSeed(r randyZilliqaMessage, easy bool) *LookupSetDirectoryBlocksFromSeed {
	this := &LookupSetDirectoryBlocksFromSeed{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupSetDirectoryBlocksFromSeed_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupSetDirectoryBlocksFromSeed_Data(r randyZilliqaMessage, easy bool) *LookupSetDirectoryBlocksFromSeed_Data {
	this := &LookupSetDirectoryBlocksFromSeed_Data{}
	this.Indexnum = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		v107 := r.Intn(5)
		this.Dirblocks = make([]*ProtoSingleDirectoryBlock, v107)
		for i := 0; i < v107; i++ {
			this.Dirblocks[i] = NewPopulatedProtoSingleDirectoryBlock(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedConsensusAnnouncement(r randyZilliqaMessage, easy bool) *ConsensusAnnouncement {
	this := &ConsensusAnnouncement{}
	if r.Intn(5) != 0 {
		this.Consensusinfo = NewPopulatedConsensusAnnouncement_ConsensusInfo(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	oneofNumber_Announcement := []int32{4, 5, 6, 7, 8}[r.Intn(5)]
	switch oneofNumber_Announcement {
	case 4:
		this.Announcement = NewPopulatedConsensusAnnouncement_Dsblock(r, easy)
	case 5:
		this.Announcement = NewPopulatedConsensusAnnouncement_Microblock(r, easy)
	case 6:
		this.Announcement = NewPopulatedConsensusAnnouncement_Finalblock(r, easy)
	case 7:
		this.Announcement = NewPopulatedConsensusAnnouncement_Vcblock(r, easy)
	case 8:
		this.Announcement = NewPopulatedConsensusAnnouncement_Fallbackblock(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Finalsignature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 10)
	}
	return this
}

func NewPopulatedConsensusAnnouncement_Dsblock(r randyZilliqaMessage, easy bool) *ConsensusAnnouncement_Dsblock {
	this := &ConsensusAnnouncement_Dsblock{}
	this.Dsblock = NewPopulatedDSDSBlockAnnouncement(r, easy)
	return this
}
func NewPopulatedConsensusAnnouncement_Microblock(r randyZilliqaMessage, easy bool) *ConsensusAnnouncement_Microblock {
	this := &ConsensusAnnouncement_Microblock{}
	this.Microblock = NewPopulatedNodeMicroBlockAnnouncement(r, easy)
	return this
}
func NewPopulatedConsensusAnnouncement_Finalblock(r randyZilliqaMessage, easy bool) *ConsensusAnnouncement_Finalblock {
	this := &ConsensusAnnouncement_Finalblock{}
	this.Finalblock = NewPopulatedDSFinalBlockAnnouncement(r, easy)
	return this
}
func NewPopulatedConsensusAnnouncement_Vcblock(r randyZilliqaMessage, easy bool) *ConsensusAnnouncement_Vcblock {
	this := &ConsensusAnnouncement_Vcblock{}
	this.Vcblock = NewPopulatedDSVCBlockAnnouncement(r, easy)
	return this
}
func NewPopulatedConsensusAnnouncement_Fallbackblock(r randyZilliqaMessage, easy bool) *ConsensusAnnouncement_Fallbackblock {
	this := &ConsensusAnnouncement_Fallbackblock{}
	this.Fallbackblock = NewPopulatedNodeFallbackBlockAnnouncement(r, easy)
	return this
}
func NewPopulatedConsensusAnnouncement_ConsensusInfo(r randyZilliqaMessage, easy bool) *ConsensusAnnouncement_ConsensusInfo {
	this := &ConsensusAnnouncement_ConsensusInfo{}
	this.Consensusid = uint32(r.Uint32())
	this.Blocknumber = uint64(uint64(r.Uint32()))
	v108 := r.Intn(100)
	this.Blockhash = make([]byte, v108)
	for i := 0; i < v108; i++ {
		this.Blockhash[i] = byte(r.Intn(256))
	}
	this.Leaderid = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 5)
	}
	return this
}

func NewPopulatedConsensusCommit(r randyZilliqaMessage, easy bool) *ConsensusCommit {
	this := &ConsensusCommit{}
	if r.Intn(5) != 0 {
		this.Consensusinfo = NewPopulatedConsensusCommit_ConsensusInfo(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedConsensusCommit_ConsensusInfo(r randyZilliqaMessage, easy bool) *ConsensusCommit_ConsensusInfo {
	this := &ConsensusCommit_ConsensusInfo{}
	this.Consensusid = uint32(r.Uint32())
	this.Blocknumber = uint64(uint64(r.Uint32()))
	v109 := r.Intn(100)
	this.Blockhash = make([]byte, v109)
	for i := 0; i < v109; i++ {
		this.Blockhash[i] = byte(r.Intn(256))
	}
	this.Backupid = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Commitpoint = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Commitpointhash = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 7)
	}
	return this
}

func NewPopulatedConsensusChallenge(r randyZilliqaMessage, easy bool) *ConsensusChallenge {
	this := &ConsensusChallenge{}
	if r.Intn(5) != 0 {
		this.Consensusinfo = NewPopulatedConsensusChallenge_ConsensusInfo(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedConsensusChallenge_SubsetInfo(r randyZilliqaMessage, easy bool) *ConsensusChallenge_SubsetInfo {
	this := &ConsensusChallenge_SubsetInfo{}
	if r.Intn(5) != 0 {
		this.Aggregatedcommit = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Aggregatedkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Challenge = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedConsensusChallenge_ConsensusInfo(r randyZilliqaMessage, easy bool) *ConsensusChallenge_ConsensusInfo {
	this := &ConsensusChallenge_ConsensusInfo{}
	this.Consensusid = uint32(r.Uint32())
	this.Blocknumber = uint64(uint64(r.Uint32()))
	v110 := r.Intn(100)
	this.Blockhash = make([]byte, v110)
	for i := 0; i < v110; i++ {
		this.Blockhash[i] = byte(r.Intn(256))
	}
	this.Leaderid = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		v111 := r.Intn(5)
		this.Subsetinfo = make([]*ConsensusChallenge_SubsetInfo, v111)
		for i := 0; i < v111; i++ {
			this.Subsetinfo[i] = NewPopulatedConsensusChallenge_SubsetInfo(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 6)
	}
	return this
}

func NewPopulatedConsensusResponse(r randyZilliqaMessage, easy bool) *ConsensusResponse {
	this := &ConsensusResponse{}
	if r.Intn(5) != 0 {
		this.Consensusinfo = NewPopulatedConsensusResponse_ConsensusInfo(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedConsensusResponse_SubsetInfo(r randyZilliqaMessage, easy bool) *ConsensusResponse_SubsetInfo {
	this := &ConsensusResponse_SubsetInfo{}
	if r.Intn(5) != 0 {
		this.Response = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedConsensusResponse_ConsensusInfo(r randyZilliqaMessage, easy bool) *ConsensusResponse_ConsensusInfo {
	this := &ConsensusResponse_ConsensusInfo{}
	this.Consensusid = uint32(r.Uint32())
	this.Blocknumber = uint64(uint64(r.Uint32()))
	v112 := r.Intn(100)
	this.Blockhash = make([]byte, v112)
	for i := 0; i < v112; i++ {
		this.Blockhash[i] = byte(r.Intn(256))
	}
	this.Backupid = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		v113 := r.Intn(5)
		this.Subsetinfo = make([]*ConsensusResponse_SubsetInfo, v113)
		for i := 0; i < v113; i++ {
			this.Subsetinfo[i] = NewPopulatedConsensusResponse_SubsetInfo(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 6)
	}
	return this
}

func NewPopulatedConsensusCollectiveSig(r randyZilliqaMessage, easy bool) *ConsensusCollectiveSig {
	this := &ConsensusCollectiveSig{}
	if r.Intn(5) != 0 {
		this.Consensusinfo = NewPopulatedConsensusCollectiveSig_ConsensusInfo(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedConsensusCollectiveSig_ConsensusInfo(r randyZilliqaMessage, easy bool) *ConsensusCollectiveSig_ConsensusInfo {
	this := &ConsensusCollectiveSig_ConsensusInfo{}
	this.Consensusid = uint32(r.Uint32())
	this.Blocknumber = uint64(uint64(r.Uint32()))
	v114 := r.Intn(100)
	this.Blockhash = make([]byte, v114)
	for i := 0; i < v114; i++ {
		this.Blockhash[i] = byte(r.Intn(256))
	}
	this.Leaderid = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Collectivesig = NewPopulatedByteArray(r, easy)
	}
	v115 := r.Intn(10)
	this.Bitmap = make([]bool, v115)
	for i := 0; i < v115; i++ {
		this.Bitmap[i] = bool(bool(r.Intn(2) == 0))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 7)
	}
	return this
}

func NewPopulatedConsensusCommitFailure(r randyZilliqaMessage, easy bool) *ConsensusCommitFailure {
	this := &ConsensusCommitFailure{}
	if r.Intn(5) != 0 {
		this.Consensusinfo = NewPopulatedConsensusCommitFailure_ConsensusInfo(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedConsensusCommitFailure_ConsensusInfo(r randyZilliqaMessage, easy bool) *ConsensusCommitFailure_ConsensusInfo {
	this := &ConsensusCommitFailure_ConsensusInfo{}
	this.Consensusid = uint32(r.Uint32())
	this.Blocknumber = uint64(uint64(r.Uint32()))
	v116 := r.Intn(100)
	this.Blockhash = make([]byte, v116)
	for i := 0; i < v116; i++ {
		this.Blockhash[i] = byte(r.Intn(256))
	}
	this.Backupid = uint32(r.Uint32())
	v117 := r.Intn(100)
	this.Errormsg = make([]byte, v117)
	for i := 0; i < v117; i++ {
		this.Errormsg[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 6)
	}
	return this
}

func NewPopulatedConsensusConsensusFailure(r randyZilliqaMessage, easy bool) *ConsensusConsensusFailure {
	this := &ConsensusConsensusFailure{}
	if r.Intn(5) != 0 {
		this.Consensusinfo = NewPopulatedConsensusConsensusFailure_ConsensusInfo(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedConsensusConsensusFailure_ConsensusInfo(r randyZilliqaMessage, easy bool) *ConsensusConsensusFailure_ConsensusInfo {
	this := &ConsensusConsensusFailure_ConsensusInfo{}
	this.Consensusid = uint32(r.Uint32())
	this.Blocknumber = uint64(uint64(r.Uint32()))
	v118 := r.Intn(100)
	this.Blockhash = make([]byte, v118)
	for i := 0; i < v118; i++ {
		this.Blockhash[i] = byte(r.Intn(256))
	}
	this.Leaderid = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 5)
	}
	return this
}

func NewPopulatedLookupGetDSTxBlockFromSeed(r randyZilliqaMessage, easy bool) *LookupGetDSTxBlockFromSeed {
	this := &LookupGetDSTxBlockFromSeed{}
	this.Dslowblocknum = uint64(uint64(r.Uint32()))
	this.Dshighblocknum = uint64(uint64(r.Uint32()))
	this.Txlowblocknum = uint64(uint64(r.Uint32()))
	this.Txhighblocknum = uint64(uint64(r.Uint32()))
	this.Listenport = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 6)
	}
	return this
}

func NewPopulatedVCNodeSetDSTxBlockFromSeed(r randyZilliqaMessage, easy bool) *VCNodeSetDSTxBlockFromSeed {
	this := &VCNodeSetDSTxBlockFromSeed{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedVCNodeSetDSTxBlockFromSeed_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedVCNodeSetDSTxBlockFromSeed_Data(r randyZilliqaMessage, easy bool) *VCNodeSetDSTxBlockFromSeed_Data {
	this := &VCNodeSetDSTxBlockFromSeed_Data{}
	if r.Intn(5) != 0 {
		v119 := r.Intn(5)
		this.Dsblocks = make([]*ProtoDSBlock, v119)
		for i := 0; i < v119; i++ {
			this.Dsblocks[i] = NewPopulatedProtoDSBlock(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v120 := r.Intn(5)
		this.Txblocks = make([]*ProtoTxBlock, v120)
		for i := 0; i < v120; i++ {
			this.Txblocks[i] = NewPopulatedProtoTxBlock(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedNodeSetShardNodeNetworkInfoUpdate(r randyZilliqaMessage, easy bool) *NodeSetShardNodeNetworkInfoUpdate {
	this := &NodeSetShardNodeNetworkInfoUpdate{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedNodeSetShardNodeNetworkInfoUpdate_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedNodeSetShardNodeNetworkInfoUpdate_Data(r randyZilliqaMessage, easy bool) *NodeSetShardNodeNetworkInfoUpdate_Data {
	this := &NodeSetShardNodeNetworkInfoUpdate_Data{}
	this.Dsepochnumber = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.Shardnodepubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Shardnodenewnetworkinfo = NewPopulatedProtoPeer(r, easy)
	}
	this.Timestamp = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 5)
	}
	return this
}

func NewPopulatedDSLookupSetDSGuardNetworkInfoUpdate(r randyZilliqaMessage, easy bool) *DSLookupSetDSGuardNetworkInfoUpdate {
	this := &DSLookupSetDSGuardNetworkInfoUpdate{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedDSLookupSetDSGuardNetworkInfoUpdate_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedDSLookupSetDSGuardNetworkInfoUpdate_Data(r randyZilliqaMessage, easy bool) *DSLookupSetDSGuardNetworkInfoUpdate_Data {
	this := &DSLookupSetDSGuardNetworkInfoUpdate_Data{}
	this.Dsepochnumber = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.Dsguardpubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Dsguardnewnetworkinfo = NewPopulatedProtoPeer(r, easy)
	}
	this.Timestamp = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 5)
	}
	return this
}

func NewPopulatedNodeGetGuardNodeNetworkInfoUpdate(r randyZilliqaMessage, easy bool) *NodeGetGuardNodeNetworkInfoUpdate {
	this := &NodeGetGuardNodeNetworkInfoUpdate{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedNodeGetGuardNodeNetworkInfoUpdate_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedNodeGetGuardNodeNetworkInfoUpdate_Data(r randyZilliqaMessage, easy bool) *NodeGetGuardNodeNetworkInfoUpdate_Data {
	this := &NodeGetGuardNodeNetworkInfoUpdate_Data{}
	this.Portno = uint32(r.Uint32())
	this.Dsepochnumber = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoDSGuardUpdateStruct(r randyZilliqaMessage, easy bool) *ProtoDSGuardUpdateStruct {
	this := &ProtoDSGuardUpdateStruct{}
	if r.Intn(5) != 0 {
		this.Dsguardpubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Dsguardnewnetworkinfo = NewPopulatedProtoPeer(r, easy)
	}
	this.Timestamp = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedNodeSetGuardNodeNetworkInfoUpdate(r randyZilliqaMessage, easy bool) *NodeSetGuardNodeNetworkInfoUpdate {
	this := &NodeSetGuardNodeNetworkInfoUpdate{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedNodeSetGuardNodeNetworkInfoUpdate_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Lookuppubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedNodeSetGuardNodeNetworkInfoUpdate_Data(r randyZilliqaMessage, easy bool) *NodeSetGuardNodeNetworkInfoUpdate_Data {
	this := &NodeSetGuardNodeNetworkInfoUpdate_Data{}
	if r.Intn(5) != 0 {
		v121 := r.Intn(5)
		this.Dsguardupdatestruct = make([]*ProtoDSGuardUpdateStruct, v121)
		for i := 0; i < v121; i++ {
			this.Dsguardupdatestruct[i] = NewPopulatedProtoDSGuardUpdateStruct(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedSeedSetHistoricalDB(r randyZilliqaMessage, easy bool) *SeedSetHistoricalDB {
	this := &SeedSetHistoricalDB{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedSeedSetHistoricalDB_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedSeedSetHistoricalDB_Data(r randyZilliqaMessage, easy bool) *SeedSetHistoricalDB_Data {
	this := &SeedSetHistoricalDB_Data{}
	this.Code = uint32(r.Uint32())
	this.Path = string(randStringZilliqaMessage(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedNodeRemoveFromBlacklist(r randyZilliqaMessage, easy bool) *NodeRemoveFromBlacklist {
	this := &NodeRemoveFromBlacklist{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedNodeRemoveFromBlacklist_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedNodeRemoveFromBlacklist_Data(r randyZilliqaMessage, easy bool) *NodeRemoveFromBlacklist_Data {
	this := &NodeRemoveFromBlacklist_Data{}
	if r.Intn(5) != 0 {
		this.IpAddress = NewPopulatedByteArray(r, easy)
	}
	this.Dsepochnumber = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedProtoCosigsRewardsStructure(r randyZilliqaMessage, easy bool) *ProtoCosigsRewardsStructure {
	this := &ProtoCosigsRewardsStructure{}
	this.Epochnumber = uint64(uint64(r.Uint32()))
	this.Shardid = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Shardid *= -1
	}
	if r.Intn(5) != 0 {
		this.Blockbase = NewPopulatedProtoBlockBase(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Rewards = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 5)
	}
	return this
}

func NewPopulatedLookupGetCosigsRewardsFromSeed(r randyZilliqaMessage, easy bool) *LookupGetCosigsRewardsFromSeed {
	this := &LookupGetCosigsRewardsFromSeed{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupGetCosigsRewardsFromSeed_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupGetCosigsRewardsFromSeed_Data(r randyZilliqaMessage, easy bool) *LookupGetCosigsRewardsFromSeed_Data {
	this := &LookupGetCosigsRewardsFromSeed_Data{}
	this.Portno = uint32(r.Uint32())
	this.Epochnumber = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedLookupSetCosigsRewardsFromSeed(r randyZilliqaMessage, easy bool) *LookupSetCosigsRewardsFromSeed {
	this := &LookupSetCosigsRewardsFromSeed{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupSetCosigsRewardsFromSeed_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupSetCosigsRewardsFromSeed_Data(r randyZilliqaMessage, easy bool) *LookupSetCosigsRewardsFromSeed_Data {
	this := &LookupSetCosigsRewardsFromSeed_Data{}
	if r.Intn(5) != 0 {
		v122 := r.Intn(5)
		this.Cosigsrewards = make([]*ProtoCosigsRewardsStructure, v122)
		for i := 0; i < v122; i++ {
			this.Cosigsrewards[i] = NewPopulatedProtoCosigsRewardsStructure(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 2)
	}
	return this
}

func NewPopulatedLookupGetVCFinalBlockFromL2L(r randyZilliqaMessage, easy bool) *LookupGetVCFinalBlockFromL2L {
	this := &LookupGetVCFinalBlockFromL2L{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupGetVCFinalBlockFromL2L_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupGetVCFinalBlockFromL2L_Data(r randyZilliqaMessage, easy bool) *LookupGetVCFinalBlockFromL2L_Data {
	this := &LookupGetVCFinalBlockFromL2L_Data{}
	this.Blocknum = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.Sender = NewPopulatedProtoPeer(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedLookupGetDSBlockFromL2L(r randyZilliqaMessage, easy bool) *LookupGetDSBlockFromL2L {
	this := &LookupGetDSBlockFromL2L{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupGetDSBlockFromL2L_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupGetDSBlockFromL2L_Data(r randyZilliqaMessage, easy bool) *LookupGetDSBlockFromL2L_Data {
	this := &LookupGetDSBlockFromL2L_Data{}
	this.Blocknum = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.Sender = NewPopulatedProtoPeer(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 3)
	}
	return this
}

func NewPopulatedLookupGetMBnForwardTxnFromL2L(r randyZilliqaMessage, easy bool) *LookupGetMBnForwardTxnFromL2L {
	this := &LookupGetMBnForwardTxnFromL2L{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupGetMBnForwardTxnFromL2L_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupGetMBnForwardTxnFromL2L_Data(r randyZilliqaMessage, easy bool) *LookupGetMBnForwardTxnFromL2L_Data {
	this := &LookupGetMBnForwardTxnFromL2L_Data{}
	this.Blocknum = uint64(uint64(r.Uint32()))
	this.ShardId = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Sender = NewPopulatedProtoPeer(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupGetPendingTxnFromL2L(r randyZilliqaMessage, easy bool) *LookupGetPendingTxnFromL2L {
	this := &LookupGetPendingTxnFromL2L{}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedLookupGetPendingTxnFromL2L_Data(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Pubkey = NewPopulatedByteArray(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Signature = NewPopulatedByteArray(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

func NewPopulatedLookupGetPendingTxnFromL2L_Data(r randyZilliqaMessage, easy bool) *LookupGetPendingTxnFromL2L_Data {
	this := &LookupGetPendingTxnFromL2L_Data{}
	this.Blocknum = uint64(uint64(r.Uint32()))
	this.ShardId = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Sender = NewPopulatedProtoPeer(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedZilliqaMessage(r, 4)
	}
	return this
}

type randyZilliqaMessage interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneZilliqaMessage(r randyZilliqaMessage) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringZilliqaMessage(r randyZilliqaMessage) string {
	v123 := r.Intn(100)
	tmps := make([]rune, v123)
	for i := 0; i < v123; i++ {
		tmps[i] = randUTF8RuneZilliqaMessage(r)
	}
	return string(tmps)
}
func randUnrecognizedZilliqaMessage(r randyZilliqaMessage, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldZilliqaMessage(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldZilliqaMessage(dAtA []byte, r randyZilliqaMessage, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateZilliqaMessage(dAtA, uint64(key))
		v124 := r.Int63()
		if r.Intn(2) == 0 {
			v124 *= -1
		}
		dAtA = encodeVarintPopulateZilliqaMessage(dAtA, uint64(v124))
	case 1:
		dAtA = encodeVarintPopulateZilliqaMessage(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateZilliqaMessage(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateZilliqaMessage(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateZilliqaMessage(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateZilliqaMessage(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ByteArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoBlockLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oneof1 != nil {
		n += m.Oneof1.Size()
	}
	if m.Oneof2 != nil {
		n += m.Oneof2.Size()
	}
	if m.Oneof3 != nil {
		n += m.Oneof3.Size()
	}
	if m.Oneof4 != nil {
		n += m.Oneof4.Size()
	}
	l = len(m.Blockhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoBlockLink_Version) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Version))
	return n
}
func (m *ProtoBlockLink_Index) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Index))
	return n
}
func (m *ProtoBlockLink_Dsindex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Dsindex))
	return n
}
func (m *ProtoBlockLink_Blocktype) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Blocktype))
	return n
}
func (m *ProtoBlockBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Blockhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Cosigs != nil {
		l = m.Cosigs.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoBlockBase_CoSignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cs1 != nil {
		l = m.Cs1.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if len(m.B1) > 0 {
		n += 1 + sovZilliqaMessage(uint64(len(m.B1))) + len(m.B1)*1
	}
	if m.Cs2 != nil {
		l = m.Cs2.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if len(m.B2) > 0 {
		n += 1 + sovZilliqaMessage(uint64(len(m.B2))) + len(m.B2)*1
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoBlockHeaderBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Version))
	}
	l = len(m.Committeehash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Prevhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoDSBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Blockbase != nil {
		l = m.Blockbase.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoDSBlock_DSBlockHashSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Shardinghash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Reservedfield)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoDSBlock_DSBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blockheaderbase != nil {
		l = m.Blockheaderbase.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Dsdifficulty != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Dsdifficulty))
	}
	if m.Difficulty != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Difficulty))
	}
	l = len(m.Prevhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Leaderpubkey != nil {
		l = m.Leaderpubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Oneof6 != nil {
		n += m.Oneof6.Size()
	}
	if m.Oneof7 != nil {
		n += m.Oneof7.Size()
	}
	if m.Gasprice != nil {
		l = m.Gasprice.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Swinfo != nil {
		l = m.Swinfo.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if len(m.Dswinners) > 0 {
		for _, e := range m.Dswinners {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.Hash != nil {
		l = m.Hash.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if len(m.Dsremoved) > 0 {
		for _, e := range m.Dsremoved {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if len(m.Proposals) > 0 {
		for _, e := range m.Proposals {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoDSBlock_DSBlockHeader_Blocknum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Blocknum))
	return n
}
func (m *ProtoDSBlock_DSBlockHeader_Epochnum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Epochnum))
	return n
}
func (m *ProtoDSBlock_DSBlockHeader_PowDSWinners) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Val != nil {
		l = m.Val.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoDSBlock_DSBlockHeader_Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Value))
	}
	if m.Count != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoDSBlock_DSBlockHeader_Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposalid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Proposalid))
	}
	if len(m.Dsvotes) > 0 {
		for _, e := range m.Dsvotes {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if len(m.Minervotes) > 0 {
		for _, e := range m.Minervotes {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoDSNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoDSCommittee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Version))
	}
	if len(m.Dsnodes) > 0 {
		for _, e := range m.Dsnodes {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoMicroBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if len(m.Tranhashes) > 0 {
		for _, b := range m.Tranhashes {
			l = len(b)
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.Blockbase != nil {
		l = m.Blockbase.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoMicroBlock_MicroBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blockheaderbase != nil {
		l = m.Blockheaderbase.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Oneof2 != nil {
		n += m.Oneof2.Size()
	}
	if m.Gaslimit != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Gaslimit))
	}
	if m.Oneof4 != nil {
		n += m.Oneof4.Size()
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Prevhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Oneof7 != nil {
		n += m.Oneof7.Size()
	}
	l = len(m.Txroothash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Oneof9 != nil {
		n += m.Oneof9.Size()
	}
	if m.Minerpubkey != nil {
		l = m.Minerpubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Dsblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Dsblocknum))
	}
	l = len(m.Statedeltahash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Tranreceipthash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoMicroBlock_MicroBlockHeader_Shardid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Shardid))
	return n
}
func (m *ProtoMicroBlock_MicroBlockHeader_Gasused) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Gasused))
	return n
}
func (m *ProtoMicroBlock_MicroBlockHeader_Epochnum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Epochnum))
	return n
}
func (m *ProtoMicroBlock_MicroBlockHeader_Numtxs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Numtxs))
	return n
}
func (m *ProtoShardingStructure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Version))
	}
	if len(m.Shards) > 0 {
		for _, e := range m.Shards {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoShardingStructure_Member) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Peerinfo != nil {
		l = m.Peerinfo.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Oneof3 != nil {
		n += m.Oneof3.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoShardingStructure_Member_Reputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Reputation))
	return n
}
func (m *ProtoShardingStructure_Shard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoMbInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mbhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Txroot)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Oneof3 != nil {
		n += m.Oneof3.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoMbInfo_Shardid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Shardid))
	return n
}
func (m *ProtoTxBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if len(m.Mbinfos) > 0 {
		for _, e := range m.Mbinfos {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.Blockbase != nil {
		l = m.Blockbase.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoTxBlock_TxBlockHashSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stateroothash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Statedeltahash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Mbinfohash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoTxBlock_TxBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blockheaderbase != nil {
		l = m.Blockheaderbase.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Gaslimit != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Gaslimit))
	}
	if m.Oneof3 != nil {
		n += m.Oneof3.Size()
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Prevhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Oneof6 != nil {
		n += m.Oneof6.Size()
	}
	if m.Hash != nil {
		l = m.Hash.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Oneof8 != nil {
		n += m.Oneof8.Size()
	}
	if m.Minerpubkey != nil {
		l = m.Minerpubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Oneof10 != nil {
		n += m.Oneof10.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoTxBlock_TxBlockHeader_Gasused) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Gasused))
	return n
}
func (m *ProtoTxBlock_TxBlockHeader_Blocknum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Blocknum))
	return n
}
func (m *ProtoTxBlock_TxBlockHeader_Numtxs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Numtxs))
	return n
}
func (m *ProtoTxBlock_TxBlockHeader_Dsblocknum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Dsblocknum))
	return n
}
func (m *ProtoVCBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Blockbase != nil {
		l = m.Blockbase.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoVCBlock_VCBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blockheaderbase != nil {
		l = m.Blockheaderbase.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Viewchangedsepochno != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Viewchangedsepochno))
	}
	if m.Viewchangeepochno != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Viewchangeepochno))
	}
	if m.Oneof4 != nil {
		n += m.Oneof4.Size()
	}
	if m.Candidateleadernetworkinfo != nil {
		l = m.Candidateleadernetworkinfo.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Candidateleaderpubkey != nil {
		l = m.Candidateleaderpubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Oneof7 != nil {
		n += m.Oneof7.Size()
	}
	if len(m.Faultyleaders) > 0 {
		for _, e := range m.Faultyleaders {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	l = len(m.Prevhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoVCBlock_VCBlockHeader_Viewchangestate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Viewchangestate))
	return n
}
func (m *ProtoVCBlock_VCBlockHeader_Vccounter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Vccounter))
	return n
}
func (m *ProtoFallbackBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Blockbase != nil {
		l = m.Blockbase.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoFallbackBlock_FallbackBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blockheaderbase != nil {
		l = m.Blockheaderbase.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Fallbackdsepochno != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Fallbackdsepochno))
	}
	if m.Fallbackepochno != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Fallbackepochno))
	}
	if m.Fallbackstate != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Fallbackstate))
	}
	l = len(m.Stateroothash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Leaderconsensusid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Leaderconsensusid))
	}
	if m.Leadernetworkinfo != nil {
		l = m.Leadernetworkinfo.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Leaderpubkey != nil {
		l = m.Leaderpubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Shardid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Shardid))
	}
	l = len(m.Prevhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoDiagnosticDataNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Shards != nil {
		l = m.Shards.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Dscommittee != nil {
		l = m.Dscommittee.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoDiagnosticDataCoinbase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nodecount != nil {
		l = m.Nodecount.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Sigcount != nil {
		l = m.Sigcount.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Lookupcount != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Lookupcount))
	}
	if m.Totalreward != nil {
		l = m.Totalreward.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Basereward != nil {
		l = m.Basereward.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Baserewardeach != nil {
		l = m.Baserewardeach.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Lookupreward != nil {
		l = m.Lookupreward.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Rewardeachlookup != nil {
		l = m.Rewardeachlookup.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Nodereward != nil {
		l = m.Nodereward.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Rewardeach != nil {
		l = m.Rewardeach.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Balanceleft != nil {
		l = m.Balanceleft.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Luckydrawwinnerkey != nil {
		l = m.Luckydrawwinnerkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Luckydrawwinneraddr)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoMinerInfoDSComm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dsnodes) > 0 {
		for _, e := range m.Dsnodes {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if len(m.Dsnodesejected) > 0 {
		for _, e := range m.Dsnodesejected {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoMinerInfoDSComm_Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoMinerInfoShards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Shards) > 0 {
		for _, e := range m.Shards {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoMinerInfoShards_Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoMinerInfoShards_Shard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Shardsize != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Shardsize))
	}
	if len(m.Shardnodes) > 0 {
		for _, e := range m.Shardnodes {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoAccountBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Version))
	}
	if m.Balance != nil {
		l = m.Balance.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Oneof3 != nil {
		n += m.Oneof3.Size()
	}
	l = len(m.Codehash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Storageroot)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoAccountBase_Nonce) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Nonce))
	return n
}
func (m *ProtoAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if len(m.Storage) > 0 {
		for _, e := range m.Storage {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.Numbersign {
		n += 2
	}
	if len(m.Storage2) > 0 {
		for _, e := range m.Storage2 {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if len(m.Todelete) > 0 {
		for _, s := range m.Todelete {
			l = len(s)
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	l = len(m.Initdata)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoAccount_StorageData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Keyhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoAccount_StorageData2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoStateIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Index) > 0 {
		for _, b := range m.Index {
			l = len(b)
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoStateData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Version))
	}
	l = len(m.Vname)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Ismutable {
		n += 2
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoAccountStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoAccountStore_AddressAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipaddress != nil {
		l = m.Ipaddress.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Oneof2 != nil {
		n += m.Oneof2.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoPeer_Listenporthost) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Listenporthost))
	return n
}
func (m *ProtoPoWSolution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Nonce))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Mixhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Oneof4 != nil {
		n += m.Oneof4.Size()
	}
	if m.Gasprice != nil {
		l = m.Gasprice.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Govdata != nil {
		l = m.Govdata.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoPoWSolution_Lookupid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Lookupid))
	return n
}
func (m *ProtoCommittee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoShardingStructureWithPoWSolns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Shards) > 0 {
		for _, e := range m.Shards {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoShardingStructureWithPoWSolns_Member) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Peerinfo != nil {
		l = m.Peerinfo.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Oneof3 != nil {
		n += m.Oneof3.Size()
	}
	if m.Powsoln != nil {
		l = m.Powsoln.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoShardingStructureWithPoWSolns_Member_Reputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Reputation))
	return n
}
func (m *ProtoShardingStructureWithPoWSolns_Shard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoDSWinnerPoW) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Powsoln != nil {
		l = m.Powsoln.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoTransactionCoreInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Version))
	}
	if m.Oneof2 != nil {
		n += m.Oneof2.Size()
	}
	l = len(m.Toaddr)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Senderpubkey != nil {
		l = m.Senderpubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Gasprice != nil {
		l = m.Gasprice.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Gaslimit != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Gaslimit))
	}
	if m.Oneof8 != nil {
		n += m.Oneof8.Size()
	}
	if m.Oneof9 != nil {
		n += m.Oneof9.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoTransactionCoreInfo_Nonce) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Nonce))
	return n
}
func (m *ProtoTransactionCoreInfo_Code) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		l = len(m.Code)
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	return n
}
func (m *ProtoTransactionCoreInfo_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	return n
}
func (m *ProtoTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tranid)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoTxnFileOffset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Offsetinfile) > 0 {
		l = 0
		for _, e := range m.Offsetinfile {
			l += sovZilliqaMessage(uint64(e))
		}
		n += 1 + sovZilliqaMessage(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoTransactionArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoTransactionReceipt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receipt)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Oneof2 != nil {
		n += m.Oneof2.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoTransactionReceipt_Cumgas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZilliqaMessage(uint64(m.Cumgas))
	return n
}
func (m *ProtoTransactionWithReceipt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Receipt != nil {
		l = m.Receipt.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoBloomFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Salt) > 0 {
		l = 0
		for _, e := range m.Salt {
			l += sovZilliqaMessage(uint64(e))
		}
		n += 1 + sovZilliqaMessage(uint64(l)) + l
	}
	l = len(m.Bittable)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Saltcount != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Saltcount))
	}
	if m.Tablesize != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Tablesize))
	}
	if m.Projectedelementcount != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Projectedelementcount))
	}
	if m.Insertedelementcount != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Insertedelementcount))
	}
	if m.Randomseed != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Randomseed))
	}
	if m.Probability != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoSWInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Zilliqamajorversion != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Zilliqamajorversion))
	}
	if m.Zilliqaminorversion != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Zilliqaminorversion))
	}
	if m.Zilliqafixversion != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Zilliqafixversion))
	}
	if m.Zilliqaupgradeds != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Zilliqaupgradeds))
	}
	if m.Zilliqacommit != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Zilliqacommit))
	}
	if m.Scillamajorversion != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Scillamajorversion))
	}
	if m.Scillaminorversion != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Scillaminorversion))
	}
	if m.Scillafixversion != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Scillafixversion))
	}
	if m.Scillaupgradeds != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Scillaupgradeds))
	}
	if m.Scillacommit != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Scillacommit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoFallbackBlockWShardingStructure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fallbackblock != nil {
		l = m.Fallbackblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Sharding != nil {
		l = m.Sharding.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoSingleDirectoryBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Directoryblock != nil {
		n += m.Directoryblock.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoSingleDirectoryBlock_Dsblock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dsblock != nil {
		l = m.Dsblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	return n
}
func (m *ProtoSingleDirectoryBlock_Vcblock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vcblock != nil {
		l = m.Vcblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	return n
}
func (m *ProtoSingleDirectoryBlock_Fallbackblockwshard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fallbackblockwshard != nil {
		l = m.Fallbackblockwshard.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	return n
}
func (m *PMHello) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PMHello_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Listenport != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Listenport))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GovernanceData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposalid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Proposalid))
	}
	if m.Votevalue != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Votevalue))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DSPoWSubmission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DSPoWSubmission_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocknumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Blocknumber))
	}
	if m.Difficultylevel != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Difficultylevel))
	}
	if m.Submitterpeer != nil {
		l = m.Submitterpeer.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.SubmitterpubKey != nil {
		l = m.SubmitterpubKey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Nonce))
	}
	l = len(m.Resultinghash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Mixhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Lookupid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Lookupid))
	}
	if m.Gasprice != nil {
		l = m.Gasprice.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Govdata != nil {
		l = m.Govdata.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DSPoWPacketSubmission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DSPoWPacketSubmission_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DsPowSubmissions) > 0 {
		for _, e := range m.DsPowSubmissions {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DSMicroBlockSubmission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DSMicroBlockSubmission_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Microblocktype != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Microblocktype))
	}
	if m.Epochnumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Epochnumber))
	}
	if len(m.Microblocks) > 0 {
		for _, e := range m.Microblocks {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if len(m.Statedeltas) > 0 {
		for _, b := range m.Statedeltas {
			l = len(b)
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DSDSBlockAnnouncement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dsblock != nil {
		l = m.Dsblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Sharding != nil {
		l = m.Sharding.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if len(m.Dswinnerpows) > 0 {
		for _, e := range m.Dswinnerpows {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DSFinalBlockAnnouncement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Txblock != nil {
		l = m.Txblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Microblock != nil {
		l = m.Microblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DSVCBlockAnnouncement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vcblock != nil {
		l = m.Vcblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DSMissingMicroBlocksErrorMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mbhashes) > 0 {
		for _, b := range m.Mbhashes {
			l = len(b)
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.Epochnum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Epochnum))
	}
	if m.Listenport != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Listenport))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeDSBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Shardid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Shardid))
	}
	if m.Dsblock != nil {
		l = m.Dsblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if len(m.Vcblocks) > 0 {
		for _, e := range m.Vcblocks {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.Sharding != nil {
		l = m.Sharding.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeFinalBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dsblocknumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Dsblocknumber))
	}
	if m.Consensusid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Consensusid))
	}
	if m.Txblock != nil {
		l = m.Txblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Statedelta)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if len(m.Shardids) > 0 {
		l = 0
		for _, e := range m.Shardids {
			l += sovZilliqaMessage(uint64(e))
		}
		n += 1 + sovZilliqaMessage(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeVCFinalBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dsblocknumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Dsblocknumber))
	}
	if m.Consensusid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Consensusid))
	}
	if m.Txblock != nil {
		l = m.Txblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	l = len(m.Statedelta)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if len(m.Vcblocks) > 0 {
		for _, e := range m.Vcblocks {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeMBnForwardTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Microblock != nil {
		l = m.Microblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if len(m.Txnswithreceipt) > 0 {
		for _, e := range m.Txnswithreceipt {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodePendingTxn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodePendingTxn_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hashcodepair) > 0 {
		for _, e := range m.Hashcodepair {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.Epochnumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Epochnumber))
	}
	if m.Shardid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Shardid))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodePendingTxn_Data_Pair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Txnhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeVCBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vcblock != nil {
		l = m.Vcblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeForwardTxnBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epochnumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Epochnumber))
	}
	if m.Dsblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Dsblocknum))
	}
	if m.Shardid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Shardid))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeMicroBlockAnnouncement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Microblock != nil {
		l = m.Microblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeFallbackBlockAnnouncement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fallbackblock != nil {
		l = m.Fallbackblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeFallbackBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fallbackblock != nil {
		l = m.Fallbackblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeMissingTxnsErrorMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txnhashes) > 0 {
		for _, b := range m.Txnhashes {
			l = len(b)
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.Epochnum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Epochnum))
	}
	if m.Listenport != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Listenport))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetSeedPeers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Listenport != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Listenport))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetSeedPeers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Candidateseeds) > 0 {
		for _, e := range m.Candidateseeds {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetDSInfoFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Listenport != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Listenport))
	}
	if m.Initialds {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetDSInfoFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dscommittee != nil {
		l = m.Dscommittee.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Initialds {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetDSBlockFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lowblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Lowblocknum))
	}
	if m.Highblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Highblocknum))
	}
	if m.Listenport != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Listenport))
	}
	if m.Includeminerinfo {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetDSBlockFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetDSBlockFromSeed_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lowblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Lowblocknum))
	}
	if m.Highblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Highblocknum))
	}
	if len(m.Dsblocks) > 0 {
		for _, e := range m.Dsblocks {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetMinerInfoFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetMinerInfoFromSeed_MinerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Minerinfodscomm != nil {
		l = m.Minerinfodscomm.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Minerinfoshards != nil {
		l = m.Minerinfoshards.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetMinerInfoFromSeed_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Minerinfoperds) > 0 {
		for k, v := range m.Minerinfoperds {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovZilliqaMessage(uint64(l))
			}
			mapEntrySize := 1 + sovZilliqaMessage(uint64(k)) + l
			n += mapEntrySize + 1 + sovZilliqaMessage(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetTxBlockFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lowblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Lowblocknum))
	}
	if m.Highblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Highblocknum))
	}
	if m.Listenport != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Listenport))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetTxBlockFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetTxBlockFromSeed_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lowblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Lowblocknum))
	}
	if m.Highblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Highblocknum))
	}
	if len(m.Txblocks) > 0 {
		for _, e := range m.Txblocks {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetStateDeltaFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Blocknum))
	}
	if m.Listenport != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Listenport))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetStateDeltasFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lowblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Lowblocknum))
	}
	if m.Highblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Highblocknum))
	}
	if m.Listenport != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Listenport))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetStateDeltaFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetStateDeltaFromSeed_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Blocknum))
	}
	l = len(m.Statedelta)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetStateDeltasFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetStateDeltasFromSeed_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lowblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Lowblocknum))
	}
	if m.Highblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Highblocknum))
	}
	if len(m.Statedeltas) > 0 {
		for _, b := range m.Statedeltas {
			l = len(b)
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetStateFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Listenport != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Listenport))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetStateFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Accountstore != nil {
		l = m.Accountstore.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetLookupOffline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetLookupOffline_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msgtype != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Msgtype))
	}
	if m.Listenport != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Listenport))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetLookupOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetLookupOnline_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msgtype != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Msgtype))
	}
	if m.Listenport != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Listenport))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetOfflineLookups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Listenport != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Listenport))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetOfflineLookups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupRaiseStartPoW) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupRaiseStartPoW_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msgtype != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Msgtype))
	}
	if m.Blocknumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Blocknumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetStartPoWFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetStartPoWFromSeed_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Listenport != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Listenport))
	}
	if m.Blocknumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Blocknumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetStartPoWFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocknumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Blocknumber))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetShardsFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Listenport != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Listenport))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetShardsFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sharding != nil {
		l = m.Sharding.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetMicroBlockFromLookup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Portno != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Portno))
	}
	if len(m.Mbhashes) > 0 {
		for _, b := range m.Mbhashes {
			l = len(b)
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetMicroBlockFromLookup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Microblocks) > 0 {
		for _, e := range m.Microblocks {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetMicroBlockFromL2L) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetMicroBlockFromL2L_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Portno != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Portno))
	}
	if len(m.Mbhashes) > 0 {
		for _, b := range m.Mbhashes {
			l = len(b)
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupForwardTxnsFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Shardtransactions != nil {
		l = m.Shardtransactions.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Dstransactions != nil {
		l = m.Dstransactions.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetTxnsFromLookup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Portno != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Portno))
	}
	l = len(m.Mbhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if len(m.Txnhashes) > 0 {
		for _, b := range m.Txnhashes {
			l = len(b)
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetTxnsFromL2L) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetTxnsFromL2L_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Portno != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Portno))
	}
	l = len(m.Mbhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if len(m.Txnhashes) > 0 {
		for _, b := range m.Txnhashes {
			l = len(b)
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetTxnsFromLookup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mbhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetDirectoryBlocksFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Portno != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Portno))
	}
	if m.Indexnum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Indexnum))
	}
	if m.Includeminerinfo {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetDirectoryBlocksFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetDirectoryBlocksFromSeed_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Indexnum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Indexnum))
	}
	if len(m.Dirblocks) > 0 {
		for _, e := range m.Dirblocks {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusAnnouncement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Consensusinfo != nil {
		l = m.Consensusinfo.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Announcement != nil {
		n += m.Announcement.Size()
	}
	if m.Finalsignature != nil {
		l = m.Finalsignature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusAnnouncement_Dsblock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dsblock != nil {
		l = m.Dsblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	return n
}
func (m *ConsensusAnnouncement_Microblock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Microblock != nil {
		l = m.Microblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	return n
}
func (m *ConsensusAnnouncement_Finalblock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Finalblock != nil {
		l = m.Finalblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	return n
}
func (m *ConsensusAnnouncement_Vcblock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vcblock != nil {
		l = m.Vcblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	return n
}
func (m *ConsensusAnnouncement_Fallbackblock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fallbackblock != nil {
		l = m.Fallbackblock.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	return n
}
func (m *ConsensusAnnouncement_ConsensusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Consensusid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Consensusid))
	}
	if m.Blocknumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Blocknumber))
	}
	l = len(m.Blockhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Leaderid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Leaderid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Consensusinfo != nil {
		l = m.Consensusinfo.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusCommit_ConsensusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Consensusid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Consensusid))
	}
	if m.Blocknumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Blocknumber))
	}
	l = len(m.Blockhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Backupid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Backupid))
	}
	if m.Commitpoint != nil {
		l = m.Commitpoint.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Commitpointhash != nil {
		l = m.Commitpointhash.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Consensusinfo != nil {
		l = m.Consensusinfo.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusChallenge_SubsetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aggregatedcommit != nil {
		l = m.Aggregatedcommit.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Aggregatedkey != nil {
		l = m.Aggregatedkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Challenge != nil {
		l = m.Challenge.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusChallenge_ConsensusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Consensusid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Consensusid))
	}
	if m.Blocknumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Blocknumber))
	}
	l = len(m.Blockhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Leaderid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Leaderid))
	}
	if len(m.Subsetinfo) > 0 {
		for _, e := range m.Subsetinfo {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Consensusinfo != nil {
		l = m.Consensusinfo.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusResponse_SubsetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusResponse_ConsensusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Consensusid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Consensusid))
	}
	if m.Blocknumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Blocknumber))
	}
	l = len(m.Blockhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Backupid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Backupid))
	}
	if len(m.Subsetinfo) > 0 {
		for _, e := range m.Subsetinfo {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusCollectiveSig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Consensusinfo != nil {
		l = m.Consensusinfo.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusCollectiveSig_ConsensusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Consensusid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Consensusid))
	}
	if m.Blocknumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Blocknumber))
	}
	l = len(m.Blockhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Leaderid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Leaderid))
	}
	if m.Collectivesig != nil {
		l = m.Collectivesig.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if len(m.Bitmap) > 0 {
		n += 1 + sovZilliqaMessage(uint64(len(m.Bitmap))) + len(m.Bitmap)*1
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusCommitFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Consensusinfo != nil {
		l = m.Consensusinfo.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusCommitFailure_ConsensusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Consensusid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Consensusid))
	}
	if m.Blocknumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Blocknumber))
	}
	l = len(m.Blockhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Backupid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Backupid))
	}
	l = len(m.Errormsg)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusConsensusFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Consensusinfo != nil {
		l = m.Consensusinfo.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusConsensusFailure_ConsensusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Consensusid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Consensusid))
	}
	if m.Blocknumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Blocknumber))
	}
	l = len(m.Blockhash)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Leaderid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Leaderid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetDSTxBlockFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dslowblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Dslowblocknum))
	}
	if m.Dshighblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Dshighblocknum))
	}
	if m.Txlowblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Txlowblocknum))
	}
	if m.Txhighblocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Txhighblocknum))
	}
	if m.Listenport != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Listenport))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VCNodeSetDSTxBlockFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VCNodeSetDSTxBlockFromSeed_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dsblocks) > 0 {
		for _, e := range m.Dsblocks {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if len(m.Txblocks) > 0 {
		for _, e := range m.Txblocks {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeSetShardNodeNetworkInfoUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeSetShardNodeNetworkInfoUpdate_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dsepochnumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Dsepochnumber))
	}
	if m.Shardnodepubkey != nil {
		l = m.Shardnodepubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Shardnodenewnetworkinfo != nil {
		l = m.Shardnodenewnetworkinfo.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DSLookupSetDSGuardNetworkInfoUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DSLookupSetDSGuardNetworkInfoUpdate_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dsepochnumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Dsepochnumber))
	}
	if m.Dsguardpubkey != nil {
		l = m.Dsguardpubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Dsguardnewnetworkinfo != nil {
		l = m.Dsguardnewnetworkinfo.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeGetGuardNodeNetworkInfoUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeGetGuardNodeNetworkInfoUpdate_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Portno != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Portno))
	}
	if m.Dsepochnumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Dsepochnumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoDSGuardUpdateStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dsguardpubkey != nil {
		l = m.Dsguardpubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Dsguardnewnetworkinfo != nil {
		l = m.Dsguardnewnetworkinfo.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeSetGuardNodeNetworkInfoUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Lookuppubkey != nil {
		l = m.Lookuppubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeSetGuardNodeNetworkInfoUpdate_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dsguardupdatestruct) > 0 {
		for _, e := range m.Dsguardupdatestruct {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeedSetHistoricalDB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeedSetHistoricalDB_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Code))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeRemoveFromBlacklist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeRemoveFromBlacklist_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpAddress != nil {
		l = m.IpAddress.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Dsepochnumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Dsepochnumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtoCosigsRewardsStructure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epochnumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Epochnumber))
	}
	if m.Shardid != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Shardid))
	}
	if m.Blockbase != nil {
		l = m.Blockbase.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetCosigsRewardsFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetCosigsRewardsFromSeed_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Portno != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Portno))
	}
	if m.Epochnumber != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Epochnumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetCosigsRewardsFromSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSetCosigsRewardsFromSeed_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cosigsrewards) > 0 {
		for _, e := range m.Cosigsrewards {
			l = e.Size()
			n += 1 + l + sovZilliqaMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetVCFinalBlockFromL2L) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetVCFinalBlockFromL2L_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Blocknum))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetDSBlockFromL2L) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetDSBlockFromL2L_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Blocknum))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetMBnForwardTxnFromL2L) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetMBnForwardTxnFromL2L_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Blocknum))
	}
	if m.ShardId != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.ShardId))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetPendingTxnFromL2L) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupGetPendingTxnFromL2L_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocknum != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.Blocknum))
	}
	if m.ShardId != 0 {
		n += 1 + sovZilliqaMessage(uint64(m.ShardId))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovZilliqaMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovZilliqaMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZilliqaMessage(x uint64) (n int) {
	return sovZilliqaMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ByteArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByteArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByteArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoBlockLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoBlockLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoBlockLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof1 = &ProtoBlockLink_Version{v}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof2 = &ProtoBlockLink_Index{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof3 = &ProtoBlockLink_Dsindex{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocktype", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof4 = &ProtoBlockLink_Blocktype{v}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockhash = append(m.Blockhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Blockhash == nil {
				m.Blockhash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoBlockBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoBlockBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoBlockBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockhash = append(m.Blockhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Blockhash == nil {
				m.Blockhash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cosigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cosigs == nil {
				m.Cosigs = &ProtoBlockBase_CoSignatures{}
			}
			if err := m.Cosigs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoBlockBase_CoSignatures) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoSignatures: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoSignatures: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cs1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cs1 == nil {
				m.Cs1 = &ByteArray{}
			}
			if err := m.Cs1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZilliqaMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.B1 = append(m.B1, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZilliqaMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZilliqaMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthZilliqaMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.B1) == 0 {
					m.B1 = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZilliqaMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.B1 = append(m.B1, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field B1", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cs2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cs2 == nil {
				m.Cs2 = &ByteArray{}
			}
			if err := m.Cs2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZilliqaMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.B2 = append(m.B2, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZilliqaMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZilliqaMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthZilliqaMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.B2) == 0 {
					m.B2 = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZilliqaMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.B2 = append(m.B2, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field B2", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoBlockHeaderBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoBlockHeaderBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoBlockHeaderBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Committeehash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Committeehash = append(m.Committeehash[:0], dAtA[iNdEx:postIndex]...)
			if m.Committeehash == nil {
				m.Committeehash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prevhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prevhash = append(m.Prevhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Prevhash == nil {
				m.Prevhash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoDSBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoDSBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoDSBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ProtoDSBlock_DSBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockbase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blockbase == nil {
				m.Blockbase = &ProtoBlockBase{}
			}
			if err := m.Blockbase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoDSBlock_DSBlockHashSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSBlockHashSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSBlockHashSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shardinghash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shardinghash = append(m.Shardinghash[:0], dAtA[iNdEx:postIndex]...)
			if m.Shardinghash == nil {
				m.Shardinghash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservedfield", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reservedfield = append(m.Reservedfield[:0], dAtA[iNdEx:postIndex]...)
			if m.Reservedfield == nil {
				m.Reservedfield = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoDSBlock_DSBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockheaderbase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blockheaderbase == nil {
				m.Blockheaderbase = &ProtoBlockHeaderBase{}
			}
			if err := m.Blockheaderbase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsdifficulty", wireType)
			}
			m.Dsdifficulty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dsdifficulty |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Difficulty", wireType)
			}
			m.Difficulty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Difficulty |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prevhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prevhash = append(m.Prevhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Prevhash == nil {
				m.Prevhash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaderpubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Leaderpubkey == nil {
				m.Leaderpubkey = &ByteArray{}
			}
			if err := m.Leaderpubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknum", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof6 = &ProtoDSBlock_DSBlockHeader_Blocknum{v}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epochnum", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof7 = &ProtoDSBlock_DSBlockHeader_Epochnum{v}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gasprice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gasprice == nil {
				m.Gasprice = &ByteArray{}
			}
			if err := m.Gasprice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Swinfo == nil {
				m.Swinfo = &ByteArray{}
			}
			if err := m.Swinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dswinners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dswinners = append(m.Dswinners, &ProtoDSBlock_DSBlockHeader_PowDSWinners{})
			if err := m.Dswinners[len(m.Dswinners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hash == nil {
				m.Hash = &ProtoDSBlock_DSBlockHashSet{}
			}
			if err := m.Hash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsremoved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dsremoved = append(m.Dsremoved, &ByteArray{})
			if err := m.Dsremoved[len(m.Dsremoved)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposals = append(m.Proposals, &ProtoDSBlock_DSBlockHeader_Proposal{})
			if err := m.Proposals[len(m.Proposals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoDSBlock_DSBlockHeader_PowDSWinners) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PowDSWinners: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PowDSWinners: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &ByteArray{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Val == nil {
				m.Val = &ByteArray{}
			}
			if err := m.Val.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoDSBlock_DSBlockHeader_Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoDSBlock_DSBlockHeader_Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposalid", wireType)
			}
			m.Proposalid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proposalid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsvotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dsvotes = append(m.Dsvotes, &ProtoDSBlock_DSBlockHeader_Vote{})
			if err := m.Dsvotes[len(m.Dsvotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minervotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minervotes = append(m.Minervotes, &ProtoDSBlock_DSBlockHeader_Vote{})
			if err := m.Minervotes[len(m.Minervotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoDSNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoDSNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoDSNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &ByteArray{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoDSCommittee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoDSCommittee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoDSCommittee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsnodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dsnodes = append(m.Dsnodes, &ProtoDSNode{})
			if err := m.Dsnodes[len(m.Dsnodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoMicroBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoMicroBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoMicroBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ProtoMicroBlock_MicroBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tranhashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tranhashes = append(m.Tranhashes, make([]byte, postIndex-iNdEx))
			copy(m.Tranhashes[len(m.Tranhashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockbase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blockbase == nil {
				m.Blockbase = &ProtoBlockBase{}
			}
			if err := m.Blockbase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoMicroBlock_MicroBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MicroBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MicroBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockheaderbase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blockheaderbase == nil {
				m.Blockheaderbase = &ProtoBlockHeaderBase{}
			}
			if err := m.Blockheaderbase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shardid", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof2 = &ProtoMicroBlock_MicroBlockHeader_Shardid{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gaslimit", wireType)
			}
			m.Gaslimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gaslimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gasused", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof4 = &ProtoMicroBlock_MicroBlockHeader_Gasused{v}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &ByteArray{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prevhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prevhash = append(m.Prevhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Prevhash == nil {
				m.Prevhash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epochnum", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof7 = &ProtoMicroBlock_MicroBlockHeader_Epochnum{v}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txroothash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txroothash = append(m.Txroothash[:0], dAtA[iNdEx:postIndex]...)
			if m.Txroothash == nil {
				m.Txroothash = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numtxs", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof9 = &ProtoMicroBlock_MicroBlockHeader_Numtxs{v}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minerpubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Minerpubkey == nil {
				m.Minerpubkey = &ByteArray{}
			}
			if err := m.Minerpubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsblocknum", wireType)
			}
			m.Dsblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dsblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statedeltahash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statedeltahash = append(m.Statedeltahash[:0], dAtA[iNdEx:postIndex]...)
			if m.Statedeltahash == nil {
				m.Statedeltahash = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tranreceipthash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tranreceipthash = append(m.Tranreceipthash[:0], dAtA[iNdEx:postIndex]...)
			if m.Tranreceipthash == nil {
				m.Tranreceipthash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoShardingStructure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoShardingStructure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoShardingStructure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shards = append(m.Shards, &ProtoShardingStructure_Shard{})
			if err := m.Shards[len(m.Shards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoShardingStructure_Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peerinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peerinfo == nil {
				m.Peerinfo = &ByteArray{}
			}
			if err := m.Peerinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputation", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof3 = &ProtoShardingStructure_Member_Reputation{v}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoShardingStructure_Shard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &ProtoShardingStructure_Member{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoMbInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoMbInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoMbInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mbhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mbhash = append(m.Mbhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Mbhash == nil {
				m.Mbhash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txroot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txroot = append(m.Txroot[:0], dAtA[iNdEx:postIndex]...)
			if m.Txroot == nil {
				m.Txroot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shardid", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof3 = &ProtoMbInfo_Shardid{v}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoTxBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoTxBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoTxBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ProtoTxBlock_TxBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mbinfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mbinfos = append(m.Mbinfos, &ProtoMbInfo{})
			if err := m.Mbinfos[len(m.Mbinfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockbase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blockbase == nil {
				m.Blockbase = &ProtoBlockBase{}
			}
			if err := m.Blockbase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoTxBlock_TxBlockHashSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxBlockHashSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxBlockHashSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stateroothash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stateroothash = append(m.Stateroothash[:0], dAtA[iNdEx:postIndex]...)
			if m.Stateroothash == nil {
				m.Stateroothash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statedeltahash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statedeltahash = append(m.Statedeltahash[:0], dAtA[iNdEx:postIndex]...)
			if m.Statedeltahash == nil {
				m.Statedeltahash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mbinfohash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mbinfohash = append(m.Mbinfohash[:0], dAtA[iNdEx:postIndex]...)
			if m.Mbinfohash == nil {
				m.Mbinfohash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoTxBlock_TxBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockheaderbase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blockheaderbase == nil {
				m.Blockheaderbase = &ProtoBlockHeaderBase{}
			}
			if err := m.Blockheaderbase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gaslimit", wireType)
			}
			m.Gaslimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gaslimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gasused", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof3 = &ProtoTxBlock_TxBlockHeader_Gasused{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &ByteArray{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prevhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prevhash = append(m.Prevhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Prevhash == nil {
				m.Prevhash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknum", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof6 = &ProtoTxBlock_TxBlockHeader_Blocknum{v}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hash == nil {
				m.Hash = &ProtoTxBlock_TxBlockHashSet{}
			}
			if err := m.Hash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numtxs", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof8 = &ProtoTxBlock_TxBlockHeader_Numtxs{v}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minerpubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Minerpubkey == nil {
				m.Minerpubkey = &ByteArray{}
			}
			if err := m.Minerpubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsblocknum", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof10 = &ProtoTxBlock_TxBlockHeader_Dsblocknum{v}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoVCBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoVCBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoVCBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ProtoVCBlock_VCBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockbase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blockbase == nil {
				m.Blockbase = &ProtoBlockBase{}
			}
			if err := m.Blockbase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoVCBlock_VCBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VCBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VCBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockheaderbase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blockheaderbase == nil {
				m.Blockheaderbase = &ProtoBlockHeaderBase{}
			}
			if err := m.Blockheaderbase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Viewchangedsepochno", wireType)
			}
			m.Viewchangedsepochno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Viewchangedsepochno |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Viewchangeepochno", wireType)
			}
			m.Viewchangeepochno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Viewchangeepochno |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Viewchangestate", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof4 = &ProtoVCBlock_VCBlockHeader_Viewchangestate{v}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidateleadernetworkinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Candidateleadernetworkinfo == nil {
				m.Candidateleadernetworkinfo = &ByteArray{}
			}
			if err := m.Candidateleadernetworkinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidateleaderpubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Candidateleaderpubkey == nil {
				m.Candidateleaderpubkey = &ByteArray{}
			}
			if err := m.Candidateleaderpubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vccounter", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof7 = &ProtoVCBlock_VCBlockHeader_Vccounter{v}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faultyleaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Faultyleaders = append(m.Faultyleaders, &ProtoDSNode{})
			if err := m.Faultyleaders[len(m.Faultyleaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prevhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prevhash = append(m.Prevhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Prevhash == nil {
				m.Prevhash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoFallbackBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoFallbackBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoFallbackBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ProtoFallbackBlock_FallbackBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockbase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blockbase == nil {
				m.Blockbase = &ProtoBlockBase{}
			}
			if err := m.Blockbase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoFallbackBlock_FallbackBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FallbackBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FallbackBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockheaderbase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blockheaderbase == nil {
				m.Blockheaderbase = &ProtoBlockHeaderBase{}
			}
			if err := m.Blockheaderbase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fallbackdsepochno", wireType)
			}
			m.Fallbackdsepochno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fallbackdsepochno |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fallbackepochno", wireType)
			}
			m.Fallbackepochno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fallbackepochno |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fallbackstate", wireType)
			}
			m.Fallbackstate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fallbackstate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stateroothash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stateroothash = append(m.Stateroothash[:0], dAtA[iNdEx:postIndex]...)
			if m.Stateroothash == nil {
				m.Stateroothash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaderconsensusid", wireType)
			}
			m.Leaderconsensusid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leaderconsensusid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leadernetworkinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Leadernetworkinfo == nil {
				m.Leadernetworkinfo = &ByteArray{}
			}
			if err := m.Leadernetworkinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaderpubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Leaderpubkey == nil {
				m.Leaderpubkey = &ByteArray{}
			}
			if err := m.Leaderpubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shardid", wireType)
			}
			m.Shardid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shardid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prevhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prevhash = append(m.Prevhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Prevhash == nil {
				m.Prevhash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoDiagnosticDataNodes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoDiagnosticDataNodes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoDiagnosticDataNodes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shards == nil {
				m.Shards = &ProtoShardingStructure{}
			}
			if err := m.Shards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dscommittee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dscommittee == nil {
				m.Dscommittee = &ProtoDSCommittee{}
			}
			if err := m.Dscommittee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoDiagnosticDataCoinbase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoDiagnosticDataCoinbase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoDiagnosticDataCoinbase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodecount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nodecount == nil {
				m.Nodecount = &ByteArray{}
			}
			if err := m.Nodecount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sigcount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sigcount == nil {
				m.Sigcount = &ByteArray{}
			}
			if err := m.Sigcount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lookupcount", wireType)
			}
			m.Lookupcount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lookupcount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Totalreward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Totalreward == nil {
				m.Totalreward = &ByteArray{}
			}
			if err := m.Totalreward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basereward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Basereward == nil {
				m.Basereward = &ByteArray{}
			}
			if err := m.Basereward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baserewardeach", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Baserewardeach == nil {
				m.Baserewardeach = &ByteArray{}
			}
			if err := m.Baserewardeach.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lookupreward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lookupreward == nil {
				m.Lookupreward = &ByteArray{}
			}
			if err := m.Lookupreward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewardeachlookup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewardeachlookup == nil {
				m.Rewardeachlookup = &ByteArray{}
			}
			if err := m.Rewardeachlookup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodereward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nodereward == nil {
				m.Nodereward = &ByteArray{}
			}
			if err := m.Nodereward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewardeach", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewardeach == nil {
				m.Rewardeach = &ByteArray{}
			}
			if err := m.Rewardeach.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balanceleft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Balanceleft == nil {
				m.Balanceleft = &ByteArray{}
			}
			if err := m.Balanceleft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Luckydrawwinnerkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Luckydrawwinnerkey == nil {
				m.Luckydrawwinnerkey = &ByteArray{}
			}
			if err := m.Luckydrawwinnerkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Luckydrawwinneraddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Luckydrawwinneraddr = append(m.Luckydrawwinneraddr[:0], dAtA[iNdEx:postIndex]...)
			if m.Luckydrawwinneraddr == nil {
				m.Luckydrawwinneraddr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoMinerInfoDSComm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoMinerInfoDSComm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoMinerInfoDSComm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsnodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dsnodes = append(m.Dsnodes, &ProtoMinerInfoDSComm_Node{})
			if err := m.Dsnodes[len(m.Dsnodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsnodesejected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dsnodesejected = append(m.Dsnodesejected, &ProtoMinerInfoDSComm_Node{})
			if err := m.Dsnodesejected[len(m.Dsnodesejected)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoMinerInfoDSComm_Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoMinerInfoShards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoMinerInfoShards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoMinerInfoShards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shards = append(m.Shards, &ProtoMinerInfoShards_Shard{})
			if err := m.Shards[len(m.Shards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoMinerInfoShards_Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoMinerInfoShards_Shard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shardsize", wireType)
			}
			m.Shardsize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shardsize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shardnodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shardnodes = append(m.Shardnodes, &ProtoMinerInfoShards_Node{})
			if err := m.Shardnodes[len(m.Shardnodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoAccountBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoAccountBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoAccountBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Balance == nil {
				m.Balance = &ByteArray{}
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof3 = &ProtoAccountBase_Nonce{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codehash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Codehash = append(m.Codehash[:0], dAtA[iNdEx:postIndex]...)
			if m.Codehash == nil {
				m.Codehash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storageroot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Storageroot = append(m.Storageroot[:0], dAtA[iNdEx:postIndex]...)
			if m.Storageroot == nil {
				m.Storageroot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &ProtoAccountBase{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = append(m.Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Code == nil {
				m.Code = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Storage = append(m.Storage, &ProtoAccount_StorageData{})
			if err := m.Storage[len(m.Storage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numbersign", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Numbersign = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Storage2 = append(m.Storage2, &ProtoAccount_StorageData2{})
			if err := m.Storage2[len(m.Storage2)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Todelete", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Todelete = append(m.Todelete, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initdata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Initdata = append(m.Initdata[:0], dAtA[iNdEx:postIndex]...)
			if m.Initdata == nil {
				m.Initdata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoAccount_StorageData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyhash = append(m.Keyhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Keyhash == nil {
				m.Keyhash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoAccount_StorageData2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageData2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageData2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoStateIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoStateIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoStateIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index, make([]byte, postIndex-iNdEx))
			copy(m.Index[len(m.Index)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoStateData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoStateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoStateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ismutable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ismutable = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoAccountStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoAccountStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoAccountStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &ProtoAccountStore_AddressAccount{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoAccountStore_AddressAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &ProtoAccount{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipaddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ipaddress == nil {
				m.Ipaddress = &ByteArray{}
			}
			if err := m.Ipaddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listenporthost", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof2 = &ProtoPeer_Listenporthost{v}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoPoWSolution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoPoWSolution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoPoWSolution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mixhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mixhash = append(m.Mixhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Mixhash == nil {
				m.Mixhash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lookupid", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof4 = &ProtoPoWSolution_Lookupid{v}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gasprice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gasprice == nil {
				m.Gasprice = &ByteArray{}
			}
			if err := m.Gasprice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Govdata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Govdata == nil {
				m.Govdata = &GovernanceData{}
			}
			if err := m.Govdata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoCommittee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoCommittee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoCommittee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &ByteArray{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoShardingStructureWithPoWSolns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoShardingStructureWithPoWSolns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoShardingStructureWithPoWSolns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shards = append(m.Shards, &ProtoShardingStructureWithPoWSolns_Shard{})
			if err := m.Shards[len(m.Shards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoShardingStructureWithPoWSolns_Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peerinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peerinfo == nil {
				m.Peerinfo = &ByteArray{}
			}
			if err := m.Peerinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputation", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof3 = &ProtoShardingStructureWithPoWSolns_Member_Reputation{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Powsoln", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Powsoln == nil {
				m.Powsoln = &ProtoPoWSolution{}
			}
			if err := m.Powsoln.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoShardingStructureWithPoWSolns_Shard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &ProtoShardingStructureWithPoWSolns_Member{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoDSWinnerPoW) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoDSWinnerPoW: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoDSWinnerPoW: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Powsoln", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Powsoln == nil {
				m.Powsoln = &ProtoPoWSolution{}
			}
			if err := m.Powsoln.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoTransactionCoreInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoTransactionCoreInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoTransactionCoreInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof2 = &ProtoTransactionCoreInfo_Nonce{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Toaddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Toaddr = append(m.Toaddr[:0], dAtA[iNdEx:postIndex]...)
			if m.Toaddr == nil {
				m.Toaddr = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Senderpubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Senderpubkey == nil {
				m.Senderpubkey = &ByteArray{}
			}
			if err := m.Senderpubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &ByteArray{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gasprice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gasprice == nil {
				m.Gasprice = &ByteArray{}
			}
			if err := m.Gasprice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gaslimit", wireType)
			}
			m.Gaslimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gaslimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Oneof8 = &ProtoTransactionCoreInfo_Code{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Oneof9 = &ProtoTransactionCoreInfo_Data{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tranid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tranid = append(m.Tranid[:0], dAtA[iNdEx:postIndex]...)
			if m.Tranid == nil {
				m.Tranid = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &ProtoTransactionCoreInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoTxnFileOffset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoTxnFileOffset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoTxnFileOffset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZilliqaMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Offsetinfile = append(m.Offsetinfile, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZilliqaMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZilliqaMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthZilliqaMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Offsetinfile) == 0 {
					m.Offsetinfile = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZilliqaMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Offsetinfile = append(m.Offsetinfile, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Offsetinfile", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoTransactionArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoTransactionArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoTransactionArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &ProtoTransaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoTransactionReceipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoTransactionReceipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoTransactionReceipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipt = append(m.Receipt[:0], dAtA[iNdEx:postIndex]...)
			if m.Receipt == nil {
				m.Receipt = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cumgas", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof2 = &ProtoTransactionReceipt_Cumgas{v}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoTransactionWithReceipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoTransactionWithReceipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoTransactionWithReceipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &ProtoTransaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Receipt == nil {
				m.Receipt = &ProtoTransactionReceipt{}
			}
			if err := m.Receipt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoBloomFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoBloomFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoBloomFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZilliqaMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Salt = append(m.Salt, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZilliqaMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZilliqaMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthZilliqaMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Salt) == 0 {
					m.Salt = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZilliqaMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Salt = append(m.Salt, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bittable", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bittable = append(m.Bittable[:0], dAtA[iNdEx:postIndex]...)
			if m.Bittable == nil {
				m.Bittable = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Saltcount", wireType)
			}
			m.Saltcount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Saltcount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tablesize", wireType)
			}
			m.Tablesize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tablesize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projectedelementcount", wireType)
			}
			m.Projectedelementcount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Projectedelementcount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Insertedelementcount", wireType)
			}
			m.Insertedelementcount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Insertedelementcount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Randomseed", wireType)
			}
			m.Randomseed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Randomseed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Probability", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Probability = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoSWInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoSWInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoSWInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zilliqamajorversion", wireType)
			}
			m.Zilliqamajorversion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Zilliqamajorversion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zilliqaminorversion", wireType)
			}
			m.Zilliqaminorversion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Zilliqaminorversion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zilliqafixversion", wireType)
			}
			m.Zilliqafixversion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Zilliqafixversion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zilliqaupgradeds", wireType)
			}
			m.Zilliqaupgradeds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Zilliqaupgradeds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zilliqacommit", wireType)
			}
			m.Zilliqacommit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Zilliqacommit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scillamajorversion", wireType)
			}
			m.Scillamajorversion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scillamajorversion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scillaminorversion", wireType)
			}
			m.Scillaminorversion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scillaminorversion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scillafixversion", wireType)
			}
			m.Scillafixversion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scillafixversion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scillaupgradeds", wireType)
			}
			m.Scillaupgradeds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scillaupgradeds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scillacommit", wireType)
			}
			m.Scillacommit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scillacommit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoFallbackBlockWShardingStructure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoFallbackBlockWShardingStructure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoFallbackBlockWShardingStructure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fallbackblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fallbackblock == nil {
				m.Fallbackblock = &ProtoFallbackBlock{}
			}
			if err := m.Fallbackblock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sharding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sharding == nil {
				m.Sharding = &ProtoShardingStructure{}
			}
			if err := m.Sharding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoSingleDirectoryBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoSingleDirectoryBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoSingleDirectoryBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProtoDSBlock{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Directoryblock = &ProtoSingleDirectoryBlock_Dsblock{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vcblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProtoVCBlock{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Directoryblock = &ProtoSingleDirectoryBlock_Vcblock{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fallbackblockwshard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProtoFallbackBlockWShardingStructure{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Directoryblock = &ProtoSingleDirectoryBlock_Fallbackblockwshard{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PMHello) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PMHello: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PMHello: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &PMHello_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PMHello_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listenport", wireType)
			}
			m.Listenport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Listenport |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovernanceData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovernanceData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovernanceData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposalid", wireType)
			}
			m.Proposalid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proposalid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votevalue", wireType)
			}
			m.Votevalue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Votevalue |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSPoWSubmission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSPoWSubmission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSPoWSubmission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DSPoWSubmission_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSPoWSubmission_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknumber", wireType)
			}
			m.Blocknumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocknumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Difficultylevel", wireType)
			}
			m.Difficultylevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Difficultylevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitterpeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Submitterpeer == nil {
				m.Submitterpeer = &ByteArray{}
			}
			if err := m.Submitterpeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitterpubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubmitterpubKey == nil {
				m.SubmitterpubKey = &ByteArray{}
			}
			if err := m.SubmitterpubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resultinghash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resultinghash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mixhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mixhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lookupid", wireType)
			}
			m.Lookupid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lookupid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gasprice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gasprice == nil {
				m.Gasprice = &ByteArray{}
			}
			if err := m.Gasprice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Govdata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Govdata == nil {
				m.Govdata = &GovernanceData{}
			}
			if err := m.Govdata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSPoWPacketSubmission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSPoWPacketSubmission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSPoWPacketSubmission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DSPoWPacketSubmission_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSPoWPacketSubmission_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DsPowSubmissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DsPowSubmissions = append(m.DsPowSubmissions, &DSPoWSubmission{})
			if err := m.DsPowSubmissions[len(m.DsPowSubmissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSMicroBlockSubmission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSMicroBlockSubmission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSMicroBlockSubmission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DSMicroBlockSubmission_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSMicroBlockSubmission_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Microblocktype", wireType)
			}
			m.Microblocktype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Microblocktype |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epochnumber", wireType)
			}
			m.Epochnumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epochnumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Microblocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Microblocks = append(m.Microblocks, &ProtoMicroBlock{})
			if err := m.Microblocks[len(m.Microblocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statedeltas", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statedeltas = append(m.Statedeltas, make([]byte, postIndex-iNdEx))
			copy(m.Statedeltas[len(m.Statedeltas)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSDSBlockAnnouncement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSDSBlockAnnouncement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSDSBlockAnnouncement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dsblock == nil {
				m.Dsblock = &ProtoDSBlock{}
			}
			if err := m.Dsblock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sharding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sharding == nil {
				m.Sharding = &ProtoShardingStructureWithPoWSolns{}
			}
			if err := m.Sharding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dswinnerpows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dswinnerpows = append(m.Dswinnerpows, &ProtoDSWinnerPoW{})
			if err := m.Dswinnerpows[len(m.Dswinnerpows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSFinalBlockAnnouncement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSFinalBlockAnnouncement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSFinalBlockAnnouncement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Txblock == nil {
				m.Txblock = &ProtoTxBlock{}
			}
			if err := m.Txblock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Microblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Microblock == nil {
				m.Microblock = &ProtoMicroBlock{}
			}
			if err := m.Microblock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSVCBlockAnnouncement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSVCBlockAnnouncement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSVCBlockAnnouncement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vcblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vcblock == nil {
				m.Vcblock = &ByteArray{}
			}
			if err := m.Vcblock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSMissingMicroBlocksErrorMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSMissingMicroBlocksErrorMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSMissingMicroBlocksErrorMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mbhashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mbhashes = append(m.Mbhashes, make([]byte, postIndex-iNdEx))
			copy(m.Mbhashes[len(m.Mbhashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epochnum", wireType)
			}
			m.Epochnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epochnum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listenport", wireType)
			}
			m.Listenport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Listenport |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeDSBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeDSBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeDSBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shardid", wireType)
			}
			m.Shardid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shardid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dsblock == nil {
				m.Dsblock = &ProtoDSBlock{}
			}
			if err := m.Dsblock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vcblocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vcblocks = append(m.Vcblocks, &ProtoVCBlock{})
			if err := m.Vcblocks[len(m.Vcblocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sharding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sharding == nil {
				m.Sharding = &ProtoShardingStructure{}
			}
			if err := m.Sharding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeFinalBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeFinalBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeFinalBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsblocknumber", wireType)
			}
			m.Dsblocknumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dsblocknumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensusid", wireType)
			}
			m.Consensusid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consensusid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Txblock == nil {
				m.Txblock = &ProtoTxBlock{}
			}
			if err := m.Txblock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statedelta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statedelta = append(m.Statedelta[:0], dAtA[iNdEx:postIndex]...)
			if m.Statedelta == nil {
				m.Statedelta = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZilliqaMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shardids = append(m.Shardids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZilliqaMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZilliqaMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthZilliqaMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Shardids) == 0 {
					m.Shardids = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZilliqaMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shardids = append(m.Shardids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shardids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeVCFinalBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeVCFinalBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeVCFinalBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsblocknumber", wireType)
			}
			m.Dsblocknumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dsblocknumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensusid", wireType)
			}
			m.Consensusid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consensusid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Txblock == nil {
				m.Txblock = &ProtoTxBlock{}
			}
			if err := m.Txblock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statedelta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statedelta = append(m.Statedelta[:0], dAtA[iNdEx:postIndex]...)
			if m.Statedelta == nil {
				m.Statedelta = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vcblocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vcblocks = append(m.Vcblocks, &ProtoVCBlock{})
			if err := m.Vcblocks[len(m.Vcblocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeMBnForwardTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeMBnForwardTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeMBnForwardTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Microblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Microblock == nil {
				m.Microblock = &ProtoMicroBlock{}
			}
			if err := m.Microblock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txnswithreceipt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txnswithreceipt = append(m.Txnswithreceipt, &ByteArray{})
			if err := m.Txnswithreceipt[len(m.Txnswithreceipt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodePendingTxn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodePendingTxn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodePendingTxn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &NodePendingTxn_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodePendingTxn_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashcodepair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashcodepair = append(m.Hashcodepair, &NodePendingTxn_Data_Pair{})
			if err := m.Hashcodepair[len(m.Hashcodepair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epochnumber", wireType)
			}
			m.Epochnumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epochnumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shardid", wireType)
			}
			m.Shardid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shardid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodePendingTxn_Data_Pair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txnhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txnhash = append(m.Txnhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Txnhash == nil {
				m.Txnhash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeVCBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeVCBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeVCBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vcblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vcblock == nil {
				m.Vcblock = &ProtoVCBlock{}
			}
			if err := m.Vcblock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeForwardTxnBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeForwardTxnBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeForwardTxnBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epochnumber", wireType)
			}
			m.Epochnumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epochnumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsblocknum", wireType)
			}
			m.Dsblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dsblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shardid", wireType)
			}
			m.Shardid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shardid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &ProtoTransaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeMicroBlockAnnouncement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeMicroBlockAnnouncement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeMicroBlockAnnouncement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Microblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Microblock == nil {
				m.Microblock = &ProtoMicroBlock{}
			}
			if err := m.Microblock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeFallbackBlockAnnouncement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeFallbackBlockAnnouncement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeFallbackBlockAnnouncement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fallbackblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fallbackblock == nil {
				m.Fallbackblock = &ByteArray{}
			}
			if err := m.Fallbackblock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeFallbackBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeFallbackBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeFallbackBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fallbackblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fallbackblock == nil {
				m.Fallbackblock = &ProtoFallbackBlock{}
			}
			if err := m.Fallbackblock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeMissingTxnsErrorMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeMissingTxnsErrorMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeMissingTxnsErrorMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txnhashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txnhashes = append(m.Txnhashes, make([]byte, postIndex-iNdEx))
			copy(m.Txnhashes[len(m.Txnhashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epochnum", wireType)
			}
			m.Epochnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epochnum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listenport", wireType)
			}
			m.Listenport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Listenport |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetSeedPeers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetSeedPeers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetSeedPeers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listenport", wireType)
			}
			m.Listenport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Listenport |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetSeedPeers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSetSeedPeers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSetSeedPeers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidateseeds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidateseeds = append(m.Candidateseeds, &ByteArray{})
			if err := m.Candidateseeds[len(m.Candidateseeds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetDSInfoFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetDSInfoFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetDSInfoFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listenport", wireType)
			}
			m.Listenport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Listenport |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initialds", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Initialds = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetDSInfoFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSetDSInfoFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSetDSInfoFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dscommittee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dscommittee == nil {
				m.Dscommittee = &ProtoDSCommittee{}
			}
			if err := m.Dscommittee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initialds", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Initialds = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetDSBlockFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetDSBlockFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetDSBlockFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lowblocknum", wireType)
			}
			m.Lowblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lowblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Highblocknum", wireType)
			}
			m.Highblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Highblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listenport", wireType)
			}
			m.Listenport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Listenport |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Includeminerinfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Includeminerinfo = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetDSBlockFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSetDSBlockFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSetDSBlockFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupSetDSBlockFromSeed_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetDSBlockFromSeed_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lowblocknum", wireType)
			}
			m.Lowblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lowblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Highblocknum", wireType)
			}
			m.Highblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Highblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsblocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dsblocks = append(m.Dsblocks, &ProtoDSBlock{})
			if err := m.Dsblocks[len(m.Dsblocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetMinerInfoFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSetMinerInfoFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSetMinerInfoFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupSetMinerInfoFromSeed_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetMinerInfoFromSeed_MinerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MinerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MinerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minerinfodscomm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Minerinfodscomm == nil {
				m.Minerinfodscomm = &ProtoMinerInfoDSComm{}
			}
			if err := m.Minerinfodscomm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minerinfoshards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Minerinfoshards == nil {
				m.Minerinfoshards = &ProtoMinerInfoShards{}
			}
			if err := m.Minerinfoshards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetMinerInfoFromSeed_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minerinfoperds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Minerinfoperds == nil {
				m.Minerinfoperds = make(map[uint64]*LookupSetMinerInfoFromSeed_MinerInfo)
			}
			var mapkey uint64
			var mapvalue *LookupSetMinerInfoFromSeed_MinerInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZilliqaMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZilliqaMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZilliqaMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthZilliqaMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthZilliqaMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LookupSetMinerInfoFromSeed_MinerInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthZilliqaMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Minerinfoperds[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetTxBlockFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetTxBlockFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetTxBlockFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lowblocknum", wireType)
			}
			m.Lowblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lowblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Highblocknum", wireType)
			}
			m.Highblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Highblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listenport", wireType)
			}
			m.Listenport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Listenport |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetTxBlockFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSetTxBlockFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSetTxBlockFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupSetTxBlockFromSeed_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetTxBlockFromSeed_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lowblocknum", wireType)
			}
			m.Lowblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lowblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Highblocknum", wireType)
			}
			m.Highblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Highblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txblocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txblocks = append(m.Txblocks, &ProtoTxBlock{})
			if err := m.Txblocks[len(m.Txblocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetStateDeltaFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetStateDeltaFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetStateDeltaFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknum", wireType)
			}
			m.Blocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listenport", wireType)
			}
			m.Listenport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Listenport |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetStateDeltasFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetStateDeltasFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetStateDeltasFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lowblocknum", wireType)
			}
			m.Lowblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lowblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Highblocknum", wireType)
			}
			m.Highblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Highblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listenport", wireType)
			}
			m.Listenport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Listenport |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetStateDeltaFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSetStateDeltaFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSetStateDeltaFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupSetStateDeltaFromSeed_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetStateDeltaFromSeed_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknum", wireType)
			}
			m.Blocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statedelta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statedelta = append(m.Statedelta[:0], dAtA[iNdEx:postIndex]...)
			if m.Statedelta == nil {
				m.Statedelta = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetStateDeltasFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSetStateDeltasFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSetStateDeltasFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupSetStateDeltasFromSeed_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetStateDeltasFromSeed_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lowblocknum", wireType)
			}
			m.Lowblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lowblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Highblocknum", wireType)
			}
			m.Highblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Highblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statedeltas", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statedeltas = append(m.Statedeltas, make([]byte, postIndex-iNdEx))
			copy(m.Statedeltas[len(m.Statedeltas)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetStateFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetStateFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetStateFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listenport", wireType)
			}
			m.Listenport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Listenport |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetStateFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSetStateFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSetStateFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountstore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Accountstore == nil {
				m.Accountstore = &ByteArray{}
			}
			if err := m.Accountstore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetLookupOffline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSetLookupOffline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSetLookupOffline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupSetLookupOffline_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetLookupOffline_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgtype", wireType)
			}
			m.Msgtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Msgtype |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listenport", wireType)
			}
			m.Listenport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Listenport |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetLookupOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSetLookupOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSetLookupOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupSetLookupOnline_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetLookupOnline_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgtype", wireType)
			}
			m.Msgtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Msgtype |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listenport", wireType)
			}
			m.Listenport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Listenport |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetOfflineLookups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetOfflineLookups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetOfflineLookups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listenport", wireType)
			}
			m.Listenport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Listenport |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetOfflineLookups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSetOfflineLookups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSetOfflineLookups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &ByteArray{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupRaiseStartPoW) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupRaiseStartPoW: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupRaiseStartPoW: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupRaiseStartPoW_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupRaiseStartPoW_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgtype", wireType)
			}
			m.Msgtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Msgtype |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknumber", wireType)
			}
			m.Blocknumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocknumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetStartPoWFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetStartPoWFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetStartPoWFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupGetStartPoWFromSeed_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetStartPoWFromSeed_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listenport", wireType)
			}
			m.Listenport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Listenport |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknumber", wireType)
			}
			m.Blocknumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocknumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetStartPoWFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSetStartPoWFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSetStartPoWFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknumber", wireType)
			}
			m.Blocknumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocknumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetShardsFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetShardsFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetShardsFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listenport", wireType)
			}
			m.Listenport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Listenport |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetShardsFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSetShardsFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSetShardsFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sharding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sharding == nil {
				m.Sharding = &ProtoShardingStructure{}
			}
			if err := m.Sharding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetMicroBlockFromLookup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetMicroBlockFromLookup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetMicroBlockFromLookup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Portno", wireType)
			}
			m.Portno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Portno |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mbhashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mbhashes = append(m.Mbhashes, make([]byte, postIndex-iNdEx))
			copy(m.Mbhashes[len(m.Mbhashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetMicroBlockFromLookup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSetMicroBlockFromLookup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSetMicroBlockFromLookup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Microblocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Microblocks = append(m.Microblocks, &ProtoMicroBlock{})
			if err := m.Microblocks[len(m.Microblocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetMicroBlockFromL2L) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetMicroBlockFromL2l: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetMicroBlockFromL2l: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupGetMicroBlockFromL2L_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetMicroBlockFromL2L_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Portno", wireType)
			}
			m.Portno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Portno |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mbhashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mbhashes = append(m.Mbhashes, make([]byte, postIndex-iNdEx))
			copy(m.Mbhashes[len(m.Mbhashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupForwardTxnsFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupForwardTxnsFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupForwardTxnsFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shardtransactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shardtransactions == nil {
				m.Shardtransactions = &ProtoTransactionArray{}
			}
			if err := m.Shardtransactions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dstransactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dstransactions == nil {
				m.Dstransactions = &ProtoTransactionArray{}
			}
			if err := m.Dstransactions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetTxnsFromLookup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetTxnsFromLookup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetTxnsFromLookup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Portno", wireType)
			}
			m.Portno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Portno |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mbhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mbhash = append(m.Mbhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Mbhash == nil {
				m.Mbhash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txnhashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txnhashes = append(m.Txnhashes, make([]byte, postIndex-iNdEx))
			copy(m.Txnhashes[len(m.Txnhashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetTxnsFromL2L) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetTxnsFromL2l: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetTxnsFromL2l: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupGetTxnsFromL2L_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetTxnsFromL2L_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Portno", wireType)
			}
			m.Portno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Portno |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mbhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mbhash = append(m.Mbhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Mbhash == nil {
				m.Mbhash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txnhashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txnhashes = append(m.Txnhashes, make([]byte, postIndex-iNdEx))
			copy(m.Txnhashes[len(m.Txnhashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetTxnsFromLookup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSetTxnsFromLookup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSetTxnsFromLookup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mbhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mbhash = append(m.Mbhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Mbhash == nil {
				m.Mbhash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &ByteArray{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetDirectoryBlocksFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetDirectoryBlocksFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetDirectoryBlocksFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Portno", wireType)
			}
			m.Portno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Portno |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexnum", wireType)
			}
			m.Indexnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Indexnum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Includeminerinfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Includeminerinfo = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetDirectoryBlocksFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSetDirectoryBlocksFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSetDirectoryBlocksFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupSetDirectoryBlocksFromSeed_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetDirectoryBlocksFromSeed_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexnum", wireType)
			}
			m.Indexnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Indexnum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dirblocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dirblocks = append(m.Dirblocks, &ProtoSingleDirectoryBlock{})
			if err := m.Dirblocks[len(m.Dirblocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusAnnouncement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusAnnouncement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusAnnouncement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensusinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Consensusinfo == nil {
				m.Consensusinfo = &ConsensusAnnouncement_ConsensusInfo{}
			}
			if err := m.Consensusinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DSDSBlockAnnouncement{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Announcement = &ConsensusAnnouncement_Dsblock{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Microblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeMicroBlockAnnouncement{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Announcement = &ConsensusAnnouncement_Microblock{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DSFinalBlockAnnouncement{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Announcement = &ConsensusAnnouncement_Finalblock{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vcblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DSVCBlockAnnouncement{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Announcement = &ConsensusAnnouncement_Vcblock{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fallbackblock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeFallbackBlockAnnouncement{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Announcement = &ConsensusAnnouncement_Fallbackblock{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalsignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Finalsignature == nil {
				m.Finalsignature = &ByteArray{}
			}
			if err := m.Finalsignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusAnnouncement_ConsensusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensusid", wireType)
			}
			m.Consensusid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consensusid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknumber", wireType)
			}
			m.Blocknumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocknumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockhash = append(m.Blockhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Blockhash == nil {
				m.Blockhash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaderid", wireType)
			}
			m.Leaderid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leaderid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensusinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Consensusinfo == nil {
				m.Consensusinfo = &ConsensusCommit_ConsensusInfo{}
			}
			if err := m.Consensusinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusCommit_ConsensusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensusid", wireType)
			}
			m.Consensusid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consensusid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknumber", wireType)
			}
			m.Blocknumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocknumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockhash = append(m.Blockhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Blockhash == nil {
				m.Blockhash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backupid", wireType)
			}
			m.Backupid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Backupid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commitpoint == nil {
				m.Commitpoint = &ByteArray{}
			}
			if err := m.Commitpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitpointhash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commitpointhash == nil {
				m.Commitpointhash = &ByteArray{}
			}
			if err := m.Commitpointhash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensusinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Consensusinfo == nil {
				m.Consensusinfo = &ConsensusChallenge_ConsensusInfo{}
			}
			if err := m.Consensusinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusChallenge_SubsetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubsetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubsetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregatedcommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aggregatedcommit == nil {
				m.Aggregatedcommit = &ByteArray{}
			}
			if err := m.Aggregatedcommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregatedkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aggregatedkey == nil {
				m.Aggregatedkey = &ByteArray{}
			}
			if err := m.Aggregatedkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Challenge == nil {
				m.Challenge = &ByteArray{}
			}
			if err := m.Challenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusChallenge_ConsensusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensusid", wireType)
			}
			m.Consensusid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consensusid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknumber", wireType)
			}
			m.Blocknumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocknumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockhash = append(m.Blockhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Blockhash == nil {
				m.Blockhash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaderid", wireType)
			}
			m.Leaderid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leaderid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsetinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subsetinfo = append(m.Subsetinfo, &ConsensusChallenge_SubsetInfo{})
			if err := m.Subsetinfo[len(m.Subsetinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensusinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Consensusinfo == nil {
				m.Consensusinfo = &ConsensusResponse_ConsensusInfo{}
			}
			if err := m.Consensusinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusResponse_SubsetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubsetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubsetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &ByteArray{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusResponse_ConsensusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensusid", wireType)
			}
			m.Consensusid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consensusid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknumber", wireType)
			}
			m.Blocknumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocknumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockhash = append(m.Blockhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Blockhash == nil {
				m.Blockhash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backupid", wireType)
			}
			m.Backupid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Backupid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsetinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subsetinfo = append(m.Subsetinfo, &ConsensusResponse_SubsetInfo{})
			if err := m.Subsetinfo[len(m.Subsetinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusCollectiveSig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusCollectiveSig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusCollectiveSig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensusinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Consensusinfo == nil {
				m.Consensusinfo = &ConsensusCollectiveSig_ConsensusInfo{}
			}
			if err := m.Consensusinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusCollectiveSig_ConsensusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensusid", wireType)
			}
			m.Consensusid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consensusid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknumber", wireType)
			}
			m.Blocknumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocknumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockhash = append(m.Blockhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Blockhash == nil {
				m.Blockhash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaderid", wireType)
			}
			m.Leaderid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leaderid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collectivesig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collectivesig == nil {
				m.Collectivesig = &ByteArray{}
			}
			if err := m.Collectivesig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZilliqaMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bitmap = append(m.Bitmap, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZilliqaMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZilliqaMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthZilliqaMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Bitmap) == 0 {
					m.Bitmap = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZilliqaMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bitmap = append(m.Bitmap, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitmap", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusCommitFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusCommitFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusCommitFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensusinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Consensusinfo == nil {
				m.Consensusinfo = &ConsensusCommitFailure_ConsensusInfo{}
			}
			if err := m.Consensusinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusCommitFailure_ConsensusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensusid", wireType)
			}
			m.Consensusid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consensusid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknumber", wireType)
			}
			m.Blocknumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocknumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockhash = append(m.Blockhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Blockhash == nil {
				m.Blockhash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backupid", wireType)
			}
			m.Backupid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Backupid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errormsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errormsg = append(m.Errormsg[:0], dAtA[iNdEx:postIndex]...)
			if m.Errormsg == nil {
				m.Errormsg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusConsensusFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusConsensusFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusConsensusFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensusinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Consensusinfo == nil {
				m.Consensusinfo = &ConsensusConsensusFailure_ConsensusInfo{}
			}
			if err := m.Consensusinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusConsensusFailure_ConsensusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensusid", wireType)
			}
			m.Consensusid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consensusid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknumber", wireType)
			}
			m.Blocknumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocknumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockhash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockhash = append(m.Blockhash[:0], dAtA[iNdEx:postIndex]...)
			if m.Blockhash == nil {
				m.Blockhash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaderid", wireType)
			}
			m.Leaderid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leaderid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetDSTxBlockFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetDSTxBlockFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetDSTxBlockFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dslowblocknum", wireType)
			}
			m.Dslowblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dslowblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dshighblocknum", wireType)
			}
			m.Dshighblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dshighblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txlowblocknum", wireType)
			}
			m.Txlowblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Txlowblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txhighblocknum", wireType)
			}
			m.Txhighblocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Txhighblocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listenport", wireType)
			}
			m.Listenport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Listenport |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VCNodeSetDSTxBlockFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VCNodeSetDSTxBlockFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VCNodeSetDSTxBlockFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &VCNodeSetDSTxBlockFromSeed_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VCNodeSetDSTxBlockFromSeed_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsblocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dsblocks = append(m.Dsblocks, &ProtoDSBlock{})
			if err := m.Dsblocks[len(m.Dsblocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txblocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txblocks = append(m.Txblocks, &ProtoTxBlock{})
			if err := m.Txblocks[len(m.Txblocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSetShardNodeNetworkInfoUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeSetShardNodeNetworkInfoUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeSetShardNodeNetworkInfoUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &NodeSetShardNodeNetworkInfoUpdate_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSetShardNodeNetworkInfoUpdate_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsepochnumber", wireType)
			}
			m.Dsepochnumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dsepochnumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shardnodepubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shardnodepubkey == nil {
				m.Shardnodepubkey = &ByteArray{}
			}
			if err := m.Shardnodepubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shardnodenewnetworkinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shardnodenewnetworkinfo == nil {
				m.Shardnodenewnetworkinfo = &ProtoPeer{}
			}
			if err := m.Shardnodenewnetworkinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSLookupSetDSGuardNetworkInfoUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSLookupSetDSGuardNetworkInfoUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSLookupSetDSGuardNetworkInfoUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DSLookupSetDSGuardNetworkInfoUpdate_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSLookupSetDSGuardNetworkInfoUpdate_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsepochnumber", wireType)
			}
			m.Dsepochnumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dsepochnumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsguardpubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dsguardpubkey == nil {
				m.Dsguardpubkey = &ByteArray{}
			}
			if err := m.Dsguardpubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsguardnewnetworkinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dsguardnewnetworkinfo == nil {
				m.Dsguardnewnetworkinfo = &ProtoPeer{}
			}
			if err := m.Dsguardnewnetworkinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeGetGuardNodeNetworkInfoUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeGetGuardNodeNetworkInfoUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeGetGuardNodeNetworkInfoUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &NodeGetGuardNodeNetworkInfoUpdate_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeGetGuardNodeNetworkInfoUpdate_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Portno", wireType)
			}
			m.Portno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Portno |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsepochnumber", wireType)
			}
			m.Dsepochnumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dsepochnumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoDSGuardUpdateStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoDSGuardUpdateStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoDSGuardUpdateStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsguardpubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dsguardpubkey == nil {
				m.Dsguardpubkey = &ByteArray{}
			}
			if err := m.Dsguardpubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsguardnewnetworkinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dsguardnewnetworkinfo == nil {
				m.Dsguardnewnetworkinfo = &ProtoPeer{}
			}
			if err := m.Dsguardnewnetworkinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSetGuardNodeNetworkInfoUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeSetGuardNodeNetworkInfoUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeSetGuardNodeNetworkInfoUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &NodeSetGuardNodeNetworkInfoUpdate_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lookuppubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lookuppubkey == nil {
				m.Lookuppubkey = &ByteArray{}
			}
			if err := m.Lookuppubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSetGuardNodeNetworkInfoUpdate_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsguardupdatestruct", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dsguardupdatestruct = append(m.Dsguardupdatestruct, &ProtoDSGuardUpdateStruct{})
			if err := m.Dsguardupdatestruct[len(m.Dsguardupdatestruct)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeedSetHistoricalDB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeedSetHistoricalDB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeedSetHistoricalDB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &SeedSetHistoricalDB_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeedSetHistoricalDB_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeRemoveFromBlacklist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeRemoveFromBlacklist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeRemoveFromBlacklist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &NodeRemoveFromBlacklist_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeRemoveFromBlacklist_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpAddress == nil {
				m.IpAddress = &ByteArray{}
			}
			if err := m.IpAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsepochnumber", wireType)
			}
			m.Dsepochnumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dsepochnumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoCosigsRewardsStructure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoCosigsRewardsStructure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoCosigsRewardsStructure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epochnumber", wireType)
			}
			m.Epochnumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epochnumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shardid", wireType)
			}
			m.Shardid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shardid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockbase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blockbase == nil {
				m.Blockbase = &ProtoBlockBase{}
			}
			if err := m.Blockbase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &ByteArray{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetCosigsRewardsFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetCosigsRewardsFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetCosigsRewardsFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupGetCosigsRewardsFromSeed_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetCosigsRewardsFromSeed_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Portno", wireType)
			}
			m.Portno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Portno |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epochnumber", wireType)
			}
			m.Epochnumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epochnumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetCosigsRewardsFromSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSetCosigsRewardsFromSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSetCosigsRewardsFromSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupSetCosigsRewardsFromSeed_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSetCosigsRewardsFromSeed_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cosigsrewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cosigsrewards = append(m.Cosigsrewards, &ProtoCosigsRewardsStructure{})
			if err := m.Cosigsrewards[len(m.Cosigsrewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetVCFinalBlockFromL2L) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetVCFinalBlockFromL2l: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetVCFinalBlockFromL2l: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupGetVCFinalBlockFromL2L_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetVCFinalBlockFromL2L_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknum", wireType)
			}
			m.Blocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &ProtoPeer{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetDSBlockFromL2L) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetDSBlockFromL2l: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetDSBlockFromL2l: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupGetDSBlockFromL2L_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetDSBlockFromL2L_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknum", wireType)
			}
			m.Blocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &ProtoPeer{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetMBnForwardTxnFromL2L) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetMBnForwardTxnFromL2l: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetMBnForwardTxnFromL2l: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupGetMBnForwardTxnFromL2L_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetMBnForwardTxnFromL2L_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknum", wireType)
			}
			m.Blocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardId", wireType)
			}
			m.ShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &ProtoPeer{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetPendingTxnFromL2L) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupGetPendingTxnFromL2l: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupGetPendingTxnFromL2l: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LookupGetPendingTxnFromL2L_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &ByteArray{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &ByteArray{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupGetPendingTxnFromL2L_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocknum", wireType)
			}
			m.Blocknum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocknum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardId", wireType)
			}
			m.ShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &ProtoPeer{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZilliqaMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZilliqaMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZilliqaMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZilliqaMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZilliqaMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZilliqaMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZilliqaMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZilliqaMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZilliqaMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZilliqaMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZilliqaMessage = fmt.Errorf("proto: unexpected end of group")
)
